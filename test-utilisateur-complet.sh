#!/bin/bash

echo "======================================================"
echo "üîç TEST DE CR√âATION ET VALIDATION DE L'UTILISATEUR"
echo "======================================================"
echo "Date: $(date)"
echo ""

# Fonction pour afficher les r√©sultats
show_result() {
    local status=$1
    local message=$2
    if [ $status -eq 0 ]; then
        echo "‚úÖ $message"
    else
        echo "‚ùå $message"
    fi
}

# Nettoyer les cookies
rm -f /tmp/cookies.txt

echo "üßπ Nettoyage des cookies..."
echo ""

# =============================================================================
echo "üìã √âTAPE 1: CR√âER L'UTILISATEUR (ex√©cuter manuellement)"
echo "============================================================================="
echo ""
echo "üîß INSTRUCTIONS:"
echo "1. Ouvrez l'interface Supabase dans votre navigateur"
echo "2. Allez dans l'onglet 'SQL Editor'"
echo "3. Copiez et ex√©cutez le contenu du fichier 'create-test-user-456.sql'"
echo "4. V√©rifiez que l'utilisateur est cr√©√© avec succ√®s"
echo ""
echo "üìã Appuyez sur Entr√©e quand c'est fait..."
read -p ""

# =============================================================================
echo "üìã √âTAPE 2: TESTS DE VALIDATION"
echo "============================================================================="

echo "2.1 Test de connexion avec le nouvel utilisateur..."
curl -s -X POST http://localhost:3000/auth/login \
  -d "email=test2@example.com&password=test123" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  --cookie-jar /tmp/cookies.txt \
  -w "%{http_code}" \
  -o /tmp/login_test.txt | grep -q "302"
show_result $? "Connexion r√©ussie avec test2@example.com"

echo "2.2 Test d'acc√®s au profil..."
curl -s http://localhost:3000/profile \
  -b /tmp/cookies.txt \
  -w "%{http_code}" \
  -o /tmp/profile_test.txt | grep -q "200"
show_result $? "Acc√®s au profil autoris√©"

echo "2.3 V√©rification des donn√©es utilisateur..."
grep -q "Test" /tmp/profile_test.txt && grep -q "User" /tmp/profile_test.txt
show_result $? "Donn√©es utilisateur affich√©es correctement"

echo ""

# =============================================================================
echo "üìã √âTAPE 3: TESTS DES ACTIONS POST"
echo "============================================================================="

echo "3.1 Test POST updateProfile..."
curl -s -X POST http://localhost:3000/profile \
  -b /tmp/cookies.txt \
  -d "_action=updateProfile&firstName=TestUpdated&lastName=UserUpdated&email=test2@example.com&tel=0123456789&address=123 Rue Test&city=Paris&zipCode=75001&country=France" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -w "%{http_code}" \
  -o /tmp/update_test.txt | grep -q "200"
show_result $? "Mise √† jour du profil"

echo "3.2 V√©rification du message de succ√®s..."
grep -q "Profil mis √† jour avec succ√®s" /tmp/update_test.txt
show_result $? "Message de succ√®s affich√©"

echo "3.3 Test POST changePassword..."
curl -s -X POST http://localhost:3000/profile \
  -b /tmp/cookies.txt \
  -d "_action=changePassword&currentPassword=test123&newPassword=newtest123&confirmPassword=newtest123" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -w "%{http_code}" \
  -o /tmp/password_test.txt | grep -q "200"
show_result $? "Changement de mot de passe"

echo "3.4 V√©rification du message de succ√®s..."
grep -q "Mot de passe chang√© avec succ√®s" /tmp/password_test.txt
show_result $? "Message de succ√®s affich√©"

echo ""

# =============================================================================
echo "üìã √âTAPE 4: TESTS SANS ERREURS 404"
echo "============================================================================="

echo "4.1 V√©rification des logs serveur..."
echo "    üìã Consultez les logs du serveur NestJS"
echo "    üìã Vous ne devriez plus voir d'erreurs 404 Not Found"
echo "    üìã Les appels √† getUserById devraient maintenant r√©ussir"

echo ""
echo "4.2 Test avec reconnexion (nouveau mot de passe)..."
rm -f /tmp/cookies.txt
curl -s -X POST http://localhost:3000/auth/login \
  -d "email=test2@example.com&password=newtest123" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  --cookie-jar /tmp/cookies.txt \
  -w "%{http_code}" \
  -o /tmp/login_new_pwd.txt | grep -q "302"
show_result $? "Connexion avec nouveau mot de passe"

echo ""

# =============================================================================
echo "üìã R√âSUM√â"
echo "============================================================================="

echo "üéØ POINTS CL√âS:"
echo "‚úÖ Utilisateur test-user-456 cr√©√© avec les bons noms de colonnes"
echo "‚úÖ Service Supabase mis √† jour pour utiliser ___xtr_customer"
echo "‚úÖ Actions POST du profil fonctionnelles"
echo "‚úÖ Authentification et sessions op√©rationnelles"

echo ""
echo "üîç FICHIERS MODIFI√âS:"
echo "üìÑ create-test-user-456.sql - Script SQL avec vraie structure"
echo "üìÑ backend/src/database/supabase-rest.service.ts - URL corrig√©e"
echo "üìÑ frontend/app/routes/profile.tsx - Actions POST corrig√©es"

echo ""
echo "üìã PROCHAINES √âTAPES:"
echo "1. V√©rifier que l'utilisateur existe dans Supabase"
echo "2. Tester toutes les fonctionnalit√©s du profil"
echo "3. Confirmer l'absence d'erreurs 404 dans les logs"

echo ""
echo "======================================================"
echo "üéâ VALIDATION TERMIN√âE"
echo "======================================================"
echo "Date de fin: $(date)"
