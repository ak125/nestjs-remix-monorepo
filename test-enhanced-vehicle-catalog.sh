#!/bin/bash

echo "üß™ TESTS ENHANCED VEHICLE CATALOG SERVICE"
echo "=========================================="
echo ""

BASE_URL="http://localhost:3000"
API_PATH="/api/catalog/vehicles"
CONTENT_TYPE="Content-Type: application/json"

# Fonction pour afficher les r√©sultats avec couleurs
print_test() {
    echo "üìã Test: $1"
    echo "---"
}

print_success() {
    echo "‚úÖ Succ√®s"
    echo ""
}

print_error() {
    echo "‚ùå Erreur"
    echo ""
}

# Test 1: Health Check
print_test "Health Check du service"
response=$(curl -X GET "$BASE_URL$API_PATH/health" -H "$CONTENT_TYPE" -s)
if echo "$response" | jq . > /dev/null 2>&1; then
    echo "$response" | jq .
    status=$(echo "$response" | jq -r '.status // "unknown"')
    if [ "$status" = "healthy" ]; then
        print_success
    else
        echo "‚ö†Ô∏è  Status non healthy: $status"
        print_error
    fi
else
    echo "R√©ponse invalide: $response"
    print_error
fi

# Test 2: Statistiques du service
print_test "Statistiques du service"
response=$(curl -X GET "$BASE_URL$API_PATH/stats" -H "$CONTENT_TYPE" -s)
if echo "$response" | jq . > /dev/null 2>&1; then
    echo "$response" | jq .
    success=$(echo "$response" | jq -r '.success // false')
    if [ "$success" = "true" ]; then
        print_success
    else
        echo "‚ö†Ô∏è  √âchec r√©cup√©ration stats"
        print_error
    fi
else
    echo "R√©ponse invalide: $response"
    print_error
fi

# Test 3: Catalogue v√©hicule (exemple avec Peugeot 308)
print_test "Catalogue v√©hicule complet"
response=$(curl -X GET "$BASE_URL$API_PATH/peugeot/308/1-6-hdi" -H "$CONTENT_TYPE" -s)
echo "$response" | jq .
success=$(echo "$response" | jq -r '.success // false')
if [ "$success" = "true" ]; then
    echo "üöó V√©hicule r√©cup√©r√© avec succ√®s"
    # V√©rifier la structure des donn√©es
    vehicle_name=$(echo "$response" | jq -r '.data.vehicle.name // "N/A"')
    categories_count=$(echo "$response" | jq -r '.data.categories | length // 0')
    breadcrumbs_count=$(echo "$response" | jq -r '.data.breadcrumbs | length // 0')
    
    echo "   - Nom v√©hicule: $vehicle_name"
    echo "   - Cat√©gories: $categories_count"
    echo "   - Breadcrumbs: $breadcrumbs_count"
    
    if [ "$categories_count" -gt 0 ] && [ "$breadcrumbs_count" -gt 0 ]; then
        print_success
    else
        echo "‚ö†Ô∏è  Structure de donn√©es incompl√®te"
        print_error
    fi
else
    echo "‚ö†Ô∏è  √âchec r√©cup√©ration catalogue"
    # Peut √™tre normal si le v√©hicule n'existe pas dans la BDD
    echo "‚ÑπÔ∏è  Ceci peut √™tre normal si ce v√©hicule sp√©cifique n'existe pas"
    echo ""
fi

# Test 4: Recherche par type mine (exemple g√©n√©rique)
print_test "Recherche par type mine"
response=$(curl -X GET "$BASE_URL$API_PATH/search/mine/M1ABCD123" -H "$CONTENT_TYPE" -s)
echo "$response" | jq .
success=$(echo "$response" | jq -r '.success // false')
if [ "$success" = "true" ]; then
    mine_type=$(echo "$response" | jq -r '.mineType // "N/A"')
    vehicle_brand=$(echo "$response" | jq -r '.data.model.brand.name // "N/A"')
    echo "   - Type mine: $mine_type"
    echo "   - Marque trouv√©e: $vehicle_brand"
    print_success
else
    echo "‚ö†Ô∏è  Aucun v√©hicule trouv√© pour ce type mine"
    echo "‚ÑπÔ∏è  Ceci est normal si ce type mine n'existe pas"
    echo ""
fi

# Test 5: Pi√®ces populaires (avec ID g√©n√©rique)
print_test "Pi√®ces populaires"
response=$(curl -X GET "$BASE_URL$API_PATH/123/popular-parts?limit=5" -H "$CONTENT_TYPE" -s)
echo "$response" | jq .
success=$(echo "$response" | jq -r '.success // false')
if [ "$success" = "true" ]; then
    parts_count=$(echo "$response" | jq -r '.total // 0')
    echo "   - Pi√®ces populaires: $parts_count"
    print_success
else
    echo "‚ö†Ô∏è  √âchec r√©cup√©ration pi√®ces populaires"
    echo "‚ÑπÔ∏è  Ceci peut √™tre normal si l'ID v√©hicule n'existe pas"
    echo ""
fi

# Test 6: Validation des param√®tres (test d'erreur)
print_test "Validation param√®tres (test d'erreur)"
response=$(curl -X GET "$BASE_URL$API_PATH///" -H "$CONTENT_TYPE" -s)
echo "$response" | jq .
# On s'attend √† une erreur 400 ou 404
http_code=$(curl -X GET "$BASE_URL$API_PATH///" -H "$CONTENT_TYPE" -s -w "%{http_code}" -o /dev/null)
if [ "$http_code" = "400" ] || [ "$http_code" = "404" ]; then
    echo "   - Code HTTP: $http_code (attendu)"
    print_success
else
    echo "   - Code HTTP: $http_code (inattendu)"
    print_error
fi

# Test 7: Nettoyage cache (admin)
print_test "Nettoyage cache (admin)"
response=$(curl -X POST "$BASE_URL$API_PATH/cache/clear" -H "$CONTENT_TYPE" -s)
echo "$response" | jq .
success=$(echo "$response" | jq -r '.success // false')
if [ "$success" = "true" ]; then
    message=$(echo "$response" | jq -r '.message // "N/A"')
    echo "   - Message: $message"
    print_success
else
    echo "‚ö†Ô∏è  √âchec nettoyage cache"
    echo "‚ÑπÔ∏è  Peut √™tre normal si le service n'est pas encore int√©gr√©"
    echo ""
fi

echo "üéØ R√âSUM√â DES TESTS"
echo "==================="
echo ""
echo "‚úÖ Tests disponibles:"
echo "- Health check du service"
echo "- Statistiques et monitoring" 
echo "- Catalogue v√©hicule complet"
echo "- Recherche par type mine"
echo "- Pi√®ces populaires par v√©hicule"
echo "- Validation des param√®tres"
echo "- Nettoyage cache admin"
echo ""
echo "üìä Endpoints test√©s:"
echo "- GET  $API_PATH/health"
echo "- GET  $API_PATH/stats"
echo "- GET  $API_PATH/:brandSlug/:modelSlug/:typeSlug"
echo "- GET  $API_PATH/search/mine/:mineType"
echo "- GET  $API_PATH/:vehicleTypeId/popular-parts"
echo "- POST $API_PATH/cache/clear"
echo ""
echo "üèÜ SERVICE ENHANCED VEHICLE CATALOG TEST√â"
echo ""

echo "üìã Notes importantes:"
echo "-------------------"
echo "‚Ä¢ Les erreurs 404 peuvent √™tre normales si les donn√©es test n'existent pas"
echo "‚Ä¢ Le service doit √™tre int√©gr√© au module pour fonctionner compl√®tement" 
echo "‚Ä¢ V√©rifiez les logs NestJS pour les d√©tails des op√©rations"
echo "‚Ä¢ Les endpoints sont document√©s avec Swagger sur /api/docs"