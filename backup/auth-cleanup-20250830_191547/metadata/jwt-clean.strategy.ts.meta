Fichier: src/auth/jwt-clean.strategy.ts
Cat√©gorie: Strat√©gie redondante
Raison de suppression: Strat√©gie JWT principale suffit
Date de sauvegarde: Sat Aug 30 19:15:48 UTC 2025
Taille: 1552
Checksum MD5: 394f051984f62ba839a2c9d08f2d407f  src/auth/jwt-clean.strategy.ts
Git commit: fc1abddb0c0469efecef4a9a1c49bc010bd9bae8
Git branch: optimisation

=== CONTENU ===
import { Injectable, Logger } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';

@Injectable()
export class JwtCleanStrategy extends PassportStrategy(Strategy, 'jwt') {
  private readonly logger = new Logger(JwtCleanStrategy.name);

  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: process.env.JWT_SECRET || 'fallback-secret-key',
    });
    
    console.log('üöÄ JwtCleanStrategy - CONSTRUCTEUR APPEL√â !');
    console.log('üîë JwtCleanStrategy - Secret:', process.env.JWT_SECRET ? 'JWT_SECRET configur√©' : 'fallback utilis√©');
    this.logger.log('‚úÖ JwtCleanStrategy initialis√©e avec succ√®s');
  }

  async validate(payload: any) {
    console.log('üîç JwtCleanStrategy - VALIDATE APPEL√â !');
    console.log('üîç JwtCleanStrategy - Payload:', JSON.stringify(payload, null, 2));
    
    // Validation simple bas√©e sur le payload JWT
    if (payload && payload.sub) {
      const user = {
        id: payload.sub,
        email: payload.email || 'unknown@example.com',
        role: payload.role || 'user',
        level: payload.level || 1,
        isAuthenticated: true,
        authMethod: 'jwt',
      };
      
      console.log('‚úÖ JwtCleanStrategy - Utilisateur valid√© avec succ√®s:', JSON.stringify(user, null, 2));
      return user;
    }
    
    console.log('‚ùå JwtCleanStrategy - Validation √©chou√©e - payload invalide');
    return null;
  }
}
