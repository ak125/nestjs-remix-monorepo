Fichier: src/auth/strategies/jwt.strategy.ts
Cat√©gorie: Strat√©gie redondante
Raison de suppression: Strat√©gie JWT principale suffit
Date de sauvegarde: Sat Aug 30 19:15:08 UTC 2025
Taille: 1184
Checksum MD5: 2dd38f169ef2f3a6dec68f1f48624558  src/auth/strategies/jwt.strategy.ts
Git commit: fc1abddb0c0469efecef4a9a1c49bc010bd9bae8
Git branch: optimisation

=== CONTENU ===
import { Injectable, Logger } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  private readonly logger = new Logger(JwtStrategy.name);

  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: process.env.JWT_SECRET || 'default-secret-key',
    });
    this.logger.log('üîê JwtStrategy initialized with secret: ' + (process.env.JWT_SECRET ? 'JWT_SECRET' : 'default-secret-key'));
  }

  async validate(payload: any) {
    this.logger.log(`üîç JWT validation called with payload: ${JSON.stringify(payload)}`);
    
    // Pour les tests, on accepte tout payload valide
    if (payload.sub) {
      const user = {
        id: payload.sub,
        email: payload.email || 'test@example.com',
        role: payload.role || 'user'
      };
      this.logger.log(`‚úÖ JWT validated successfully for user: ${user.id}`);
      return user;
    }
    
    this.logger.warn('‚ùå JWT validation failed - no sub in payload');
    return null;
  }
}