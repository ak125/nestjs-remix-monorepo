#!/bin/bash

echo "======================================================"
echo "üîç DIAGNOSTIC DE LA BASE DE DONN√âES"
echo "======================================================"
echo "Date: $(date)"
echo ""

# Fonction pour afficher les r√©sultats
show_result() {
    local status=$1
    local message=$2
    if [ $status -eq 0 ]; then
        echo "‚úÖ $message"
    else
        echo "‚ùå $message"
    fi
}

# =============================================================================
echo "üìã PHASE 1: DIAGNOSTIC DES SERVICES"
echo "============================================================================="

echo "1.1 V√©rification des processus Docker..."
docker ps 2>/dev/null | grep -q "postgres\|supabase"
show_result $? "Services Docker PostgreSQL/Supabase"

echo "1.2 V√©rification des ports d'√©coute..."
netstat -tuln 2>/dev/null | grep -E ":5432|:54321"
echo "    üìã Ports PostgreSQL/Supabase d√©tect√©s"

echo "1.3 V√©rification des variables d'environnement..."
if [ -n "$DATABASE_URL" ]; then
    echo "‚úÖ DATABASE_URL d√©finie"
else
    echo "‚ùå DATABASE_URL non d√©finie"
fi

if [ -n "$SUPABASE_URL" ]; then
    echo "‚úÖ SUPABASE_URL d√©finie: $SUPABASE_URL"
else
    echo "‚ùå SUPABASE_URL non d√©finie"
fi

echo ""

# =============================================================================
echo "üìã PHASE 2: TESTS DE CONNECTIVIT√â BASE DE DONN√âES"
echo "============================================================================="

echo "2.1 Test de connexion NestJS backend..."
curl -s http://localhost:3000/debug/db-status 2>/dev/null | grep -q "ok\|connected"
show_result $? "Connexion backend √† la base de donn√©es"

echo "2.2 Test de l'API REST Supabase..."
curl -s -I http://localhost:54321/rest/v1/ 2>/dev/null | head -1 | grep -q "200\|404"
show_result $? "API REST Supabase accessible"

echo "2.3 Test de l'API Supabase avec authentification..."
curl -s -X GET 'http://localhost:54321/rest/v1/___xtr_customer?select=id,email' \
  -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0' \
  2>/dev/null | grep -q "id\|email\|\[\]"
show_result $? "Acc√®s √† la table ___xtr_customer"

echo ""

# =============================================================================
echo "üìã PHASE 3: ANALYSE DU PROBL√àME test-user-456"
echo "============================================================================="

echo "3.1 Recherche de l'utilisateur test-user-456..."
# Nettoyage des cookies pour tests propres
rm -f /tmp/cookies.txt

# Connexion pour obtenir une session
curl -s -X POST http://localhost:3000/auth/login \
  -d "email=test2@example.com&password=test123" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  --cookie-jar /tmp/cookies.txt \
  -o /tmp/login_result.txt

# Test d'acc√®s au profil pour voir les logs
curl -s http://localhost:3000/profile \
  -b /tmp/cookies.txt \
  -o /tmp/profile_result.txt

echo "    üìã Consulter les logs du serveur pour voir les erreurs 404"
echo "    üìã L'utilisateur test-user-456 semble manquer dans la base de donn√©es"

echo "3.2 V√©rification des utilisateurs existants..."
echo "    üìã Utiliser l'√©diteur SQL de Supabase pour ex√©cuter:"
echo "    SELECT id, email, firstName, lastName FROM ___xtr_customer ORDER BY createdAt DESC;"

echo ""

# =============================================================================
echo "üìã PHASE 4: SOLUTIONS RECOMMAND√âES"
echo "============================================================================="

echo "4.1 üìã √âTAPES POUR R√âSOUDRE LE PROBL√àME:"
echo ""
echo "   √âTAPE 1: Acc√©der √† l'interface Supabase"
echo "   - Ouvrir http://localhost:54321 dans le navigateur"
echo "   - Aller dans l'onglet 'SQL Editor'"
echo ""
echo "   √âTAPE 2: Ex√©cuter le script SQL"
echo "   - Copier le contenu du fichier create-test-user-456.sql"
echo "   - Coller et ex√©cuter dans l'√©diteur SQL"
echo ""
echo "   √âTAPE 3: V√©rifier la cr√©ation"
echo "   - Ex√©cuter: SELECT * FROM ___xtr_customer WHERE id = 'test-user-456';"
echo "   - Confirmer que l'utilisateur existe"
echo ""
echo "   √âTAPE 4: Retester le syst√®me"
echo "   - Relancer ./verification-approfondie.sh"
echo "   - V√©rifier que les erreurs 404 ont disparu"

echo ""
echo "4.2 üìã ALTERNATIVE: Utiliser l'interface web Supabase"
echo "   - Aller dans l'onglet 'Table Editor'"
echo "   - S√©lectionner la table ___xtr_customer"
echo "   - Cliquer sur 'Insert' ‚Üí 'Insert row'"
echo "   - Remplir les champs selon le fichier SQL"

echo ""
echo "4.3 üìã V√âRIFICATION POST-CR√âATION"
echo "   - Relancer ce script de diagnostic"
echo "   - Tester la connexion avec test2@example.com"
echo "   - V√©rifier que les actions POST fonctionnent sans erreur 404"

echo ""

# =============================================================================
echo "üìã INFORMATIONS SYST√àME"
echo "============================================================================="

echo "üìÑ Fichiers cr√©√©s pour la r√©solution:"
echo "   - create-test-user-456.sql (script SQL √† ex√©cuter)"
echo "   - verification-approfondie.sh (tests complets)"
echo "   - diagnostic-db.sh (ce script de diagnostic)"

echo ""
echo "üîç Logs √† surveiller:"
echo "   - Logs du serveur NestJS (terminal de d√©veloppement)"
echo "   - Logs Supabase (si disponibles)"
echo "   - R√©ponses HTTP dans les fichiers /tmp/test_*.txt"

echo ""
echo "======================================================"
echo "üéØ DIAGNOSTIC TERMIN√â"
echo "======================================================"
echo "Date de fin: $(date)"
echo ""
echo "üöÄ PROCHAINES √âTAPES:"
echo "1. Cr√©er l'utilisateur test-user-456 avec le script SQL"
echo "2. Relancer la v√©rification approfondie"
echo "3. Confirmer que tous les tests passent au vert"
