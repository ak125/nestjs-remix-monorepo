#!/bin/bash

# ========================================
# SCRIPT MA√éTRE - TESTS CURL COMPLETS
# ========================================
# Ex√©cute tous les tests pour le module de paiements

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
NC='\033[0m'

API_BASE="http://localhost:3000"

log_header() {
    echo -e "${BOLD}${CYAN}$1${NC}"
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction pour v√©rifier l'existence d'un script
check_script() {
    local script_path="$1"
    local script_name="$2"
    
    if [ -f "$script_path" ]; then
        log_success "Script trouv√©: $script_name"
        return 0
    else
        log_error "Script manquant: $script_name ($script_path)"
        return 1
    fi
}

# Fonction pour ex√©cuter un script de test
run_test_script() {
    local script_path="$1"
    local script_name="$2"
    local start_time end_time duration
    
    echo ""
    log_header "========================================"
    log_header "üöÄ EX√âCUTION: $script_name"
    log_header "========================================"
    
    start_time=$(date +%s)
    
    if [ -f "$script_path" ]; then
        chmod +x "$script_path"
        if bash "$script_path"; then
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            log_success "$script_name termin√© avec succ√®s (${duration}s)"
            return 0
        else
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            log_error "$script_name a √©chou√© (${duration}s)"
            return 1
        fi
    else
        log_error "Script non trouv√©: $script_path"
        return 1
    fi
}

# Fonction pour v√©rifier la disponibilit√© du serveur
check_server() {
    log_info "V√©rification de la disponibilit√© du serveur..."
    
    # Test de base
    if curl -s "$API_BASE/health" >/dev/null 2>&1; then
        log_success "Serveur accessible sur $API_BASE"
    elif curl -s "$API_BASE" >/dev/null 2>&1; then
        log_success "Serveur accessible sur $API_BASE (pas de /health)"
    else
        log_error "Serveur non accessible sur $API_BASE"
        log_warning "D√©marrez le serveur avec: npm run dev"
        return 1
    fi
    
    # Test sp√©cifique API payments
    if curl -s "$API_BASE/api/payments/stats" >/dev/null 2>&1; then
        log_success "API payments accessible"
    else
        log_warning "API payments non accessible - certains tests pourraient √©chouer"
    fi
    
    return 0
}

# Menu interactif
show_menu() {
    echo ""
    log_header "========================================"
    log_header "üß™ TESTS CURL - MODULE PAIEMENTS LEGACY"
    log_header "========================================"
    echo ""
    echo "Choisissez les tests √† ex√©cuter:"
    echo ""
    echo "1) üîß Tests fonctionnels complets"
    echo "2) üîí Tests de s√©curit√©"
    echo "3) ‚ö° Tests de performance"
    echo "4) üé¨ Tests de sc√©narios m√©tier"
    echo "5) üöÄ TOUS LES TESTS (recommand√©)"
    echo "6) ‚ùì Informations syst√®me"
    echo "0) üö™ Quitter"
    echo ""
    echo -n "Votre choix [0-6]: "
}

# Informations syst√®me
show_system_info() {
    log_header "========================================"
    log_header "üìã INFORMATIONS SYST√àME"
    log_header "========================================"
    
    echo "üåê URL de base: $API_BASE"
    echo "üìÅ R√©pertoire: $(pwd)"
    echo "‚è∞ Date: $(date)"
    echo "üë§ Utilisateur: $(whoami)"
    echo "üíª OS: $(uname -s)"
    
    echo ""
    log_info "üì¶ Scripts de test disponibles:"
    check_script "test-payments-complete.sh" "Tests fonctionnels"
    check_script "test-payments-security.sh" "Tests de s√©curit√©"
    check_script "test-payments-performance.sh" "Tests de performance"
    check_script "test-payments-scenarios.sh" "Tests de sc√©narios"
    
    echo ""
    log_info "üîß Outils syst√®me:"
    
    # V√©rifier curl
    if command -v curl &> /dev/null; then
        curl_version=$(curl --version | head -n1)
        log_success "curl: $curl_version"
    else
        log_error "curl non install√©"
    fi
    
    # V√©rifier jq
    if command -v jq &> /dev/null; then
        jq_version=$(jq --version)
        log_success "jq: $jq_version"
    else
        log_warning "jq non install√© (optionnel pour le formatage JSON)"
    fi
    
    # V√©rifier bc
    if command -v bc &> /dev/null; then
        log_success "bc: install√© (pour calculs de performance)"
    else
        log_warning "bc non install√© (optionnel pour calculs avanc√©s)"
    fi
    
    echo ""
    check_server
}

# Ex√©cution de tous les tests
run_all_tests() {
    local total_start_time total_end_time total_duration
    local tests_passed=0 tests_failed=0
    
    total_start_time=$(date +%s)
    
    log_header "üöÄ EX√âCUTION DE TOUS LES TESTS"
    log_info "Cela peut prendre plusieurs minutes..."
    
    # V√©rifier le serveur avant de commencer
    if ! check_server; then
        log_error "Serveur non accessible - arr√™t des tests"
        return 1
    fi
    
    # Tests fonctionnels
    if run_test_script "test-payments-complete.sh" "Tests fonctionnels"; then
        ((tests_passed++))
    else
        ((tests_failed++))
    fi
    
    # Pause entre les tests
    log_info "Pause de 3 secondes..."
    sleep 3
    
    # Tests de s√©curit√©
    if run_test_script "test-payments-security.sh" "Tests de s√©curit√©"; then
        ((tests_passed++))
    else
        ((tests_failed++))
    fi
    
    # Pause entre les tests
    log_info "Pause de 3 secondes..."
    sleep 3
    
    # Tests de performance
    if run_test_script "test-payments-performance.sh" "Tests de performance"; then
        ((tests_passed++))
    else
        ((tests_failed++))
    fi
    
    # Pause entre les tests
    log_info "Pause de 3 secondes..."
    sleep 3
    
    # Tests de sc√©narios
    if run_test_script "test-payments-scenarios.sh" "Tests de sc√©narios m√©tier"; then
        ((tests_passed++))
    else
        ((tests_failed++))
    fi
    
    total_end_time=$(date +%s)
    total_duration=$((total_end_time - total_start_time))
    
    # Rapport final
    echo ""
    log_header "========================================"
    log_header "üìä RAPPORT FINAL DES TESTS"
    log_header "========================================"
    
    echo "‚è±Ô∏è  Dur√©e totale: ${total_duration} secondes"
    echo "‚úÖ Tests r√©ussis: $tests_passed"
    echo "‚ùå Tests √©chou√©s: $tests_failed"
    echo "üìä Total: $((tests_passed + tests_failed)) suites de tests"
    
    if [ $tests_failed -eq 0 ]; then
        echo ""
        log_success "üéâ TOUS LES TESTS ONT R√âUSSI !"
        log_info "Le module de paiements est enti√®rement fonctionnel"
    else
        echo ""
        log_error "‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â"
        log_warning "V√©rifiez les logs ci-dessus pour les d√©tails"
    fi
    
    echo ""
    log_info "üíæ Les donn√©es de test sont persist√©es dans PostgreSQL"
    log_info "üîç V√©rifiez l'interface admin: $API_BASE/admin/payment"
    log_header "========================================"
}

# Boucle principale
main() {
    # V√©rifier qu'on est dans le bon r√©pertoire
    if [ ! -f "package.json" ]; then
        log_error "Ex√©cutez ce script depuis le r√©pertoire nestjs-remix-monorepo"
        exit 1
    fi
    
    while true; do
        show_menu
        read -r choice
        
        case $choice in
            1)
                check_server && run_test_script "test-payments-complete.sh" "Tests fonctionnels"
                ;;
            2)
                check_server && run_test_script "test-payments-security.sh" "Tests de s√©curit√©"
                ;;
            3)
                check_server && run_test_script "test-payments-performance.sh" "Tests de performance"
                ;;
            4)
                check_server && run_test_script "test-payments-scenarios.sh" "Tests de sc√©narios m√©tier"
                ;;
            5)
                run_all_tests
                ;;
            6)
                show_system_info
                ;;
            0)
                echo ""
                log_success "Au revoir ! üëã"
                exit 0
                ;;
            *)
                log_warning "Choix invalide. Veuillez choisir entre 0 et 6."
                ;;
        esac
        
        echo ""
        echo -n "Appuyez sur Entr√©e pour continuer..."
        read -r
    done
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    if ! command -v curl &> /dev/null; then
        log_error "curl n'est pas install√©"
        echo "Installation sur Ubuntu/Debian: sudo apt-get install curl"
        echo "Installation sur macOS: brew install curl"
        exit 1
    fi
    
    log_success "curl est install√©"
    
    # Cr√©er les scripts s'ils n'existent pas
    if [ ! -f "test-payments-complete.sh" ] || [ ! -f "test-payments-security.sh" ] || 
       [ ! -f "test-payments-performance.sh" ] || [ ! -f "test-payments-scenarios.sh" ]; then
        log_warning "Certains scripts de test sont manquants"
        log_info "Assurez-vous que tous les scripts sont pr√©sents dans le r√©pertoire"
    fi
}

# Point d'entr√©e
echo ""
log_header "üß™ LANCEUR DE TESTS - MODULE PAIEMENTS LEGACY"
log_info "Initialisation..."

check_prerequisites
main
