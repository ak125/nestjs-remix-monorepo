name: üöÄ Deploy
on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

permissions:
  actions: write
  contents: read

jobs:
  lint:
    name: ‚¨£ ESLint
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: true

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build Application
        run: npm run build

      - name: üî¨ Lint
        run: npm run lint

  typecheck:
    name:  ¶ TypeScript
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: true

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build Application
        run: npm run build

      - name: üîé Type check
        run: npm run typecheck --if-present

  # Retrait de la section `uses` pour `build` (pr√©c√©demment probl√©matique)
  build:
    name: üê≥ Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Exemple d'√©tape de construction Docker
      - name: Build and push Docker image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build -t your-image-name .
          docker push your-image-name

  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [build, lint, typecheck]
    if: ${{ (github.ref == 'refs/heads/main') && github.event_name == 'push' }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: true
    steps:
      - name: Cache node modules
        uses: actions/cache@v4.0.0
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4.1.1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üöÄ Run Docker Compose on Production
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          docker pull massdoc/nestjs-remix-monorepo:production
          docker compose -f docker-compose.prod.yml up -d
          docker system prune --all --volumes --force

