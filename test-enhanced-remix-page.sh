#!/bin/bash

echo "üß™ TEST DE LA PAGE REMIX ENHANCED VEHICLE CATALOG"
echo "================================================="
echo ""

BASE_URL="http://localhost:3001"  # Port frontend Remix par d√©faut

echo "ÔøΩ 1. V√âRIFICATION DU SERVEUR FRONTEND"
echo "======================================"

# Test si le serveur frontend r√©pond
if curl -s "$BASE_URL" > /dev/null 2>&1; then
    echo "‚úÖ Frontend accessible sur $BASE_URL"
else
    echo "‚ùå Frontend non accessible sur $BASE_URL"
    echo "   D√©marrez le frontend avec: cd frontend && npm run dev"
    exit 1
fi

echo ""
echo "ÔøΩ 2. TESTS DE LA ROUTE ENHANCED VEHICLE CATALOG"
echo "==============================================="

# Test URLs avec diff√©rents formats
URLS=(
    "$BASE_URL/enhanced-vehicle-catalog/peugeot/308/1-6-hdi"
    "$BASE_URL/enhanced-vehicle-catalog/alfa-romeo/giulia/2-9"
    "$BASE_URL/enhanced-vehicle-catalog/renault/clio/1-5-dci"
    "$BASE_URL/enhanced-vehicle-catalog/volkswagen/golf/2-0-tdi"
)

for url in "${URLS[@]}"; do
    echo ""
    echo "üìã Test URL: $url"
    
    # Test de l'accessibilit√©
    status=$(curl -s -o /dev/null -w "%{http_code}" "$url")
    
    if [ "$status" = "200" ]; then
        echo "   ‚úÖ Status: $status"
        
        # Test du contenu
        content=$(curl -s "$url")
        
        # V√©rifier que c'est du HTML valide
        if echo "$content" | grep -q "<!DOCTYPE html>"; then
            echo "   ‚úÖ HTML valide retourn√©"
        else
            echo "   ‚ö†Ô∏è  Contenu non-HTML retourn√©"
        fi
        
        # V√©rifier les composants
        if echo "$content" | grep -q "VehicleHeader\|vehicle-header"; then
            echo "   ‚úÖ Composant VehicleHeader d√©tect√©"
        else
            echo "   ‚ö†Ô∏è  VehicleHeader non d√©tect√©"
        fi
        
        # V√©rifier les m√©tadonn√©es
        if echo "$content" | grep -q "<title>.*Pi√®ces"; then
            echo "   ‚úÖ Titre SEO pr√©sent"
        else
            echo "   ‚ö†Ô∏è  Titre SEO non d√©tect√©"
        fi
        
    elif [ "$status" = "404" ]; then
        echo "   ‚ùå Status: $status (Page non trouv√©e)"
    elif [ "$status" = "500" ]; then
        echo "   ‚ùå Status: $status (Erreur serveur)"
    else
        echo "   ‚ö†Ô∏è  Status: $status"
    fi
    
    # Test du temps de r√©ponse
    response_time=$(curl -s -o /dev/null -w "%{time_total}" "$url")
    echo "   ‚è±Ô∏è  Temps de r√©ponse: ${response_time}s"
done

echo ""
echo "ÔøΩ 3. TEST DES COMPOSANTS VIA DEVTOOLS"
echo "====================================="

# Test JavaScript c√¥t√© client
test_js_url="$BASE_URL/enhanced-vehicle-catalog/peugeot/308/1-6-hdi"
echo "üìã Test des composants React sur: $test_js_url"

content=$(curl -s "$test_js_url")

# V√©rifier les imports de composants
if echo "$content" | grep -q "VehicleHeader\|VehicleInfo\|VehicleGallery"; then
    echo "   ‚úÖ Composants Vehicle d√©tect√©s dans le HTML"
else
    echo "   ‚ùå Composants Vehicle non d√©tect√©s"
fi

# V√©rifier le JSON-LD Schema
if echo "$content" | grep -q '"@type":"Product"'; then
    echo "   ‚úÖ Schema.org JSON-LD pr√©sent"
else
    echo "   ‚ö†Ô∏è  Schema.org JSON-LD non d√©tect√©"
fi

# V√©rifier les donn√©es du v√©hicule
if echo "$content" | grep -q "Peugeot\|308"; then
    echo "   ‚úÖ Donn√©es du v√©hicule pr√©sentes"
else
    echo "   ‚ùå Donn√©es du v√©hicule manquantes"
fi

echo ""
echo "üìä 4. V√âRIFICATION DES ERREURS CONSOLE"
echo "======================================"

echo "üìã Pour v√©rifier les erreurs JavaScript:"
echo "   1. Ouvrez $test_js_url dans votre navigateur"
echo "   2. Ouvrez les DevTools (F12)"
echo "   3. V√©rifiez l'onglet Console pour les erreurs"
echo "   4. V√©rifiez l'onglet Network pour les requ√™tes √©chou√©es"

echo ""
echo "ÔøΩ 5. TESTS DE PERFORMANCE"
echo "=========================="

# Test de performance simple
echo "üìä Performance de base:"
start_time=$(date +%s%N)
curl -s "$test_js_url" > /dev/null
end_time=$(date +%s%N)
duration=$(( (end_time - start_time) / 1000000 ))
echo "   Page compl√®te: ${duration}ms"

echo ""
echo "‚úÖ R√âSUM√â DES TESTS"
echo "=================="
echo ""
echo "üéØ URLs test√©es:"
for url in "${URLS[@]}"; do
    echo "   - $url"
done
echo ""
echo "üìã V√©rifications effectu√©es:"
echo "   - Accessibilit√© des routes"
echo "   - Validit√© du HTML retourn√©"
echo "   - Pr√©sence des composants Vehicle"
echo "   - M√©tadonn√©es SEO"
echo "   - Schema.org JSON-LD"
echo "   - Performance de base"
echo ""
echo "ÔøΩ Pour des tests plus approfondis:"
echo "   - Lighthouse pour la performance web"
echo "   - React DevTools pour les composants"
echo "   - Network tab pour les requ√™tes API"
echo ""
echo "üîß Si des erreurs persistent:"
echo "   1. V√©rifiez les logs du serveur Remix"
echo "   2. V√©rifiez les imports des composants"
echo "   3. V√©rifiez la syntaxe TypeScript"
echo "   4. Red√©marrez le serveur de d√©veloppement"