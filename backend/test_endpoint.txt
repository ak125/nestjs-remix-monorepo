
@Get('test-approaches')
async testApproaches() {
  try {
    // Test de l'approche jointure application
    const client = this.supabaseIndexationService.getClient();
    
    // 1. Récupérer types avec display=1
    const { data: types } = await client
      .from('auto_type') 
      .select('type_id, type_name, type_modele_id, type_marque_id, type_fuel')
      .eq('type_display', '1')
      .limit(5);
      
    // 2. Récupérer modèles correspondants  
    const modeleIds = types?.map(t => parseInt(t.type_modele_id)).filter(Boolean) || [];
    const { data: modeles } = await client
      .from('auto_modele')
      .select('modele_id, modele_name')
      .in('modele_id', modeleIds);
      
    // 3. Récupérer marques correspondantes
    const marqueIds = types?.map(t => parseInt(t.type_marque_id)).filter(Boolean) || [];
    const { data: marques } = await client  
      .from('auto_marque')
      .select('marque_id, marque_name')
      .in('marque_id', marqueIds);
      
    // 4. Jointure côté application
    const vehiclesWithRelations = types?.map(type => {
      const modele = modeles?.find(m => m.modele_id === parseInt(type.type_modele_id));
      const marque = marques?.find(m => m.marque_id === parseInt(type.type_marque_id));
      return {
        type_id: type.type_id,
        type_name: type.type_name,
        modele_name: modele?.modele_name || 'UNKNOWN',
        marque_name: marque?.marque_name || 'UNKNOWN'
      };
    });
    
    return {
      success: true,
      approach: 'APPLICATION_JOIN',
      data: vehiclesWithRelations
    };
  } catch (error) {
    return {
      success: false, 
      error: error.message
    };
  }
}

