import { Injectable } from '@nestjs/common';
import { PassportSerializer } from '@nestjs/passport';
import { AuthService } from './auth.service';

@Injectable()
export class CookieSerializer extends PassportSerializer {
  // üîß Cache en m√©moire pour √©viter les requ√™tes BDD r√©p√©t√©es
  private userCache = new Map<string, { user: any; timestamp: number }>();
  private readonly CACHE_TTL = 5000; // 5 secondes

  constructor(private readonly authService: AuthService) {
    super();
  }

  /**
   * ‚úÖ DESERIALIZE: R√©cup√©rer l'utilisateur depuis la BDD avec cache
   * Cache de 5 secondes pour √©viter les boucles infinies
   */
  async deserializeUser(userId: string, done: (err: any, user?: any) => void) {
    try {
      // üîç V√©rifier le cache d'abord
      const cached = this.userCache.get(userId);
      const now = Date.now();

      if (cached && now - cached.timestamp < this.CACHE_TTL) {
        // ‚úÖ Cache hit: pas de log pour √©viter le spam
        return done(null, cached.user);
      }

      // ‚ùå Cache miss ou expir√©: requ√™te BDD
      // console.log('üîç Deserializing user ID:', userId);
      const user = await this.authService.getUserById(userId);

      if (!user) {
        console.log('‚ö†Ô∏è  User not found during deserialization:', userId);
        this.userCache.delete(userId); // Nettoyer le cache
        return done(null, false);
      }

      // üíæ Mettre en cache pour 5 secondes
      this.userCache.set(userId, { user, timestamp: now });

      // üßπ Nettoyer les entr√©es expir√©es (toutes les 100 requ√™tes)
      if (Math.random() < 0.01) {
        this.cleanExpiredCache();
      }

      // console.log('‚úÖ User deserialized:', user.email);
      done(null, user);
    } catch (error) {
      console.error('‚ùå Deserialization error:', error);
      done(error, null);
    }
  }

  /**
   * üßπ Nettoyer les entr√©es de cache expir√©es
   */
  private cleanExpiredCache() {
    const now = Date.now();
    for (const [userId, cached] of this.userCache.entries()) {
      if (now - cached.timestamp > this.CACHE_TTL) {
        this.userCache.delete(userId);
      }
    }
  }

  /**
   * ‚úÖ SERIALIZE: Sauvegarder UNIQUEMENT l'ID utilisateur dans la session
   * Pas l'objet complet pour √©viter les donn√©es obsol√®tes
   */
  serializeUser(user: any, done: (err: any, userId?: any) => void) {
    // Si user est undefined, false ou null, ne pas cr√©er de session
    if (!user || user === false || user === null) {
      console.log(
        '‚ö†Ô∏è  User is undefined/false/null, skipping session creation',
      );
      return done(null, false);
    }

    // ‚úÖ Sauvegarder UNIQUEMENT l'ID (pas l'objet complet)
    const userId = user.id || user.cst_id || user.cnfa_id;

    if (!userId) {
      console.log('‚ö†Ô∏è  No user ID found, cannot serialize:', user);
      return done(null, false);
    }

    console.log('‚úÖ Serializing user ID:', userId, 'for email:', user.email);
    done(null, userId); // ‚ö†Ô∏è IMPORTANT: Ne stocker QUE l'ID
  }
}
