/** * Utilitaire pour décoder les entités HTML dans le contenu blog * Nécessaire car les tables legacy __blog_* contiennent des entités HTML encodées */ // Map des entités HTML courantes vers leurs caractèresconst HTML_ENTITIES: Record<string, string> = {  // Entités de base  '&amp;': '&',  '&lt;': '<',  '&gt;': '>',  '&quot;': '"',  '&#39;': "'",  '&apos;': "'",    // Caractères accentués français  '&agrave;': 'à',  '&Agrave;': 'À',  '&acirc;': 'â',  '&Acirc;': 'Â',  '&auml;': 'ä',  '&Auml;': 'Ä',  '&aelig;': 'æ',  '&AElig;': 'Æ',    '&eacute;': 'é',  '&Eacute;': 'É',  '&egrave;': 'è',  '&Egrave;': 'È',  '&ecirc;': 'ê',  '&Ecirc;': 'Ê',  '&euml;': 'ë',  '&Euml;': 'Ë',    '&igrave;': 'ì',  '&Igrave;': 'Ì',  '&icirc;': 'î',  '&Icirc;': 'Î',  '&iuml;': 'ï',  '&Iuml;': 'Ï',    '&ograve;': 'ò',  '&Ograve;': 'Ò',  '&ocirc;': 'ô',  '&Ocirc;': 'Ô',  '&ouml;': 'ö',  '&Ouml;': 'Ö',  '&oelig;': 'œ',  '&OElig;': 'Œ',    '&ugrave;': 'ù',  '&Ugrave;': 'Ù',  '&ucirc;': 'û',  '&Ucirc;': 'Û',  '&uuml;': 'ü',  '&Uuml;': 'Ü',    '&ccedil;': 'ç',  '&Ccedil;': 'Ç',  '&ntilde;': 'ñ',  '&Ntilde;': 'Ñ',    // Espaces et tirets  '&nbsp;': ' ',  '&ndash;': '–',  '&mdash;': '—',  '&shy;': '',    // Symboles  '&euro;': '€',  '&pound;': '£',  '&yen;': '¥',  '&cent;': '¢',  '&copy;': '©',  '&reg;': '®',  '&trade;': '™',  '&deg;': '°',  '&plusmn;': '±',  '&para;': '¶',  '&sect;': '§',  '&micro;': 'µ',    // Ponctuation  '&laquo;': '«',  '&raquo;': '»',  '&ldquo;': '"',  '&rdquo;': '"',  '&lsquo;': ''',  '&rsquo;': ''',  '&hellip;': '…',  '&bull;': '•',  '&middot;': '·',};/** * Décode les entités HTML numériques (&#123; ou &#xAB;) */function decodeNumericEntities(text: string): string {  // Décimales  text = text.replace(/&#(\d+);/g, (match, dec) => {    return String.fromCharCode(parseInt(dec, 10));  });    // Hexadécimales  text = text.replace(/&#x([0-9a-fA-F]+);/g, (match, hex) => {    return String.fromCharCode(parseInt(hex, 16));  });    return text;}/** * Décode toutes les entités HTML dans une chaîne */export function decodeHtmlEntities(text: string | null | undefined): string {  if (!text) return '';    let decoded = text;    // Décoder les entités nommées  Object.entries(HTML_ENTITIES).forEach(([entity, char]) => {    const regex = new RegExp(entity, 'gi');    decoded = decoded.replace(regex, char);  });    // Décoder les entités numériques  decoded = decodeNumericEntities(decoded);    return decoded;}/** * Décode récursivement toutes les chaînes dans un objet */export function decodeObjectHtmlEntities<T>(obj: T): T {  if (typeof obj === 'string') {    return decodeHtmlEntities(obj) as T;  }    if (Array.isArray(obj)) {    return obj.map(item => decodeObjectHtmlEntities(item)) as T;  }    if (obj !== null && typeof obj === 'object') {    const decoded: any = {};    for (const [key, value] of Object.entries(obj)) {      decoded[key] = decodeObjectHtmlEntities(value);    }    return decoded as T;  }    return obj;}
