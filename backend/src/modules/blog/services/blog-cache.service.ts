import { Injectable, Inject, Logger } from '@nestjs/common';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Cache } from 'cache-manager';

/**
 * Service de cache strat√©gique pour le contenu blog
 * Utilise une strat√©gie de cache √† 3 niveaux bas√©e sur la popularit√©
 */
@Injectable()
export class BlogCacheService {
  private readonly logger = new Logger(BlogCacheService.name);
  
  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {}

  /**
   * D√©termine la strat√©gie de cache bas√©e sur le nombre de vues
   */
  private getCacheStrategy(viewsCount: number = 0) {
    if (viewsCount > 1000) {
      return { ttl: 300, prefix: 'blog:hot:' }; // 5 min pour articles tr√®s populaires
    } else if (viewsCount > 100) {
      return { ttl: 1800, prefix: 'blog:warm:' }; // 30 min pour articles moyens
    } else {
      return { ttl: 7200, prefix: 'blog:cold:' }; // 2h pour articles peu consult√©s
    }
  }

  /**
   * R√©cup√®re une valeur du cache avec strat√©gie adapt√©e
   */
  async get<T>(key: string, viewsCount?: number): Promise<T | undefined> {
    const strategy = this.getCacheStrategy(viewsCount);
    const cacheKey = `${strategy.prefix}${key}`;
    
    try {
      const cached = await this.cacheManager.get<T>(cacheKey);
      if (cached) {
        this.logger.debug(`üéØ Cache hit: ${cacheKey}`);
      }
      return cached;
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è Cache get error: ${(error as Error).message}`);
      return undefined;
    }
  }

  /**
   * Stocke une valeur dans le cache avec TTL adapt√©
   */
  async set<T>(key: string, value: T, viewsCount?: number): Promise<void> {
    const strategy = this.getCacheStrategy(viewsCount);
    const cacheKey = `${strategy.prefix}${key}`;
    
    try {
      await this.cacheManager.set(cacheKey, value, strategy.ttl * 1000); // ms
      this.logger.debug(`üíæ Cache set: ${cacheKey} (TTL: ${strategy.ttl}s)`);
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è Cache set error: ${(error as Error).message}`);
    }
  }

  /**
   * Supprime une cl√© du cache dans toutes les strat√©gies
   */
  async del(key: string): Promise<void> {
    const strategies = ['blog:hot:', 'blog:warm:', 'blog:cold:'];
    
    for (const prefix of strategies) {
      try {
        await this.cacheManager.del(`${prefix}${key}`);
      } catch (error) {
        this.logger.warn(`‚ö†Ô∏è Cache del error: ${(error as Error).message}`);
      }
    }
  }

  /**
   * Efface tout le cache blog
   */
  async reset(): Promise<void> {
    try {
      // Note: Cette m√©thode d√©pend de l'impl√©mentation du cache manager
      // Pour Redis, on pourrait utiliser un pattern comme 'blog:*'
      await this.cacheManager.reset();
      this.logger.log('üßπ Cache blog r√©initialis√©');
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è Cache reset error: ${(error as Error).message}`);
    }
  }

  /**
   * Fonction simple de d√©codage des entit√©s HTML les plus courantes
   * Utilis√©e pour nettoyer le contenu des tables legacy __blog_*
   */
  static decodeHtmlEntities(text: string | null | undefined): string {
    if (!text) return '';
    
    return text
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'")
      .replace(/&apos;/g, "'")
      .replace(/&agrave;/g, '√†')
      .replace(/&acirc;/g, '√¢')
      .replace(/&auml;/g, '√§')
      .replace(/&eacute;/g, '√©')
      .replace(/&egrave;/g, '√®')
      .replace(/&ecirc;/g, '√™')
      .replace(/&euml;/g, '√´')
      .replace(/&icirc;/g, '√Æ')
      .replace(/&iuml;/g, '√Ø')
      .replace(/&ocirc;/g, '√¥')
      .replace(/&ouml;/g, '√∂')
      .replace(/&ugrave;/g, '√π')
      .replace(/&ucirc;/g, '√ª')
      .replace(/&uuml;/g, '√º')
      .replace(/&ccedil;/g, '√ß')
      .replace(/&nbsp;/g, ' ')
      .replace(/&rsquo;/g, "'")
      .replace(/&lsquo;/g, "'")
      .replace(/&rdquo;/g, '"')
      .replace(/&ldquo;/g, '"')
      .replace(/&hellip;/g, '‚Ä¶')
      .replace(/&ndash;/g, '‚Äì')
      .replace(/&mdash;/g, '‚Äî');
  }
}
