/**
 * üîÑ CONTR√îLEUR DE MIGRATION URLs PI√àCES
 * 
 * API pour configurer et g√©rer les redirections 301
 * des anciennes URLs de pi√®ces vers la nouvelle architecture
 * 
 * @version 1.0.0
 * @since 2025-09-14
 * @author SEO Migration Team
 */

import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Param, 
  Query,
  Logger,
  HttpException,
  HttpStatus
} from '@nestjs/common';
import { 
  ApiTags, 
  ApiOperation, 
  ApiResponse, 
  ApiParam,
  ApiQuery,
  ApiBody
} from '@nestjs/swagger';
import { VehiclePartUrlMigrationService } from '../services/vehicle-part-url-migration.service';

// Importation du service de redirection existant
// Note: Adapter selon votre architecture exacte
interface RedirectService {
  createRedirect(redirect: {
    old_path: string;
    new_path: string;
    redirect_type: number;
    reason?: string;
  }): Promise<any>;
  
  findRedirect(url: string): Promise<any>;
  createRedirectRule(rule: any): Promise<any>;
}

/**
 * DTO pour la cr√©ation de redirections en lot
 */
interface BulkRedirectRequest {
  brand_slug: string;
  brand_id: number;
  model_slug: string;
  model_id: number;
  type_slug: string;
  type_id: number;
  force_update?: boolean;
}

/**
 * DTO pour la migration d'une URL unique
 */
interface SingleUrlMigrationRequest {
  legacy_url: string;
  test_mode?: boolean;
}

// ====================================
// üéØ CONTR√îLEUR PRINCIPAL
// ====================================

@ApiTags('üîÑ Vehicle Parts URL Migration')
@Controller('api/vehicles/migration')
export class VehiclePartUrlMigrationController {
  private readonly logger = new Logger(VehiclePartUrlMigrationController.name);

  constructor(
    private readonly migrationService: VehiclePartUrlMigrationService,
    // Note: Injecter votre service de redirection selon votre architecture
    // private readonly redirectService: RedirectService
  ) {}

  /**
   * üß™ Teste la migration d'une URL unique
   */
  @Get('test/:legacyUrl')
  @ApiOperation({ 
    summary: 'Teste la migration d\'une URL de pi√®ce',
    description: 'Valide le mapping d\'une ancienne URL vers la nouvelle structure sans cr√©er de redirection'
  })
  @ApiParam({ 
    name: 'legacyUrl', 
    description: 'URL encod√©e √† tester',
    example: 'pieces%2Ffiltre-a-huile-7%2Faudi-22%2Fa7-sportback-22059%2F3-0-tfsi-quattro-34940.html'
  })
  @ApiResponse({ status: 200, description: 'Test de migration r√©ussi' })
  @ApiResponse({ status: 400, description: 'URL invalide ou non mappable' })
  async testUrlMigration(@Param('legacyUrl') encodedUrl: string) {
    try {
      const legacyUrl = decodeURIComponent(encodedUrl);
      this.logger.log(`üß™ Test migration URL: ${legacyUrl}`);

      const result = this.migrationService.migratePartUrl(legacyUrl);
      
      if (!result) {
        throw new HttpException(
          `URL non mappable: ${legacyUrl}`,
          HttpStatus.BAD_REQUEST
        );
      }

      return {
        success: true,
        test_mode: true,
        migration: {
          legacy_url: legacyUrl,
          new_url: result.newUrl,
          redirect_type: 301,
          metadata: result.metadata
        },
        message: 'Migration test√©e avec succ√®s (aucune redirection cr√©√©e)'
      };

    } catch (error) {
      this.logger.error(`Erreur test migration:`, error);
      throw new HttpException(
        'Erreur lors du test de migration',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üìä Obtient les statistiques des mappings disponibles
   */
  @Get('stats')
  @ApiOperation({ 
    summary: 'Statistiques des mappings de cat√©gories',
    description: 'Affiche le nombre de cat√©gories mapp√©es et leurs √©quivalences'
  })
  @ApiResponse({ status: 200, description: 'Statistiques r√©cup√©r√©es' })
  async getMappingStats() {
    try {
      const stats = this.migrationService.getMappingStats();
      
      return {
        success: true,
        statistics: stats,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      this.logger.error(`Erreur r√©cup√©ration stats:`, error);
      throw new HttpException(
        'Erreur lors de la r√©cup√©ration des statistiques',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üîÑ Migre une URL unique et cr√©e la redirection
   */
  @Post('migrate-url')
  @ApiOperation({ 
    summary: 'Migre une URL unique et cr√©e la redirection 301',
    description: 'Analyse une ancienne URL, la mappe vers la nouvelle structure et cr√©e la redirection'
  })
  @ApiBody({ 
    description: 'Donn√©es de migration',
    schema: {
      type: 'object',
      properties: {
        legacy_url: { type: 'string', example: '/pieces/filtre-a-huile-7/audi-22/a7-sportback-22059/3-0-tfsi-quattro-34940.html' },
        test_mode: { type: 'boolean', example: false, description: 'Si true, ne cr√©e pas la redirection' }
      },
      required: ['legacy_url']
    }
  })
  @ApiResponse({ status: 201, description: 'Redirection cr√©√©e avec succ√®s' })
  @ApiResponse({ status: 400, description: 'URL invalide ou non mappable' })
  async migrateSingleUrl(@Body() body: SingleUrlMigrationRequest) {
    try {
      const { legacy_url, test_mode = false } = body;
      this.logger.log(`üîÑ Migration URL: ${legacy_url} (test: ${test_mode})`);

      const result = this.migrationService.migratePartUrl(legacy_url);
      
      if (!result) {
        throw new HttpException(
          `URL non mappable: ${legacy_url}`,
          HttpStatus.BAD_REQUEST
        );
      }

      // En mode test, on ne cr√©e pas la redirection
      if (test_mode) {
        return {
          success: true,
          test_mode: true,
          migration: {
            legacy_url,
            new_url: result.newUrl,
            metadata: result.metadata
          },
          message: 'Migration test√©e (aucune redirection cr√©√©e)'
        };
      }

      // TODO: Cr√©er la redirection avec votre service
      // const redirect = await this.redirectService.createRedirect({
      //   old_path: legacy_url,
      //   new_path: result.newUrl,
      //   redirect_type: 301,
      //   reason: `Migration automatique cat√©gorie pi√®ces: ${result.metadata.legacy_category} ‚Üí ${result.metadata.modern_category}`
      // });

      return {
        success: true,
        test_mode: false,
        migration: {
          legacy_url,
          new_url: result.newUrl,
          redirect_type: 301,
          metadata: result.metadata
        },
        // redirect_id: redirect?.id,
        message: 'Redirection 301 cr√©√©e avec succ√®s'
      };

    } catch (error) {
      this.logger.error(`Erreur migration URL:`, error);
      throw new HttpException(
        'Erreur lors de la migration',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üîÑ Cr√©e toutes les redirections pour un v√©hicule donn√©
   */
  @Post('migrate-vehicle')
  @ApiOperation({ 
    summary: 'Cr√©e toutes les redirections 301 pour un v√©hicule',
    description: 'G√©n√®re automatiquement toutes les redirections de cat√©gories pour un v√©hicule sp√©cifique'
  })
  @ApiBody({ 
    description: 'Informations du v√©hicule',
    schema: {
      type: 'object',
      properties: {
        brand_slug: { type: 'string', example: 'audi' },
        brand_id: { type: 'number', example: 22 },
        model_slug: { type: 'string', example: 'a7-sportback' },
        model_id: { type: 'number', example: 22059 },
        type_slug: { type: 'string', example: '3-0-tfsi-quattro' },
        type_id: { type: 'number', example: 34940 },
        force_update: { type: 'boolean', example: false, description: 'Force la mise √† jour si redirection existe' }
      },
      required: ['brand_slug', 'brand_id', 'model_slug', 'model_id', 'type_slug', 'type_id']
    }
  })
  @ApiResponse({ status: 201, description: 'Redirections cr√©√©es avec succ√®s' })
  async migrateVehicleUrls(@Body() body: BulkRedirectRequest) {
    try {
      const { 
        brand_slug, brand_id, model_slug, model_id, 
        type_slug, type_id, force_update = false 
      } = body;

      this.logger.log(`üöó Migration v√©hicule: ${brand_slug} ${model_slug} ${type_slug}`);

      const redirections = this.migrationService.generateVehicleRedirections(
        brand_slug, brand_id, model_slug, model_id, type_slug, type_id
      );

      const results = {
        success: true,
        vehicle: {
          brand: `${brand_slug}-${brand_id}`,
          model: `${model_slug}-${model_id}`,
          type: `${type_slug}-${type_id}`
        },
        redirections_created: [],
        redirections_skipped: [],
        errors: []
      };

      // TODO: Traiter chaque redirection avec votre service
      for (const redirection of redirections) {
        try {
          // V√©rifier si la redirection existe d√©j√†
          // const existing = await this.redirectService.findRedirect(redirection.source);
          
          // if (existing && !force_update) {
          //   results.redirections_skipped.push({
          //     source: redirection.source,
          //     reason: 'Redirection existante'
          //   });
          //   continue;
          // }

          // Cr√©er la redirection
          // const redirect = await this.redirectService.createRedirect({
          //   old_path: redirection.source,
          //   new_path: redirection.destination,
          //   redirect_type: 301,
          //   reason: `Migration automatique v√©hicule ${brand_slug} ${model_slug} ${type_slug}`
          // });

          results.redirections_created.push({
            source: redirection.source,
            destination: redirection.destination,
            // redirect_id: redirect?.id,
            category: redirection.metadata.category_info.modern_name
          });

        } catch (error) {
          this.logger.error(`Erreur cr√©ation redirection ${redirection.source}:`, error);
          results.errors.push({
            source: redirection.source,
            error: error.message
          });
        }
      }

      this.logger.log(`‚úÖ Migration termin√©e: ${results.redirections_created.length} cr√©√©es, ${results.redirections_skipped.length} ignor√©es, ${results.errors.length} erreurs`);

      return results;

    } catch (error) {
      this.logger.error(`Erreur migration v√©hicule:`, error);
      throw new HttpException(
        'Erreur lors de la migration du v√©hicule',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üß™ Lance les tests des exemples fournis
   */
  @Get('test-examples')
  @ApiOperation({ 
    summary: 'Teste les exemples de migration fournis',
    description: 'Lance les tests sur les URLs d\'exemple pour valider le syst√®me'
  })
  @ApiResponse({ status: 200, description: 'Tests termin√©s' })
  async testMigrationExamples() {
    try {
      this.logger.log(`üß™ Lancement des tests d'exemples...`);
      
      // Le service va logger les r√©sultats
      await this.migrationService.testMigrationExamples();
      
      return {
        success: true,
        message: 'Tests des exemples termin√©s (voir logs)',
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      this.logger.error(`Erreur tests exemples:`, error);
      throw new HttpException(
        'Erreur lors des tests',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üìã G√©n√®re un aper√ßu des redirections pour un v√©hicule
   */
  @Get('preview/:brand/:brandId/:model/:modelId/:type/:typeId')
  @ApiOperation({ 
    summary: 'Aper√ßu des redirections pour un v√©hicule',
    description: 'G√©n√®re la liste des redirections qui seraient cr√©√©es pour un v√©hicule donn√©'
  })
  @ApiParam({ name: 'brand', example: 'audi' })
  @ApiParam({ name: 'brandId', example: '22' })
  @ApiParam({ name: 'model', example: 'a7-sportback' })
  @ApiParam({ name: 'modelId', example: '22059' })
  @ApiParam({ name: 'type', example: '3-0-tfsi-quattro' })
  @ApiParam({ name: 'typeId', example: '34940' })
  @ApiResponse({ status: 200, description: 'Aper√ßu g√©n√©r√©' })
  async previewVehicleRedirections(
    @Param('brand') brand: string,
    @Param('brandId') brandId: string,
    @Param('model') model: string,
    @Param('modelId') modelId: string,
    @Param('type') type: string,
    @Param('typeId') typeId: string
  ) {
    try {
      const redirections = this.migrationService.generateVehicleRedirections(
        brand, parseInt(brandId), model, parseInt(modelId), type, parseInt(typeId)
      );

      return {
        success: true,
        vehicle: {
          brand: `${brand}-${brandId}`,
          model: `${model}-${modelId}`,
          type: `${type}-${typeId}`
        },
        total_redirections: redirections.length,
        redirections: redirections.map(r => ({
          legacy_url: r.source,
          modern_url: r.destination,
          category: r.metadata.category_info.modern_name,
          seo_keywords: r.metadata.category_info.seo_keywords
        })),
        preview_mode: true,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      this.logger.error(`Erreur aper√ßu redirections:`, error);
      throw new HttpException(
        'Erreur lors de la g√©n√©ration de l\'aper√ßu',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üîß G√©n√®re les r√®gles de redirection pour Caddy
   */
  @Get('generate-caddy-rules')
  @ApiOperation({ 
    summary: 'G√©n√®re les r√®gles de redirection Caddy',
    description: 'Cr√©√© la configuration Caddy pour les redirections 301 des anciennes URLs'
  })
  @ApiQuery({ 
    name: 'category', 
    required: false, 
    description: 'Filtrer par cat√©gorie sp√©cifique (filtres, freinage, etc.)' 
  })
  async generateCaddyRules(@Query('category') category?: string) {
    try {
      this.logger.log(`üîß G√©n√©ration r√®gles Caddy - Cat√©gorie: ${category || 'toutes'}`);
      
      const rules = await this.migrationService.generateCaddyRedirectRules(category);
      
      return {
        success: true,
        server: 'Caddy v2',
        timestamp: new Date().toISOString(),
        filter: category || 'all_categories',
        total_rules: rules.length,
        rules: rules,
        caddy_config: rules.join('\n'),
        deployment_instructions: [
          '1. Copiez les r√®gles dans votre Caddyfile',
          '2. Placez-les dans le bloc de votre domaine',
          '3. Testez avec: caddy validate --config Caddyfile',
          '4. Rechargez avec: caddy reload --config Caddyfile',
          '5. V√©rifiez les logs: tail -f /var/log/caddy/access.log'
        ],
        example_usage: {
          test_url: 'curl -I "https://your-domain.com/pieces/filtre-a-huile-7/audi-22/a7-sportback-22059/3-0-tfsi-quattro-34940.html"',
          expected_response: 'HTTP/2 301\nlocation: /pieces/audi-22/a7-sportback-22059/type-34940/filtres'
        }
      };

    } catch (error) {
      this.logger.error(`Erreur g√©n√©ration r√®gles Caddy:`, error);
      throw new HttpException(
        'Erreur lors de la g√©n√©ration des r√®gles Caddy',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }
}