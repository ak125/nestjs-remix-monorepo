/**
 * üìù BLOG METADATA SERVICE
 * 
 * Service g√©n√©rique pour r√©cup√©rer les m√©tadonn√©es SEO
 * depuis la table __blog_meta_tags_ariane de Supabase
 * 
 * Utilisable par toutes les pages du blog
 */

import { Injectable, Logger, Inject } from '@nestjs/common';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Cache } from 'cache-manager';
import { SupabaseClient } from '@supabase/supabase-js';

export interface BlogMetadata {
  title: string;
  description: string;
  keywords: string;
  h1: string;
  ariane: string;
  content: string | null;
  relfollow: string;
}

@Injectable()
export class BlogMetadataService {
  private readonly logger = new Logger(BlogMetadataService.name);
  private client: SupabaseClient;

  constructor(
    @Inject(CACHE_MANAGER) private cacheManager: Cache,
    @Inject('SUPABASE_CLIENT') supabaseClient: SupabaseClient,
  ) {
    this.client = supabaseClient;
  }

  /**
   * R√©cup√©rer les m√©tadonn√©es d'une page par son alias
   * @param alias - Cl√© unique de la page (ex: 'constructeurs', 'advice', 'article')
   * @returns M√©tadonn√©es SEO format√©es
   */
  async getMetadata(alias: string): Promise<BlogMetadata> {
    try {
      this.logger.log(`üîç R√©cup√©ration m√©tadonn√©es pour alias="${alias}"`);

      // 1Ô∏è‚É£ V√©rifier le cache Redis
      const cacheKey = `blog-meta:${alias}`;
      const cached = await this.cacheManager.get<BlogMetadata>(cacheKey);
      
      if (cached) {
        this.logger.log(`‚úÖ M√©tadonn√©es depuis cache pour "${alias}"`);
        return cached;
      }

      // 2Ô∏è‚É£ Requ√™te Supabase
      const { data, error } = await this.client
        .from('__blog_meta_tags_ariane')
        .select('*')
        .eq('mta_alias', alias)
        .single();

      // 3Ô∏è‚É£ Fallback si aucune donn√©e trouv√©e
      if (error || !data) {
        this.logger.warn(
          `‚ö†Ô∏è Aucune m√©tadonn√©e trouv√©e pour "${alias}":`,
          error?.message || 'Pas de donn√©es',
        );
        
        return this.getDefaultMetadata(alias);
      }

      this.logger.log(`‚úÖ M√©tadonn√©es r√©cup√©r√©es pour "${alias}"`);

      // 4Ô∏è‚É£ Formater et normaliser les donn√©es
      const metadata: BlogMetadata = {
        title: data.mta_title || 'Automecanik - Pi√®ces Auto',
        description: data.mta_descrip || '',
        keywords: data.mta_keywords || '',
        h1: data.mta_h1 || data.mta_title || '',
        ariane: data.mta_ariane || '',
        content: data.mta_content || null,
        relfollow: this.normalizeRelFollow(data.mta_relfollow),
      };

      // 5Ô∏è‚É£ Mise en cache (1 heure)
      await this.cacheManager.set(cacheKey, metadata, 3600);

      return metadata;
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur getMetadata pour "${alias}":`,
        error instanceof Error ? error.message : error,
      );
      
      return this.getDefaultMetadata(alias);
    }
  }

  /**
   * R√©cup√©rer toutes les m√©tadonn√©es disponibles
   * Utile pour g√©n√©rer des sitemaps ou des listes de pages
   */
  async getAllMetadata(): Promise<BlogMetadata[]> {
    try {
      this.logger.log('üîç R√©cup√©ration de toutes les m√©tadonn√©es');

      // V√©rifier le cache
      const cacheKey = 'blog-meta:all';
      const cached = await this.cacheManager.get<BlogMetadata[]>(cacheKey);
      
      if (cached) {
        this.logger.log(`‚úÖ ${cached.length} m√©tadonn√©es depuis cache`);
        return cached;
      }

      // Requ√™te Supabase
      const { data, error } = await this.client
        .from('__blog_meta_tags_ariane')
        .select('*')
        .order('mta_alias', { ascending: true });

      if (error || !data) {
        this.logger.warn('‚ö†Ô∏è Erreur r√©cup√©ration toutes m√©tadonn√©es:', error);
        return [];
      }

      this.logger.log(`‚úÖ ${data.length} m√©tadonn√©es r√©cup√©r√©es`);

      // Formater toutes les m√©tadonn√©es
      const allMetadata = data.map((item) => ({
        title: item.mta_title || 'Automecanik',
        description: item.mta_descrip || '',
        keywords: item.mta_keywords || '',
        h1: item.mta_h1 || item.mta_title || '',
        ariane: item.mta_ariane || '',
        content: item.mta_content || null,
        relfollow: this.normalizeRelFollow(item.mta_relfollow),
      }));

      // Cache 1 heure
      await this.cacheManager.set(cacheKey, allMetadata, 3600);

      return allMetadata;
    } catch (error) {
      this.logger.error('‚ùå Erreur getAllMetadata:', error);
      return [];
    }
  }

  /**
   * R√©cup√©rer la liste des alias disponibles
   */
  async getAvailableAliases(): Promise<string[]> {
    try {
      const cacheKey = 'blog-meta:aliases';
      const cached = await this.cacheManager.get<string[]>(cacheKey);
      
      if (cached) {
        return cached;
      }

      const { data, error } = await this.client
        .from('__blog_meta_tags_ariane')
        .select('mta_alias')
        .order('mta_alias', { ascending: true });

      if (error || !data) {
        this.logger.warn('‚ö†Ô∏è Erreur r√©cup√©ration aliases:', error);
        return [];
      }

      const aliases = data.map((item) => item.mta_alias);
      
      await this.cacheManager.set(cacheKey, aliases, 3600);
      
      return aliases;
    } catch (error) {
      this.logger.error('‚ùå Erreur getAvailableAliases:', error);
      return [];
    }
  }

  /**
   * Invalider le cache d'un alias sp√©cifique
   */
  async invalidateCache(alias: string): Promise<void> {
    const cacheKey = `blog-meta:${alias}`;
    await this.cacheManager.del(cacheKey);
    this.logger.log(`üóëÔ∏è Cache invalid√© pour "${alias}"`);
  }

  /**
   * Invalider tout le cache des m√©tadonn√©es
   */
  async invalidateAllCache(): Promise<void> {
    // R√©cup√©rer tous les alias pour invalider leurs caches
    const aliases = await this.getAvailableAliases();
    
    for (const alias of aliases) {
      await this.invalidateCache(alias);
    }
    
    // Invalider le cache global
    await this.cacheManager.del('blog-meta:all');
    await this.cacheManager.del('blog-meta:aliases');
    
    this.logger.log('üóëÔ∏è Tout le cache des m√©tadonn√©es invalid√©');
  }

  /**
   * Normaliser la valeur de mta_relfollow
   * G√®re les formats: "1", "0", "index, follow", "noindex, nofollow"
   */
  private normalizeRelFollow(value: string | null | undefined): string {
    if (!value) {
      return 'index, follow';
    }

    // Format num√©rique (legacy)
    if (value === '1') {
      return 'index, follow';
    }
    
    if (value === '0') {
      return 'noindex, nofollow';
    }

    // Format texte standard
    if (value === 'index, follow' || value === 'index,follow') {
      return 'index, follow';
    }

    if (value === 'noindex, nofollow' || value === 'noindex,nofollow') {
      return 'noindex, nofollow';
    }

    // Par d√©faut, on indexe
    return 'index, follow';
  }

  /**
   * M√©tadonn√©es par d√©faut selon l'alias
   */
  private getDefaultMetadata(alias: string): BlogMetadata {
    const defaults: Record<string, BlogMetadata> = {
      home: {
        title: 'Automecanik - Pi√®ces d√©tach√©es automobiles',
        description: 'D√©couvrez notre catalogue complet de pi√®ces auto.',
        keywords: 'pi√®ces auto, accessoires, automecanik',
        h1: 'Bienvenue sur Automecanik',
        ariane: 'Accueil',
        content: null,
        relfollow: 'index, follow',
      },
      constructeurs: {
        title: 'Catalogue Technique Auto - Toutes les marques',
        description: 'Pi√®ces d√©tach√©es pour toutes les marques automobiles.',
        keywords: 'constructeurs, marques auto, catalogue',
        h1: 'Catalogue des Constructeurs Automobiles',
        ariane: 'Accueil > Constructeurs',
        content: null,
        relfollow: 'index, follow',
      },
      advice: {
        title: 'Conseils & Guides Auto | Automecanik',
        description: 'Tous nos conseils pour l\'entretien de votre v√©hicule.',
        keywords: 'conseils auto, guides, entretien',
        h1: 'Conseils & Guides',
        ariane: 'Accueil > Conseils',
        content: null,
        relfollow: 'index, follow',
      },
      article: {
        title: 'Article | Automecanik',
        description: 'Article du blog Automecanik',
        keywords: 'article, blog, auto',
        h1: 'Article',
        ariane: 'Accueil > Blog > Article',
        content: null,
        relfollow: 'index, follow',
      },
      guide: {
        title: 'Guides Techniques | Automecanik',
        description: 'Guides techniques pour la r√©paration automobile',
        keywords: 'guides, techniques, r√©paration',
        h1: 'Guides Techniques',
        ariane: 'Accueil > Guides',
        content: null,
        relfollow: 'index, follow',
      },
    };

    return (
      defaults[alias] || {
        title: 'Automecanik - Pi√®ces Auto',
        description: 'Pi√®ces d√©tach√©es automobiles de qualit√©',
        keywords: 'pi√®ces auto',
        h1: 'Automecanik',
        ariane: 'Accueil',
        content: null,
        relfollow: 'index, follow',
      }
    );
  }
}
