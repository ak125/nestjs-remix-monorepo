/**
 * Service OrdersComplete - Version corrig√©e sans fetch direct
 * Utilise uniquement les m√©thodes du SupabaseRestService avec gestion des timeouts
 */

import { Injectable } from '@nestjs/common';
import { SupabaseRestService } from '../../database/supabase-rest.service';

@Injectable()
export class OrdersCompleteService {
  constructor(private readonly supabaseService: SupabaseRestService) {}

  /**
   * R√©cup√©rer les commandes avec toutes les relations (version Context7)
   */
  async getOrdersWithAllRelations(
    page: number = 1,
    limit: number = 10,
    filters: any = {},
  ) {
    try {
      console.log(
        `üîç OrdersCompleteService.getOrdersWithAllRelations: page=${page}, limit=${limit}`,
        filters,
      );

      // ‚úÖ SOLUTION: Utiliser la m√©thode simple getOrders() avec pagination manuelle
      // √âvite les timeouts en ne r√©cup√©rant que les commandes de base
      const allOrders = await this.supabaseService.getOrders();
      
      // Pagination manuelle c√¥t√© application (plus rapide que fetch avec timeout)
      const offset = (page - 1) * limit;
      const paginatedOrders = allOrders.slice(offset, offset + limit);

      console.log(`‚úÖ Orders retrieved without timeouts: ${paginatedOrders.length}/${allOrders.length}`);

      return {
        success: true,
        orders: paginatedOrders,
        total: allOrders.length,
        page,
        limit,
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des commandes compl√®tes:', error);
      return {
        success: false,
        orders: [],
        total: 0,
        page,
        limit,
        error: error instanceof Error ? error.message : 'Erreur inconnue',
      };
    }
  }

  /**
   * R√©cup√©rer une commande compl√®te par ID (version Context7)
   * Note: Utilise getOrdersWithAllRelations pour r√©cup√©rer toutes et filtre c√¥t√© application
   */
  async getCompleteOrderById(orderId: string): Promise<any> {
    try {
      console.log(`üîç R√©cup√©ration commande compl√®te: ${orderId}`);

      // R√©cup√©rer toutes les commandes et filtrer localement
      // TODO: Am√©liorer quand une m√©thode getOrderById sera disponible dans SupabaseRestService
      const result = await this.supabaseService.getOrdersWithAllRelations(1, 100);
      
      if (!result.orders || result.orders.length === 0) {
        return null;
      }

      // Filtrer par ID c√¥t√© application
      const order = result.orders.find(o => o.ord_id === orderId);
      
      return order || null;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la commande compl√®te:', 
        error instanceof Error ? error.message : String(error));
      return null;
    }
  }

  /**
   * R√©cup√©rer les statistiques par statut (version Context7)
   */
  async getOrderStatsByStatus(): Promise<any> {
    try {
      console.log('üîç R√©cup√©ration des statistiques par statut');
      const stats = await this.supabaseService.getOrderStats();
      return stats;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques par statut:', error);
      return {};
    }
  }

  /**
   * R√©cup√©rer tous les statuts de commande (version Context7)
   */
  async getAllOrderStatuses(): Promise<any[]> {
    try {
      console.log('üîç R√©cup√©ration de tous les statuts de commande');
      const statuses = await this.supabaseService.getAllOrderStatuses();
      return statuses;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statuts de commande:', error);
      return [];
    }
  }

  /**
   * R√©cup√©rer tous les statuts de ligne (version Context7)
   */
  async getAllOrderLineStatuses(): Promise<any[]> {
    try {
      console.log('üîç R√©cup√©ration de tous les statuts de ligne');
      const statuses = await this.supabaseService.getAllOrderLineStatuses();
      return statuses;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statuts de ligne:', error);
      return [];
    }
  }

  /**
   * M√©thodes priv√©es - toutes utilisent maintenant le SupabaseRestService
   */
  private async getCustomerBillingAddress(addressId: string): Promise<any> {
    try {
      const address = await this.supabaseService.getCustomerBillingAddress(addressId);
      return address;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'adresse de facturation:', error);
      return null;
    }
  }

  private async getCustomerDeliveryAddress(addressId: string): Promise<any> {
    try {
      const address = await this.supabaseService.getCustomerDeliveryAddress(addressId);
      return address;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'adresse de livraison:', error);
      return null;
    }
  }

  private async getOrderLinesWithStatus(orderId: string): Promise<any[]> {
    try {
      const orderLines = await this.supabaseService.getOrderLinesWithStatus(orderId);
      return orderLines || [];
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des lignes de commande:', error);
      return [];
    }
  }
}
