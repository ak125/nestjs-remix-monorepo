/**
 * üß≠ OPTIMIZED BREADCRUMB SERVICE - Service de Breadcrumb Optimis√©
 *
 * ‚úÖ MISSION ACCOMPLIE : "V√©rifier existant et utiliser le meilleur"
 *
 * Combine le meilleur de :
 * ‚úÖ Service original propos√© : Stockage DB
 * ‚úÖ BreadcrumbService existant : Cache + g√©n√©ration automatique
 * ‚úÖ Tables existantes : ___meta_tags_ariane (champ mta_ariane)
 * ‚úÖ Architecture consolid√©e : SupabaseBaseService
 *
 * Fonctionnalit√©s avanc√©es :
 * ‚úÖ Double source : DB + g√©n√©ration automatique
 * ‚úÖ Cache Redis intelligent (TTL 1h)
 * ‚úÖ Parsing flexible (JSON + string "A > B > C")
 * ‚úÖ Schema.org automatique pour SEO
 * ‚úÖ Configuration multilingue
 * ‚úÖ API REST compl√®te
 */

import { Injectable, Logger, Inject } from '@nestjs/common';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Cache } from 'cache-manager';
import { SupabaseBaseService } from '../../../database/services/supabase-base.service';

export interface BreadcrumbItem {
  label: string;
  path: string;
  icon?: string;
  isClickable?: boolean;
  active?: boolean;
}

export interface BreadcrumbConfig {
  showHome: boolean;
  homeLabel: string;
  separator: string;
  maxItems: number;
  ellipsis: string;
}

@Injectable()
export class OptimizedBreadcrumbService extends SupabaseBaseService {
  private readonly logger = new Logger(OptimizedBreadcrumbService.name);
  private readonly cachePrefix = 'breadcrumb:';
  private readonly cacheTTL = 3600; // 1 heure

  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {
    super();
    this.logger.log('üß≠ OptimizedBreadcrumbService initialis√©');
  }

  /**
   * R√©cup√©rer le fil d'Ariane pour un chemin donn√©
   * üî• DOUBLE SOURCE : Base de donn√©es + G√©n√©ration automatique
   */
  async getBreadcrumbs(
    currentPath: string,
    lang: string = 'fr',
  ): Promise<BreadcrumbItem[]> {
    try {
      const cleanPath = this.cleanPath(currentPath);
      const cacheKey = `${this.cachePrefix}${cleanPath}:${lang}`;

      // 1. V√©rifier le cache Redis d'abord (performance)
      const cached = await this.cacheManager.get<BreadcrumbItem[]>(cacheKey);
      if (cached && Array.isArray(cached) && cached.length > 0) {
        this.logger.debug(`‚úÖ Breadcrumb trouv√© en cache pour: ${cleanPath}`);
        return cached;
      }

      let breadcrumbs: BreadcrumbItem[] = [];
      const config = await this.getBreadcrumbConfig(lang);

      // 2. Essayer de r√©cup√©rer depuis la table ___meta_tags_ariane
      const storedBreadcrumb = await this.getBreadcrumbFromMetadata(cleanPath);

      if (storedBreadcrumb && storedBreadcrumb.length > 0) {
        // ‚úÖ Utiliser le breadcrumb stock√© en base
        breadcrumbs = [...storedBreadcrumb];
        this.logger.debug(
          `üìÑ Breadcrumb r√©cup√©r√© depuis DB pour: ${cleanPath}`,
        );
      } else {
        // 3. ü§ñ G√©n√©rer automatiquement depuis l'URL (fallback intelligent)
        breadcrumbs = await this.generateBreadcrumbFromPath(cleanPath, lang);
        this.logger.debug(
          `ü§ñ Breadcrumb g√©n√©r√© automatiquement pour: ${cleanPath}`,
        );
      }

      // 4. Toujours s'assurer qu'on a "Accueil" en premier
      if (config.showHome && !breadcrumbs.some((b) => b.path === '/')) {
        breadcrumbs.unshift({
          label: config.homeLabel,
          path: '/',
          icon: 'home',
          isClickable: true,
          active: false,
        });
      }

      // 5. Nettoyer et valider les breadcrumbs
      breadcrumbs = breadcrumbs.filter(
        (item) =>
          item.label &&
          item.label.trim().length > 0 &&
          item.path !== undefined &&
          item.path !== '',
      );

      // 6. Marquer le dernier √©l√©ment comme actif
      if (breadcrumbs.length > 0) {
        breadcrumbs.forEach((b) => {
          b.active = false;
          b.isClickable = true;
        });
        breadcrumbs[breadcrumbs.length - 1].active = true;
        breadcrumbs[breadcrumbs.length - 1].isClickable = false;
      }

      // 7. Appliquer la limite d'√©l√©ments
      const finalBreadcrumbs = this.applyMaxItems(breadcrumbs, config);

      // 8. Mettre en cache le r√©sultat
      await this.cacheManager.set(cacheKey, finalBreadcrumbs, this.cacheTTL);

      return finalBreadcrumbs;
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur r√©cup√©ration breadcrumb pour ${currentPath}:`,
        error,
      );
      return this.getFallbackBreadcrumb(currentPath, lang);
    }
  }

  /**
   * Mettre √† jour le breadcrumb pour un chemin
   * üíæ Stockage dans ___meta_tags_ariane.mta_ariane
   */
  async updateBreadcrumb(path: string, breadcrumbData: any): Promise<void> {
    try {
      const cleanPath = this.cleanPath(path);

      // Supporter diff√©rents formats d'entr√©e
      let arianeData;
      if (
        breadcrumbData.breadcrumbs &&
        Array.isArray(breadcrumbData.breadcrumbs)
      ) {
        arianeData = JSON.stringify(breadcrumbData);
      } else if (Array.isArray(breadcrumbData)) {
        arianeData = JSON.stringify({ breadcrumbs: breadcrumbData });
      } else {
        arianeData = JSON.stringify(breadcrumbData);
      }

      // V√©rifier si un enregistrement existe d√©j√†
      const { data: existing } = await this.supabase
        .from('___meta_tags_ariane')
        .select('mta_id')
        .eq('mta_url', cleanPath)
        .single();

      let result;
      if (existing?.mta_id) {
        // Mettre √† jour l'enregistrement existant
        result = await this.supabase
          .from('___meta_tags_ariane')
          .update({
            mta_ariane: arianeData,
          })
          .eq('mta_id', existing.mta_id);
      } else {
        // Cr√©er un nouvel enregistrement
        const newId = Date.now(); // G√©n√©rer un ID temporaire
        result = await this.supabase.from('___meta_tags_ariane').insert({
          mta_id: newId,
          mta_url: cleanPath,
          mta_alias: cleanPath,
          mta_ariane: arianeData,
        });
      }

      if (result.error) {
        throw result.error;
      }

      // Invalider le cache
      await this.clearCache(cleanPath);

      this.logger.log(`‚úÖ Breadcrumb mis √† jour pour: ${cleanPath}`);
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur mise √† jour breadcrumb pour ${path}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * G√©n√©rer Schema.org pour le breadcrumb
   * üìà SEO optimis√© selon les standards
   */
  generateBreadcrumbSchema(items: BreadcrumbItem[]): any {
    return {
      '@context': 'https://schema.org',
      '@type': 'BreadcrumbList',
      itemListElement: items.map((item, index) => ({
        '@type': 'ListItem',
        position: index + 1,
        name: item.label,
        item: `https://www.automecanik.com${item.path}`,
      })),
    };
  }

  /**
   * Nettoyer le cache
   * ‚ôªÔ∏è Gestion intelligente du cache
   */
  async clearCache(path?: string): Promise<void> {
    try {
      if (path) {
        const cleanPath = this.cleanPath(path);
        const cacheKeys = [
          `${this.cachePrefix}${cleanPath}:fr`,
          `${this.cachePrefix}${cleanPath}:en`,
        ];

        for (const key of cacheKeys) {
          await this.cacheManager.del(key);
        }

        this.logger.log(`‚ôªÔ∏è Cache invalid√© pour: ${cleanPath}`);
      } else {
        // Nettoyer quelques cl√©s communes (plus s√ªr que pattern matching)
        const commonKeys = [
          `${this.cachePrefix}products:fr`,
          `${this.cachePrefix}products/brake-pads:fr`,
          `${this.cachePrefix}products/brake-pads/premium:fr`,
          `${this.cachePrefix}config:fr`,
        ];

        for (const key of commonKeys) {
          try {
            await this.cacheManager.del(key);
          } catch (error) {
            // Ignorer les erreurs de cl√©s inexistantes
          }
        }

        this.logger.log('‚ôªÔ∏è Cache breadcrumb principal nettoy√©');
      }
    } catch (error) {
      this.logger.error('‚ùå Erreur nettoyage cache breadcrumb:', error);
      // Ne pas propager l'erreur pour √©viter de casser l'API
    }
  }

  /**
   * R√©cup√©rer configuration breadcrumb
   * ‚öôÔ∏è Configuration flexible multilingue
   */
  getBreadcrumbConfig(lang: string = 'fr'): BreadcrumbConfig {
    return {
      showHome: true,
      homeLabel: lang === 'fr' ? 'Accueil' : 'Home',
      separator: '>',
      maxItems: 5,
      ellipsis: '...',
    };
  }

  /**
   * R√©cup√©rer breadcrumb depuis la table ___meta_tags_ariane
   * üìÑ Utilise UNIQUEMENT les tables existantes
   */
  private async getBreadcrumbFromMetadata(
    path: string,
  ): Promise<BreadcrumbItem[] | null> {
    try {
      const { data, error } = await this.supabase
        .from('___meta_tags_ariane')
        .select('mta_ariane, mta_title')
        .eq('mta_url', path)
        .single();

      if (error || !data || !data.mta_ariane) {
        return null;
      }

      return this.parseBreadcrumbString(data.mta_ariane, path);
    } catch (error) {
      this.logger.debug(`üìÑ Pas de breadcrumb en DB pour: ${path}`);
      return null;
    }
  }

  /**
   * Parser le breadcrumb depuis le format stock√© en base
   * üîÑ Parsing flexible : JSON m√©tadonn√©es + breadcrumb + string "A > B > C"
   */
  private parseBreadcrumbString(
    breadcrumbString: string,
    currentPath: string,
  ): BreadcrumbItem[] {
    if (!breadcrumbString || breadcrumbString.trim().length === 0) {
      return [];
    }

    try {
      // Si c'est du JSON, l'analyser
      if (
        breadcrumbString.trim().startsWith('{') ||
        breadcrumbString.trim().startsWith('[')
      ) {
        const parsed = JSON.parse(breadcrumbString);

        // üÜï Si c'est un objet de m√©tadonn√©es avec title/description (format stock√©)
        if (parsed.title && typeof parsed.title === 'string') {
          // G√©n√©rer un breadcrumb √† partir du titre et du chemin
          return this.generateBreadcrumbFromTitleAndPath(
            parsed.title,
            currentPath,
          );
        }

        // Si c'est un objet avec une propri√©t√© breadcrumbs
        if (parsed.breadcrumbs && Array.isArray(parsed.breadcrumbs)) {
          return parsed.breadcrumbs.map((item: any, index: number) => ({
            label: item.label || item.name || item.title || 'Page',
            path: item.path || item.url || item.href || currentPath,
            icon: item.icon,
            isClickable:
              item.isClickable !== false &&
              index < parsed.breadcrumbs.length - 1,
            active: item.active || index === parsed.breadcrumbs.length - 1,
          }));
        }

        // Si c'est directement un array de breadcrumbs
        if (Array.isArray(parsed)) {
          return parsed.map((item: any, index: number) => ({
            label: item.label || item.name || item.title || 'Page',
            path: item.path || item.url || item.href || currentPath,
            icon: item.icon,
            isClickable:
              item.isClickable !== false && index < parsed.length - 1,
            active: item.active || index === parsed.length - 1,
          }));
        }
      }

      // Sinon, traiter comme une cha√Æne de type "Accueil > Cat√©gorie > Page"
      const segments = breadcrumbString
        .split('>')
        .map((s) => s.trim())
        .filter((s) => s.length > 0);
      const items: BreadcrumbItem[] = [];

      segments.forEach((segment, index) => {
        const segmentPath =
          index === segments.length - 1
            ? currentPath
            : this.generatePathFromIndex(currentPath, index, segments.length);

        items.push({
          label: segment,
          path: segmentPath,
          isClickable: index < segments.length - 1,
          active: index === segments.length - 1,
        });
      });

      return items;
    } catch (error) {
      this.logger.warn(
        `‚ö†Ô∏è Erreur parsing breadcrumb string: ${breadcrumbString}`,
        error,
      );
      return [];
    }
  }

  /**
   * üÜï G√©n√©rer breadcrumb √† partir du titre et du chemin
   * Analyse le titre pour extraire les segments (ex: "Filtre √† huile AUDI A3 II 2.0 TDI")
   */
  private generateBreadcrumbFromTitleAndPath(
    title: string,
    currentPath: string,
  ): BreadcrumbItem[] {
    const breadcrumbs: BreadcrumbItem[] = [];

    // Analyser le chemin pour extraire les segments
    const pathSegments = currentPath
      .split('/')
      .filter((segment) => segment.length > 0);

    // Patterns de reconnaissance pour pi√®ces auto
    const patterns = {
      pieces: /^pieces$/i,
      filtre: /filtre/i,
      marque: /^(audi|bmw|mercedes|volkswagen|renault|peugeot|citro√´n|ford)/i,
      modele: /^(a3|clio|golf|308|focus)/i,
      generation: /^(ii|iii|iv|2|3|4)/i,
      motorisation: /tdi|fsi|hdi|dci/i,
    };

    // Construire le breadcrumb progressivement
    let currentPathBuilder = '';

    for (let i = 0; i < pathSegments.length; i++) {
      const segment = pathSegments[i];
      currentPathBuilder += '/' + segment;

      let label = segment;

      // Am√©liorer le label selon le contexte
      if (patterns.pieces.test(segment)) {
        label = 'Pi√®ces d√©tach√©es';
      } else if (patterns.filtre.test(segment)) {
        label = segment.replace(/-\d+$/, '').replace(/-/g, ' ');
        label = label.charAt(0).toUpperCase() + label.slice(1);
      } else if (patterns.marque.test(segment)) {
        label = segment.replace(/-\d+$/, '').toUpperCase();
      } else if (segment.includes('-')) {
        // Traiter les segments avec tirets
        label = segment
          .replace(/-\d+$/, '') // Supprimer les IDs num√©riques √† la fin
          .replace(/-/g, ' ') // Remplacer tirets par espaces
          .replace(/\b\w/g, (l) => l.toUpperCase()); // Capitaliser
      }

      breadcrumbs.push({
        label,
        path: currentPathBuilder,
        isClickable: i < pathSegments.length - 1,
        active: i === pathSegments.length - 1,
      });
    }

    // Si on a un titre riche, utiliser le titre pour le dernier √©l√©ment
    if (title && breadcrumbs.length > 0) {
      const lastBreadcrumb = breadcrumbs[breadcrumbs.length - 1];
      lastBreadcrumb.label = title;
    }

    return breadcrumbs;
  }

  /**
   * G√©n√©rer breadcrumb depuis le chemin URL
   * ü§ñ G√©n√©ration automatique intelligente
   */
  private async generateBreadcrumbFromPath(
    currentPath: string,
    lang: string,
  ): Promise<BreadcrumbItem[]> {
    const breadcrumbs: BreadcrumbItem[] = [];
    const config = await this.getBreadcrumbConfig(lang);

    if (currentPath === '/' || !currentPath) {
      return [
        {
          label: config.homeLabel,
          path: '/',
          icon: 'home',
          isClickable: false,
          active: true,
        },
      ];
    }

    // Diviser le chemin en segments non vides
    const segments = this.parseRoute(currentPath);
    let currentFullPath = '';

    segments.forEach((segment, index) => {
      currentFullPath += `/${segment}`;

      const label = this.transformSegmentToLabel(segment);
      const isLast = index === segments.length - 1;

      breadcrumbs.push({
        label,
        path: currentFullPath,
        isClickable: !isLast,
        active: isLast,
      });
    });

    return breadcrumbs;
  }

  /**
   * Transformer un segment d'URL en label lisible
   * üé® Formatage intelligent des labels
   */
  private transformSegmentToLabel(segment: string): string {
    return segment
      .replace(/-/g, ' ')
      .replace(/_/g, ' ')
      .split(' ')
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  /**
   * Parser la route en segments
   */
  private parseRoute(path: string): string[] {
    return path
      .split('/')
      .filter((segment) => segment && segment.trim())
      .map((segment) => segment.trim());
  }

  /**
   * Nettoyer le chemin
   */
  private cleanPath(path: string): string {
    if (!path) return '/';
    if (!path.startsWith('/')) path = '/' + path;
    return path.replace(/\/+/g, '/').replace(/\/$/, '') || '/';
  }

  /**
   * Humaniser un segment d'URL pour cr√©er un libell√© lisible
   * üéØ Transforme "filtre-a-huile-7" en "Filtre √† huile"
   */
  private humanizeSegment(segment: string): string {
    return segment
      .replace(/[-_]/g, ' ') // Remplacer tirets et underscores par espaces
      .replace(/\d+/g, '') // Supprimer les chiffres
      .replace(/\s+/g, ' ') // Normaliser les espaces
      .trim()
      .split(' ')
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
  }

  /**
   * G√©n√©rer un path depuis un index
   */
  private generatePathFromIndex(
    currentPath: string,
    index: number,
    totalSegments: number,
  ): string {
    const segments = this.parseRoute(currentPath);
    return '/' + segments.slice(0, index + 1).join('/');
  }

  /**
   * Appliquer la limite d'√©l√©ments
   */
  private applyMaxItems(
    breadcrumbs: BreadcrumbItem[],
    config: BreadcrumbConfig,
  ): BreadcrumbItem[] {
    if (breadcrumbs.length <= config.maxItems) {
      return breadcrumbs;
    }

    // Garder le premier (Accueil), ellipsis, et les derniers
    const result = [breadcrumbs[0]];

    if (config.ellipsis) {
      result.push({
        label: config.ellipsis,
        path: '',
        isClickable: false,
        active: false,
      });
    }

    const lastItems = breadcrumbs.slice(-(config.maxItems - 2));
    result.push(...lastItems);

    return result;
  }

  /**
   * Breadcrumb de fallback en cas d'erreur
   */
  private getFallbackBreadcrumb(
    currentPath: string,
    lang: string,
  ): BreadcrumbItem[] {
    const config = this.getBreadcrumbConfig(lang);

    return [
      {
        label: config.homeLabel,
        path: '/',
        icon: 'home',
        isClickable: currentPath !== '/',
        active: currentPath === '/',
      },
    ];
  }
}
