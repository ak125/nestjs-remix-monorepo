/**
 * üìÑ OPTIMIZED METADATA SERVICE - Service de M√©tadonn√©es Optimis√©
 *
 * ‚úÖ MISSION ACCOMPLIE : "V√©rifier existant et utiliser le meilleur"
 *
 * Utilise exclusivement les tables existantes :
 * ‚úÖ Table ___meta_tags_ariane (structure confirm√©e)
 * ‚úÖ Colonnes : mta_id, mta_alias, mta_title, mta_descrip, mta_keywords,
 *              mta_h1, mta_content, mta_ariane, mta_relfollow
 *
 * Fonctionnalit√©s professionnelles :
 * ‚úÖ Cache Redis intelligent
 * ‚úÖ M√©tadonn√©es compl√®tes (titre, description, keywords, h1)
 * ‚úÖ Architecture SupabaseBaseService
 * ‚úÖ API REST int√©gr√©e
 * ‚úÖ Gestion erreurs robuste
 */

import { Injectable, Logger, Inject } from '@nestjs/common';
import { CACHE_MANAGER } from '@nestjs/cache-manager';
import { Cache } from 'cache-manager';
import { SupabaseBaseService } from '../../../database/services/supabase-base.service';

export interface PageMetadata {
  title: string;
  description: string;
  keywords?: string[];
  h1?: string;
  breadcrumb?: string;
  robots?: string;
  content?: string;
}

export interface MetadataUpdateData {
  title?: string;
  description?: string;
  keywords?: string[];
  h1?: string;
  breadcrumb?: string;
  robots?: string;
  content?: string;
}

@Injectable()
export class OptimizedMetadataService extends SupabaseBaseService {
  private readonly logger = new Logger(OptimizedMetadataService.name);
  private readonly cachePrefix = 'metadata:';
  private readonly cacheTTL = 3600; // 1 heure

  constructor(@Inject(CACHE_MANAGER) private cacheManager: Cache) {
    super();
    this.logger.log('üìÑ OptimizedMetadataService initialis√©');
  }

  /**
   * R√©cup√©rer les m√©tadonn√©es d'une page
   * üìÑ Utilise table ___meta_tags_ariane existante
   */
  async getPageMetadata(path: string): Promise<PageMetadata> {
    try {
      const cleanPath = this.cleanPath(path);
      const cacheKey = `${this.cachePrefix}${cleanPath}`;

      // V√©rifier le cache Redis
      const cached = await this.cacheManager.get<PageMetadata>(cacheKey);
      if (cached) {
        this.logger.debug(
          `‚úÖ M√©tadonn√©es trouv√©es en cache pour: ${cleanPath}`,
        );
        return cached;
      }

      // R√©cup√©rer depuis la table ___meta_tags_ariane
      const { data, error } = await this.supabase
        .from('___meta_tags_ariane')
        .select('*')
        .eq('mta_alias', cleanPath)
        .single();

      let metadata: PageMetadata;

      if (error || !data) {
        // M√©tadonn√©es par d√©faut si pas trouv√©
        metadata = this.getDefaultMetadata(cleanPath);
        this.logger.debug(`üîÑ M√©tadonn√©es par d√©faut pour: ${cleanPath}`);
      } else {
        // Construire les m√©tadonn√©es depuis la table
        metadata = {
          title: data.mta_title || this.generateDefaultTitle(cleanPath),
          description:
            data.mta_descrip || this.generateDefaultDescription(cleanPath),
          keywords: data.mta_keywords
            ? data.mta_keywords
                .split(',')
                .map((k) => k.trim())
                .filter((k) => k)
            : [],
          h1:
            data.mta_h1 ||
            data.mta_title ||
            this.generateDefaultTitle(cleanPath),
          breadcrumb: data.mta_ariane || '',
          robots: data.mta_relfollow || 'index,follow',
          content: data.mta_content || '',
        };
        this.logger.debug(
          `üìÑ M√©tadonn√©es r√©cup√©r√©es depuis DB pour: ${cleanPath}`,
        );
      }

      // Mettre en cache le r√©sultat
      await this.cacheManager.set(cacheKey, metadata, this.cacheTTL);

      return metadata;
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur r√©cup√©ration m√©tadonn√©es pour ${path}:`,
        error,
      );
      return this.getDefaultMetadata(path);
    }
  }

  /**
   * Mettre √† jour les m√©tadonn√©es d'une page
   * üíæ Stockage dans ___meta_tags_ariane
   */
  async updatePageMetadata(
    path: string,
    updateData: MetadataUpdateData,
  ): Promise<PageMetadata> {
    try {
      const cleanPath = this.cleanPath(path);

      // Pr√©parer les donn√©es pour la table ___meta_tags_ariane
      const dbData: any = {
        mta_alias: cleanPath,
      };

      if (updateData.title !== undefined) dbData.mta_title = updateData.title;
      if (updateData.description !== undefined)
        dbData.mta_descrip = updateData.description;
      if (updateData.keywords !== undefined)
        dbData.mta_keywords = Array.isArray(updateData.keywords)
          ? updateData.keywords.join(', ')
          : updateData.keywords;
      if (updateData.h1 !== undefined) dbData.mta_h1 = updateData.h1;
      if (updateData.breadcrumb !== undefined)
        dbData.mta_ariane = updateData.breadcrumb;
      if (updateData.robots !== undefined)
        dbData.mta_relfollow = updateData.robots;
      if (updateData.content !== undefined)
        dbData.mta_content = updateData.content;

      // Upsert dans la table
      const { error } = await this.supabase
        .from('___meta_tags_ariane')
        .upsert(dbData);

      if (error) {
        throw error;
      }

      // Invalider le cache
      await this.clearCache(cleanPath);

      this.logger.log(`‚úÖ M√©tadonn√©es mises √† jour pour: ${cleanPath}`);

      // Retourner les m√©tadonn√©es mises √† jour
      return await this.getPageMetadata(cleanPath);
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur mise √† jour m√©tadonn√©es pour ${path}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * Supprimer les m√©tadonn√©es d'une page
   */
  async deletePageMetadata(path: string): Promise<void> {
    try {
      const cleanPath = this.cleanPath(path);

      const { error } = await this.supabase
        .from('___meta_tags_ariane')
        .delete()
        .eq('mta_alias', cleanPath);

      if (error) {
        throw error;
      }

      // Invalider le cache
      await this.clearCache(cleanPath);

      this.logger.log(`üóëÔ∏è M√©tadonn√©es supprim√©es pour: ${cleanPath}`);
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur suppression m√©tadonn√©es pour ${path}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * G√©n√©rer un sitemap bas√© sur les m√©tadonn√©es
   */
  async generateSitemap(): Promise<string[]> {
    try {
      const { data, error } = await this.supabase
        .from('___meta_tags_ariane')
        .select('mta_alias')
        .not('mta_alias', 'is', null);

      if (error) {
        throw error;
      }

      return data?.map((item) => item.mta_alias).filter((alias) => alias) || [];
    } catch (error) {
      this.logger.error('‚ùå Erreur g√©n√©ration sitemap:', error);
      return [];
    }
  }

  /**
   * Nettoyer le cache m√©tadonn√©es
   */
  async clearCache(path?: string): Promise<void> {
    try {
      if (path) {
        const cleanPath = this.cleanPath(path);
        const cacheKey = `${this.cachePrefix}${cleanPath}`;
        await this.cacheManager.del(cacheKey);
        this.logger.log(`‚ôªÔ∏è Cache m√©tadonn√©es invalid√© pour: ${cleanPath}`);
      } else {
        // Nettoyer quelques cl√©s communes
        const commonKeys = [
          `${this.cachePrefix}/`,
          `${this.cachePrefix}/products`,
          `${this.cachePrefix}/products/brake-pads`,
        ];

        for (const key of commonKeys) {
          try {
            await this.cacheManager.del(key);
          } catch (error) {
            // Ignorer les erreurs de cl√©s inexistantes
          }
        }

        this.logger.log('‚ôªÔ∏è Cache m√©tadonn√©es principal nettoy√©');
      }
    } catch (error) {
      this.logger.error('‚ùå Erreur nettoyage cache m√©tadonn√©es:', error);
    }
  }

  /**
   * M√©tadonn√©es par d√©faut
   */
  private getDefaultMetadata(path: string): PageMetadata {
    const title = this.generateDefaultTitle(path);
    const description = this.generateDefaultDescription(path);

    return {
      title,
      description,
      keywords: [
        'pieces detachees',
        'pieces auto',
        'pieces voiture',
        'pieces automobile',
      ],
      h1: title,
      robots: 'index,follow',
      content: '',
    };
  }

  /**
   * G√©n√©rer un titre par d√©faut bas√© sur le chemin
   */
  private generateDefaultTitle(path: string): string {
    if (path === '/') {
      return 'Vente pi√®ces d√©tach√©es auto neuves & √† prix pas cher';
    }

    const segments = path
      .split('/')
      .filter((s) => s)
      .map((segment) =>
        segment
          .replace(/-/g, ' ')
          .replace(/_/g, ' ')
          .split(' ')
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join(' '),
      );

    if (segments.length > 0) {
      return `${segments[segments.length - 1]} - Pi√®ces d√©tach√©es auto`;
    }

    return 'Pi√®ces d√©tach√©es automobile - Automecanik';
  }

  /**
   * G√©n√©rer une description par d√©faut bas√©e sur le chemin
   */
  private generateDefaultDescription(path: string): string {
    if (path === '/') {
      return "Votre catalogue de pi√®ces d√©tach√©es automobile neuves et d'origine pour toutes les marques & mod√®les de voitures";
    }

    const segments = path
      .split('/')
      .filter((s) => s)
      .map((segment) => segment.replace(/-/g, ' ').replace(/_/g, ' '));

    if (segments.length > 0) {
      const lastSegment = segments[segments.length - 1];
      return `D√©couvrez notre s√©lection de ${lastSegment} - Pi√®ces d√©tach√©es automobile de qualit√© au meilleur prix`;
    }

    return 'Pi√®ces d√©tach√©es automobile de qualit√© - Livraison rapide et prix comp√©titifs';
  }

  /**
   * R√©cup√©rer toutes les m√©tadonn√©es (pour interface admin)
   * üìã Liste compl√®te avec pagination possible
   */
  async getAllMetadata(): Promise<
    Array<PageMetadata & { id: string; url: string }>
  > {
    try {
      const { data, error } = await this.supabase
        .from('___meta_tags_ariane')
        .select('*')
        .order('mta_id', { ascending: false });

      if (error) {
        throw error;
      }

      return (data || []).map((item: any) => ({
        id: item.mta_id?.toString() || item.mta_url,
        url: item.mta_url || item.mta_alias || '',
        title: item.mta_title || 'Sans titre',
        description: item.mta_descrip || '',
        keywords: this.parseKeywords(item.mta_keywords),
        h1: item.mta_h1 || '',
        breadcrumb: item.mta_ariane || '',
        robots: item.mta_relfollow || 'index,follow',
        content: item.mta_content || '',
      }));
    } catch (error) {
      this.logger.error('‚ùå Erreur r√©cup√©ration toutes m√©tadonn√©es:', error);
      return [];
    }
  }

  /**
   * Supprimer les m√©tadonn√©es d'un chemin
   * üóëÔ∏è Suppression avec invalidation cache
   */
  async deleteMetadata(path: string): Promise<void> {
    try {
      const cleanPath = this.cleanPath(path);

      const { error } = await this.supabase
        .from('___meta_tags_ariane')
        .delete()
        .eq('mta_url', cleanPath);

      if (error) {
        throw error;
      }

      // Invalider le cache
      await this.clearCache(cleanPath);

      this.logger.log(`‚úÖ M√©tadonn√©es supprim√©es pour: ${cleanPath}`);
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur suppression m√©tadonn√©es pour ${path}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * V√©rifier si des m√©tadonn√©es existent pour un chemin
   * üîç Contr√¥le d'existence rapide
   */
  async metadataExists(path: string): Promise<boolean> {
    try {
      const cleanPath = this.cleanPath(path);

      const { data, error } = await this.supabase
        .from('___meta_tags_ariane')
        .select('mta_id')
        .eq('mta_url', cleanPath)
        .single();

      return !error && !!data;
    } catch {
      return false;
    }
  }

  /**
   * Compter le nombre total de m√©tadonn√©es
   * üìä Statistiques rapides
   */
  async countMetadata(): Promise<number> {
    try {
      const { count, error } = await this.supabase
        .from('___meta_tags_ariane')
        .select('*', { count: 'exact', head: true });

      if (error) {
        throw error;
      }

      return count || 0;
    } catch (error) {
      this.logger.error('‚ùå Erreur comptage m√©tadonn√©es:', error);
      return 0;
    }
  }

  /**
   * Parser les keywords depuis la base de donn√©es
   * üè∑Ô∏è Support format cha√Æne et JSON
   */
  private parseKeywords(keywords: any): string[] {
    if (!keywords) return [];

    if (Array.isArray(keywords)) {
      return keywords;
    }

    if (typeof keywords === 'string') {
      try {
        // Essayer de parser comme JSON
        const parsed = JSON.parse(keywords);
        if (Array.isArray(parsed)) {
          return parsed;
        }
      } catch {
        // Si ce n'est pas du JSON, s√©parer par virgules
        return keywords
          .split(',')
          .map((k) => k.trim())
          .filter((k) => k.length > 0);
      }
    }

    return [];
  }

  /**
   * Nettoyer le chemin
   */
  private cleanPath(path: string): string {
    if (!path) return '/';
    if (!path.startsWith('/')) path = '/' + path;
    return path.replace(/\/+/g, '/').replace(/\/$/, '') || '/';
  }
}
