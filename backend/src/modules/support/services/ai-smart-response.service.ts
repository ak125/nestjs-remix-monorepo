import { Injectable, Logger } from '@nestjs/common';
import { ContactTicket, ContactFormData } from './contact.service';
import { ReviewData } from './review.service';
import { SentimentAnalysis, SmartCategorization } from './ai-analysis.service';

export interface SmartResponse {
  response: string;
  confidence: number;
  tone: 'formal' | 'friendly' | 'apologetic' | 'professional';
  requiresHuman: boolean;
  suggestedActions?: string[];
  estimatedResolutionTime?: number; // minutes
}

export interface EscalationPrediction {
  riskLevel: number; // 0-100
  escalationProbability: number;
  suggestedActions: string[];
  timeToEscalation?: number; // minutes
  priority: 'low' | 'medium' | 'high' | 'critical';
  reasoning: string;
}

export interface WorkflowOptimization {
  recommendedAgent?: string;
  estimatedResolutionTime: number;
  priority: number; // 1-10
  suggestedNextSteps: string[];
  automationOpportunities: string[];
}

@Injectable()
export class AISmartResponseService {
  private readonly logger = new Logger(AISmartResponseService.name);

  /**
   * G√©n√®re une r√©ponse intelligente pour un ticket
   */
  async generateTicketResponse(
    ticket: ContactTicket | ContactFormData,
    sentiment?: SentimentAnalysis,
    categorization?: SmartCategorization,
  ): Promise<SmartResponse> {
    try {
      const messageText = this.extractMessage(ticket);
      const category = categorization?.category || ticket.category || 'general';
      const urgency = sentiment?.urgency || 'medium';

      const responseTemplate = this.getResponseTemplate(category, urgency);
      const tone = this.determineTone(sentiment, urgency);
      const response = this.personalizeResponse(responseTemplate, ticket, tone);

      const confidence = this.calculateConfidence(
        category,
        urgency,
        messageText,
      );
      const requiresHuman = this.shouldRequireHuman(
        urgency,
        confidence,
        category,
      );
      const suggestedActions = this.getSuggestedActions(category, urgency);
      const estimatedTime = this.estimateResolutionTime(category, urgency);

      return {
        response,
        confidence,
        tone,
        requiresHuman,
        suggestedActions,
        estimatedResolutionTime: estimatedTime,
      };
    } catch (error) {
      this.logger.error(`Erreur g√©n√©ration r√©ponse: ${error.message}`);
      return this.getFallbackResponse();
    }
  }

  /**
   * G√©n√®re une r√©ponse publique pour un avis
   */
  async generateReviewResponse(
    review: ReviewData,
    sentiment?: SentimentAnalysis,
  ): Promise<SmartResponse> {
    try {
      const rating = review.rating;
      const isPositive = rating >= 4;
      const isNegative = rating <= 2;

      let template: string;
      let tone: 'formal' | 'friendly' | 'apologetic' | 'professional';

      if (isPositive) {
        template = this.getPositiveReviewTemplate();
        tone = 'friendly';
      } else if (isNegative) {
        template = this.getNegativeReviewTemplate();
        tone = 'apologetic';
      } else {
        template = this.getNeutralReviewTemplate();
        tone = 'professional';
      }

      const response = this.personalizeReviewResponse(template, review);
      const shouldPublish = this.shouldPublishResponse(rating, sentiment);

      return {
        response,
        confidence: 0.8,
        tone,
        requiresHuman: rating <= 2, // Avis tr√®s n√©gatifs n√©cessitent validation humaine
        suggestedActions: this.getReviewActions(rating),
      };
    } catch (error) {
      this.logger.error(`Erreur r√©ponse avis: ${error.message}`);
      return {
        response:
          'Merci pour votre avis. Nous prenons en compte vos commentaires.',
        confidence: 0.5,
        tone: 'professional',
        requiresHuman: true,
      };
    }
  }

  // ==================== TEMPLATES DE R√âPONSES ====================

  private getResponseTemplate(category: string, urgency: string): string {
    const templates = {
      technical: {
        low: `Bonjour,

Merci pour votre message concernant le probl√®me technique rencontr√©.

Notre √©quipe technique va analyser votre demande et vous proposer une solution dans les plus brefs d√©lais. En attendant, vous pouvez consulter notre FAQ qui contient les solutions aux probl√®mes les plus courants.

Nous reviendrons vers vous sous 24h avec une r√©ponse d√©taill√©e.

Cordialement,
L'√©quipe support technique`,

        medium: `Bonjour,

Nous avons bien re√ßu votre demande d'assistance technique et comprenons l'importance de r√©soudre ce probl√®me rapidement.

Un technicien sp√©cialis√© va prendre en charge votre dossier et vous contactera dans les 4 heures qui suivent pour vous proposer une solution adapt√©e.

En cas d'urgence, n'h√©sitez pas √† nous contacter directement par t√©l√©phone.

Bien √† vous,
L'√©quipe support`,

        high: `Bonjour,

Votre demande a √©t√© class√©e en priorit√© haute. Nous comprenons l'impact que ce probl√®me technique peut avoir sur votre activit√©.

Un ing√©nieur expert va imm√©diatement prendre en charge votre dossier. Vous devriez recevoir une premi√®re r√©ponse dans l'heure qui suit.

Merci de votre patience.

L'√©quipe technique d'urgence`,

        critical: `Bonjour,

Votre demande a √©t√© escalad√©e en urgence critique. Notre √©quipe d'intervention prioritaire a √©t√© imm√©diatement notifi√©e.

Un responsable technique va vous contacter dans les 30 minutes pour d√©buter la r√©solution de ce probl√®me critique.

Nous mettons tout en ≈ìuvre pour r√©soudre cette situation rapidement.

L'√©quipe d'intervention d'urgence`,
      },

      billing: {
        low: `Bonjour,

Merci pour votre demande concernant la facturation.

Notre service comptabilit√© va examiner votre dossier et vous fournir les informations demand√©es sous 48h ouvr√©es.

Si vous avez des questions urgentes concernant un paiement, n'h√©sitez pas √† nous le signaler.

Cordialement,
Le service facturation`,

        medium: `Bonjour,

Nous avons bien re√ßu votre demande relative √† votre facturation.

Notre √©quipe comptable va traiter votre dossier en priorit√© et vous r√©pondre sous 24h ouvr√©es avec toutes les informations n√©cessaires.

Merci de votre confiance.

Le service clients`,

        high: `Bonjour,

Votre demande de facturation a √©t√© class√©e prioritaire.

Un responsable du service comptable va examiner votre dossier imm√©diatement et vous contacter sous 4h pour r√©soudre cette situation.

Nous nous excusons pour tout d√©sagr√©ment.

Le responsable facturation`,

        critical: `Bonjour,

Nous traitons votre demande de facturation en urgence absolue.

Un responsable senior va vous contacter dans l'heure qui suit pour r√©gler cette situation de mani√®re d√©finitive.

Nous nous excusons sinc√®rement pour cette situation.

La direction du service clients`,
      },

      complaint: {
        low: `Bonjour,

Nous avons pris connaissance de votre r√©clamation et la prenons tr√®s au s√©rieux.

Un responsable du service clients va analyser votre situation et vous proposer une solution satisfaisante sous 48h.

Nous nous excusons pour les d√©sagr√©ments occasionn√©s.

Cordialement,
Le service clients`,

        medium: `Bonjour,

Merci d'avoir pris le temps de nous faire part de votre m√©contentement. Votre satisfaction est notre priorit√©.

Un manager du service clients va personnellement s'occuper de votre dossier et vous contacter sous 24h pour trouver une solution appropri√©e.

Nous nous engageons √† rectifier cette situation.

L'√©quipe relation clients`,

        high: `Bonjour,

Nous avons re√ßu votre r√©clamation et nous en excusons sinc√®rement.

Un responsable senior va imm√©diatement prendre en charge votre dossier et vous contacter sous 4h avec une proposition de r√©solution concr√®te.

Votre satisfaction est notre priorit√© absolue.

Le responsable relation clients`,

        critical: `Bonjour,

Nous prenons votre r√©clamation tr√®s au s√©rieux et nous excusons profond√©ment pour cette situation inacceptable.

La direction va personnellement intervenir et vous contacter dans l'heure qui suit pour r√©soudre cette situation et vous proposer une compensation appropri√©e.

Nous ferons tout notre possible pour regagner votre confiance.

La direction`,
      },

      general: {
        low: `Bonjour,

Merci pour votre message. Nous avons bien re√ßu votre demande d'information.

Notre √©quipe va traiter votre demande et vous r√©pondre sous 48h ouvr√©es avec toutes les informations n√©cessaires.

N'h√©sitez pas √† nous recontacter si vous avez d'autres questions.

Cordialement,
L'√©quipe support`,

        medium: `Bonjour,

Nous avons bien re√ßu votre demande et vous en remercions.

Un conseiller va examiner votre question et vous fournir une r√©ponse compl√®te sous 24h.

Merci de votre confiance.

L'√©quipe support`,

        high: `Bonjour,

Votre demande a √©t√© trait√©e en priorit√©.

Un conseiller sp√©cialis√© va vous r√©pondre sous 4h avec toutes les informations demand√©es.

Merci de votre patience.

Le service clients`,

        critical: `Bonjour,

Votre demande urgente a √©t√© imm√©diatement transmise √† notre √©quipe.

Vous recevrez une r√©ponse d√©taill√©e dans l'heure qui suit.

Merci de nous avoir contact√©s.

L'√©quipe d'urgence`,
      },
    };

    const categoryTemplates = templates[category] || templates.general;
    return categoryTemplates[urgency] || categoryTemplates.medium;
  }

  private getPositiveReviewTemplate(): string {
    return `Bonjour {customerName},

Merci infiniment pour ce merveilleux avis ! üåü

Nous sommes ravis que {productAspect} ait r√©pondu √† vos attentes. Votre satisfaction est notre plus belle r√©compense.

N'h√©sitez pas √† nous recommander √† vos proches, et merci encore pour votre confiance.

Tr√®s cordialement,
L'√©quipe {companyName}`;
  }

  private getNegativeReviewTemplate(): string {
    return `Bonjour {customerName},

Nous vous remercions pour ce retour, m√™me s'il nous attriste profond√©ment.

Nous prenons tr√®s au s√©rieux vos remarques concernant {issueAspect} et allons imm√©diatement investiguer pour comprendre ce qui s'est pass√©.

Un responsable va vous contacter personnellement sous 24h pour trouver une solution et s'assurer que vous soyez pleinement satisfait(e).

Nous vous pr√©sentons nos excuses et nous nous engageons √† faire mieux.

Sinc√®rement,
L'√©quipe {companyName}`;
  }

  private getNeutralReviewTemplate(): string {
    return `Bonjour {customerName},

Merci pour ce retour constructif sur votre exp√©rience.

Nous prenons en compte vos commentaires pour continuer √† am√©liorer nos produits et services.

Si vous avez des suggestions sp√©cifiques, nous serions ravis d'en discuter avec vous.

Cordialement,
L'√©quipe {companyName}`;
  }

  // ==================== M√âTHODES UTILITAIRES ====================

  private determineTone(
    sentiment?: SentimentAnalysis,
    urgency?: string,
  ): 'formal' | 'friendly' | 'apologetic' | 'professional' {
    if (sentiment?.sentiment === 'negative' || urgency === 'critical') {
      return 'apologetic';
    }
    if (sentiment?.sentiment === 'positive') {
      return 'friendly';
    }
    if (urgency === 'high') {
      return 'professional';
    }
    return 'formal';
  }

  private personalizeResponse(
    template: string,
    ticket: ContactTicket | ContactFormData,
    tone: string,
  ): string {
    let response = template;

    // Personnalisation basique
    if ('name' in ticket) {
      response = response.replace(
        '{customerName}',
        ticket.name || 'Cher(e) client(e)',
      );
    }

    response = response.replace('{companyName}', 'notre entreprise');

    return response;
  }

  private personalizeReviewResponse(
    template: string,
    review: ReviewData,
  ): string {
    let response = template;

    response = response.replace(
      '{customerName}',
      review.customer?.cst_name || 'Cher(e) client(e)',
    );
    response = response.replace('{productAspect}', 'notre produit');
    response = response.replace('{issueAspect}', 'les points mentionn√©s');
    response = response.replace('{companyName}', 'notre entreprise');

    return response;
  }

  private calculateConfidence(
    category: string,
    urgency: string,
    messageText: string,
  ): number {
    let confidence = 0.7; // Base confidence

    // Bonus si cat√©gorie bien d√©finie
    if (['technical', 'billing', 'complaint'].includes(category)) {
      confidence += 0.1;
    }

    // Malus si urgence critique (n√©cessite plus d'attention humaine)
    if (urgency === 'critical') {
      confidence -= 0.2;
    }

    // Bonus si message court et simple
    if (messageText.length < 200) {
      confidence += 0.1;
    }

    return Math.max(0.3, Math.min(0.9, confidence));
  }

  private shouldRequireHuman(
    urgency: string,
    confidence: number,
    category: string,
  ): boolean {
    if (urgency === 'critical') return true;
    if (confidence < 0.6) return true;
    if (category === 'complaint' && urgency === 'high') return true;

    return false;
  }

  private getSuggestedActions(category: string, urgency: string): string[] {
    const actions = {
      technical: [
        'V√©rifier les logs',
        'Reproduire le probl√®me',
        'Contacter le support niveau 2',
      ],
      billing: [
        'V√©rifier la facturation',
        'Contr√¥ler les paiements',
        'G√©n√©rer un avoir si n√©cessaire',
      ],
      complaint: [
        'Escalader au manager',
        'Proposer une compensation',
        'Suivre personnellement',
      ],
      general: [
        'Fournir les informations',
        'Orienter vers la bonne √©quipe',
        'Programmer un suivi',
      ],
    };

    const baseActions = actions[category] || actions.general;

    if (urgency === 'critical') {
      return ['URGENCE: Traiter imm√©diatement', ...baseActions];
    }

    return baseActions;
  }

  private estimateResolutionTime(category: string, urgency: string): number {
    const baseTimes = {
      technical: { low: 1440, medium: 480, high: 240, critical: 60 }, // minutes
      billing: { low: 2880, medium: 1440, high: 240, critical: 60 },
      complaint: { low: 2880, medium: 720, high: 240, critical: 30 },
      general: { low: 2880, medium: 1440, high: 480, critical: 120 },
    };

    const categoryTimes = baseTimes[category] || baseTimes.general;
    return categoryTimes[urgency] || categoryTimes.medium;
  }

  private getReviewActions(rating: number): string[] {
    if (rating >= 4) {
      return [
        'Remercier le client',
        'Partager en interne',
        'Utiliser comme t√©moignage',
      ];
    } else if (rating <= 2) {
      return [
        'Contacter le client',
        'Investiguer le probl√®me',
        'Proposer une solution',
      ];
    } else {
      return [
        'Analyser les commentaires',
        'Identifier les am√©liorations possibles',
      ];
    }
  }

  private shouldPublishResponse(
    rating: number,
    sentiment?: SentimentAnalysis,
  ): boolean {
    // Publier automatiquement pour les avis positifs
    if (rating >= 4) return true;

    // Ne pas publier automatiquement pour les avis tr√®s n√©gatifs
    if (rating <= 2) return false;

    // Pour les avis neutres, d√©pend du sentiment
    return sentiment?.sentiment !== 'negative';
  }

  private getFallbackResponse(): SmartResponse {
    return {
      response: `Bonjour,

Merci pour votre message. Nous avons bien re√ßu votre demande et allons la traiter dans les plus brefs d√©lais.

Un membre de notre √©quipe vous recontactera sous 24h pour vous apporter une r√©ponse personnalis√©e.

Merci de votre patience.

Cordialement,
L'√©quipe support`,
      confidence: 0.5,
      tone: 'professional',
      requiresHuman: true,
      suggestedActions: ['Examiner manuellement', 'Contacter le client'],
    };
  }

  private extractMessage(ticket: ContactTicket | ContactFormData): string {
    if ('message' in ticket) return ticket.message;

    try {
      const content = JSON.parse(ticket.msg_content || '{}');
      return content.message || '';
    } catch {
      return ticket.msg_content || '';
    }
  }
}

@Injectable()
export class AIPredictiveService {
  private readonly logger = new Logger(AIPredictiveService.name);

  /**
   * Pr√©dit le risque d'escalation d'un ticket
   */
  async predictEscalation(
    ticket: ContactTicket | ContactFormData,
    sentiment?: SentimentAnalysis,
    categorization?: SmartCategorization,
  ): Promise<EscalationPrediction> {
    try {
      const factors = this.calculateEscalationFactors(
        ticket,
        sentiment,
        categorization,
      );
      const riskLevel = this.calculateRiskLevel(factors);
      const escalationProbability =
        this.calculateEscalationProbability(factors);
      const timeToEscalation = this.estimateTimeToEscalation(factors);
      const priority = this.determinePriority(riskLevel);
      const suggestedActions = this.getEscalationActions(riskLevel, factors);
      const reasoning = this.generateReasoning(factors);

      return {
        riskLevel,
        escalationProbability,
        suggestedActions,
        timeToEscalation,
        priority,
        reasoning,
      };
    } catch (error) {
      this.logger.error(`Erreur pr√©diction escalation: ${error.message}`);
      return {
        riskLevel: 50,
        escalationProbability: 0.3,
        suggestedActions: ['Surveiller de pr√®s'],
        priority: 'medium',
        reasoning: 'Analyse standard par d√©faut',
      };
    }
  }

  /**
   * Optimise l'attribution des tickets
   */
  async optimizeWorkflow(
    ticket: ContactTicket | ContactFormData,
    categorization?: SmartCategorization,
  ): Promise<WorkflowOptimization> {
    try {
      const category = categorization?.category || ticket.category || 'general';
      const urgency = this.extractUrgency(ticket);

      const recommendedAgent = this.getRecommendedAgent(category, urgency);
      const estimatedTime = this.estimateWorkflowTime(category, urgency);
      const priority = this.calculateWorkflowPriority(urgency, category);
      const nextSteps = this.getSuggestedNextSteps(category);
      const automationOps = this.identifyAutomationOpportunities(
        category,
        ticket,
      );

      return {
        recommendedAgent,
        estimatedResolutionTime: estimatedTime,
        priority,
        suggestedNextSteps: nextSteps,
        automationOpportunities: automationOps,
      };
    } catch (error) {
      this.logger.error(`Erreur optimisation workflow: ${error.message}`);
      return {
        estimatedResolutionTime: 1440, // 24h par d√©faut
        priority: 5,
        suggestedNextSteps: ['Analyser la demande', 'Contacter le client'],
        automationOpportunities: [],
      };
    }
  }

  // ==================== M√âTHODES PRIV√âES ====================

  private calculateEscalationFactors(
    ticket: ContactTicket | ContactFormData,
    sentiment?: SentimentAnalysis,
    categorization?: SmartCategorization,
  ) {
    return {
      sentimentScore:
        sentiment?.sentiment === 'negative'
          ? 30
          : sentiment?.sentiment === 'positive'
            ? -10
            : 0,
      urgencyScore: this.getUrgencyScore(
        sentiment?.urgency || this.extractUrgency(ticket),
      ),
      categoryScore: this.getCategoryRiskScore(
        categorization?.category || ticket.category,
      ),
      emotionScore: sentiment?.emotions?.includes('col√®re') ? 25 : 0,
      timeScore: 0, // Pourrait √™tre calcul√© selon l'heure/jour
      customerHistoryScore: 0, // √Ä impl√©menter avec l'historique client
    };
  }

  private calculateRiskLevel(factors: any): number {
    const totalScore = Object.values(factors).reduce(
      (sum: number, score: any) => sum + Number(score),
      0,
    ) as number;
    return Math.max(0, Math.min(100, 50 + totalScore));
  }

  private calculateEscalationProbability(factors: any): number {
    const riskLevel = this.calculateRiskLevel(factors);
    return Math.min(0.9, riskLevel / 100);
  }

  private estimateTimeToEscalation(factors: any): number {
    const riskLevel = this.calculateRiskLevel(factors);

    if (riskLevel >= 80) return 30; // 30 minutes
    if (riskLevel >= 60) return 120; // 2 heures
    if (riskLevel >= 40) return 480; // 8 heures

    return 1440; // 24 heures
  }

  private determinePriority(
    riskLevel: number,
  ): 'low' | 'medium' | 'high' | 'critical' {
    if (riskLevel >= 80) return 'critical';
    if (riskLevel >= 60) return 'high';
    if (riskLevel >= 40) return 'medium';
    return 'low';
  }

  private getEscalationActions(riskLevel: number, factors: any): string[] {
    const actions = [];

    if (riskLevel >= 80) {
      actions.push('Escalader imm√©diatement au manager');
      actions.push('Contacter le client par t√©l√©phone');
    }

    if (riskLevel >= 60) {
      actions.push('Assigner √† un agent senior');
      actions.push("Suivre de pr√®s l'√©volution");
    }

    if (factors.emotionScore > 20) {
      actions.push('R√©ponse empathique requise');
    }

    if (actions.length === 0) {
      actions.push('Traitement standard');
    }

    return actions;
  }

  private generateReasoning(factors: any): string {
    const reasons = [];

    if (factors.sentimentScore > 20) {
      reasons.push('sentiment tr√®s n√©gatif d√©tect√©');
    }

    if (factors.urgencyScore > 15) {
      reasons.push('urgence √©lev√©e');
    }

    if (factors.emotionScore > 20) {
      reasons.push('√©motions fortes exprim√©es');
    }

    return reasons.length > 0
      ? `Risque √©lev√© d√ª √†: ${reasons.join(', ')}`
      : 'Facteurs de risque dans la normale';
  }

  private getUrgencyScore(urgency: string): number {
    const scores = { low: 0, medium: 5, high: 15, critical: 25 };
    return scores[urgency] || 5;
  }

  private getCategoryRiskScore(category?: string): number {
    const scores = {
      complaint: 20,
      billing: 15,
      technical: 10,
      general: 5,
    };
    return scores[category || 'general'] || 5;
  }

  private extractUrgency(ticket: ContactTicket | ContactFormData): string {
    if ('priority' in ticket) return ticket.priority;

    try {
      const content = JSON.parse(ticket.msg_content || '{}');
      return content.priority || 'medium';
    } catch {
      return 'medium';
    }
  }

  private getRecommendedAgent(category: string, urgency: string): string {
    const agentMapping = {
      technical: urgency === 'critical' ? 'senior-tech' : 'tech-support',
      billing: urgency === 'critical' ? 'billing-manager' : 'billing-team',
      complaint:
        urgency === 'high' ? 'customer-relations-senior' : 'customer-relations',
      general: 'general-support',
    };

    return agentMapping[category] || 'general-support';
  }

  private estimateWorkflowTime(category: string, urgency: string): number {
    // En minutes
    const baseTimes = {
      technical: { low: 480, medium: 240, high: 120, critical: 30 },
      billing: { low: 1440, medium: 480, high: 120, critical: 30 },
      complaint: { low: 1440, medium: 240, high: 60, critical: 15 },
      general: { low: 1440, medium: 480, high: 240, critical: 60 },
    };

    const categoryTimes = baseTimes[category] || baseTimes.general;
    return categoryTimes[urgency] || categoryTimes.medium;
  }

  private calculateWorkflowPriority(urgency: string, category: string): number {
    const urgencyPoints = { low: 1, medium: 3, high: 7, critical: 10 };
    const categoryPoints = {
      complaint: 3,
      billing: 2,
      technical: 2,
      general: 1,
    };

    return (urgencyPoints[urgency] || 3) + (categoryPoints[category] || 1);
  }

  private getSuggestedNextSteps(category: string): string[] {
    const steps = {
      technical: [
        'Reproduire le probl√®me',
        'Consulter la base de connaissances',
        'Escalader si n√©cessaire',
      ],
      billing: [
        'V√©rifier les donn√©es de facturation',
        'Contr√¥ler les paiements',
        'Proposer une solution',
      ],
      complaint: [
        '√âcouter activement le client',
        'Investiguer le probl√®me',
        'Proposer une compensation si appropri√©',
      ],
      general: [
        'Analyser la demande',
        'Fournir les informations demand√©es',
        'Programmer un suivi',
      ],
    };

    return steps[category] || steps.general;
  }

  private identifyAutomationOpportunities(
    category: string,
    ticket: ContactTicket | ContactFormData,
  ): string[] {
    const opportunities = [];

    const message = this.extractMessage(ticket);

    if (message.includes('mot de passe') || message.includes('password')) {
      opportunities.push(
        'Lien automatique de r√©initialisation de mot de passe',
      );
    }

    if (message.includes('facture') || message.includes('invoice')) {
      opportunities.push('Envoi automatique de la facture par email');
    }

    if (category === 'general' && message.includes('horaires')) {
      opportunities.push("R√©ponse automatique avec les horaires d'ouverture");
    }

    return opportunities;
  }

  private extractMessage(ticket: ContactTicket | ContactFormData): string {
    if ('message' in ticket) return ticket.message;

    try {
      const content = JSON.parse(ticket.msg_content || '{}');
      return content.message || '';
    } catch {
      return ticket.msg_content || '';
    }
  }
}
