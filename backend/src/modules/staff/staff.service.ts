/**
 * üë• STAFF SERVICE - Service de gestion du personnel administratif
 *
 * ‚úÖ ARCHITECTURE RECOMMAND√âE : Utilise StaffDataService pour l'acc√®s aux donn√©es
 * ‚úÖ Suit les patterns √©tablis dans le projet (s√©paration logique/donn√©es)
 * ‚úÖ Service m√©tier pur (pas d'h√©ritage de SupabaseBaseService)
 */

import {
  Injectable,
  Logger,
  NotFoundException,
  BadRequestException,
} from '@nestjs/common';
import { StaffDataService } from '../../database/services/staff-data.service';

export interface Staff {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  department?: string;
  role: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface CreateStaffDto {
  email: string;
  firstName: string;
  lastName: string;
  department: string;
  role: string;
  isActive?: boolean;
}

export interface UpdateStaffDto {
  firstName?: string;
  lastName?: string;
  department?: string;
  role?: string;
  isActive?: boolean;
}

@Injectable()
export class StaffService {
  private readonly logger = new Logger(StaffService.name);

  constructor(private readonly staffDataService: StaffDataService) {
    this.logger.log('‚úÖ StaffService initialis√© avec architecture recommand√©e');
  }

  /**
   * R√©cup√©rer tous les membres du staff avec pagination et filtres
   */
  async findAll(
    page: number = 1,
    limit: number = 10,
    filters?: {
      department?: string;
      isActive?: boolean;
      search?: string;
    },
  ) {
    try {
      this.logger.log(`üìÑ R√©cup√©ration staff: page=${page}, limit=${limit}`);

      const result = await this.staffDataService.findAll(page, limit, filters);

      this.logger.log(
        `‚úÖ ${result.staff.length}/${result.total} membres du staff r√©cup√©r√©s`,
      );

      return {
        success: true,
        data: {
          staff: result.staff,
          total: result.total,
          page,
          limit,
        },
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur findAll staff:', error);
      throw new BadRequestException(
        'Erreur lors de la r√©cup√©ration du staff',
      );
    }
  }

  /**
   * R√©cup√©rer un membre du staff par ID
   */
  async findById(id: string): Promise<Staff> {
    try {
      this.logger.log(`üîç R√©cup√©ration staff ID: ${id}`);

      const staff = await this.staffDataService.findById(id);

      if (!staff) {
        throw new NotFoundException('Membre du staff non trouv√©');
      }

      this.logger.log(`‚úÖ Staff trouv√©: ${staff.email}`);
      return staff;
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      this.logger.error('‚ùå Erreur findById staff:', error);
      throw new BadRequestException(
        'Erreur lors de la r√©cup√©ration du membre du staff',
      );
    }
  }

  /**
   * Cr√©er un nouveau membre du staff
   */
  async create(staffData: CreateStaffDto): Promise<Staff> {
    try {
      this.logger.log(`‚ûï Cr√©ation staff: ${staffData.email}`);

      // Validation m√©tier
      this.validateStaffData(staffData);

      // V√©rifier si l'email existe d√©j√†
      const exists = await this.staffDataService.existsByEmail(
        staffData.email,
      );
      if (exists) {
        throw new BadRequestException(
          'Un membre du staff avec cet email existe d√©j√†',
        );
      }

      const newStaff = await this.staffDataService.create(staffData);

      if (!newStaff) {
        throw new BadRequestException(
          'Erreur lors de la cr√©ation du membre du staff',
        );
      }

      this.logger.log(`‚úÖ Staff cr√©√©: ${newStaff.id}`);
      return newStaff;
    } catch (error) {
      if (error instanceof BadRequestException) {
        throw error;
      }
      this.logger.error('‚ùå Erreur create staff:', error);
      throw new BadRequestException(
        'Erreur lors de la cr√©ation du membre du staff',
      );
    }
  }

  /**
   * Mettre √† jour un membre du staff
   */
  async update(id: string, updates: UpdateStaffDto): Promise<Staff> {
    try {
      this.logger.log(`üìù Mise √† jour staff: ${id}`);

      // V√©rifier que le staff existe
      await this.findById(id); // L√®ve une exception si non trouv√©

      const updatedStaff = await this.staffDataService.update(id, updates);

      if (!updatedStaff) {
        throw new BadRequestException(
          'Erreur lors de la mise √† jour du membre du staff',
        );
      }

      this.logger.log(`‚úÖ Staff mis √† jour: ${id}`);
      return updatedStaff;
    } catch (error) {
      if (
        error instanceof NotFoundException ||
        error instanceof BadRequestException
      ) {
        throw error;
      }
      this.logger.error('‚ùå Erreur update staff:', error);
      throw new BadRequestException(
        'Erreur lors de la mise √† jour du membre du staff',
      );
    }
  }

  /**
   * Supprimer un membre du staff
   */
  async delete(id: string): Promise<void> {
    try {
      this.logger.log(`üóëÔ∏è Suppression staff: ${id}`);

      // V√©rifier que le staff existe
      await this.findById(id); // L√®ve une exception si non trouv√©

      const deleted = await this.staffDataService.delete(id);

      if (!deleted) {
        throw new BadRequestException(
          'Erreur lors de la suppression du membre du staff',
        );
      }

      this.logger.log(`‚úÖ Staff supprim√©: ${id}`);
    } catch (error) {
      if (
        error instanceof NotFoundException ||
        error instanceof BadRequestException
      ) {
        throw error;
      }
      this.logger.error('‚ùå Erreur delete staff:', error);
      throw new BadRequestException(
        'Erreur lors de la suppression du membre du staff',
      );
    }
  }

  /**
   * Obtenir les statistiques du staff
   */
  async getStats() {
    try {
      this.logger.log('üìä R√©cup√©ration statistiques staff');

      const stats = await this.staffDataService.getStats();

      return {
        success: true,
        data: stats,
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur getStats staff:', error);
      throw new BadRequestException(
        'Erreur lors de la r√©cup√©ration des statistiques',
      );
    }
  }

  /**
   * Validation des donn√©es staff (logique m√©tier)
   */
  private validateStaffData(staffData: CreateStaffDto): void {
    if (!staffData.email || !staffData.email.includes('@')) {
      throw new BadRequestException('Email invalide');
    }

    if (!staffData.firstName || staffData.firstName.trim().length < 2) {
      throw new BadRequestException(
        'Le pr√©nom doit contenir au moins 2 caract√®res',
      );
    }

    if (!staffData.lastName || staffData.lastName.trim().length < 2) {
      throw new BadRequestException(
        'Le nom doit contenir au moins 2 caract√®res',
      );
    }

    if (!staffData.department || staffData.department.trim().length === 0) {
      throw new BadRequestException('Le d√©partement est obligatoire');
    }

    if (!staffData.role || staffData.role.trim().length === 0) {
      throw new BadRequestException('Le r√¥le est obligatoire');
    }
  }
}
