/**
 * Service d'administration des utilisateurs
 * Responsabilit√© unique : Gestion CRUD admin, niveaux, et op√©rations en masse
 */

import {
  Injectable,
  NotFoundException,
  ConflictException,
  HttpException,
  HttpStatus,
  BadRequestException,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { SupabaseBaseService } from '../../../database/services/supabase-base.service';
import { UserDataService } from '../../../database/services/user-data.service';
import { CacheService } from '../../../cache/cache.service';
import {
  CreateUserDto,
  UpdateUserDto,
  SearchUsersDto,
  UserResponseDto,
  PaginatedUsersResponseDto,
} from '../dto/users.dto';
import { CreateUserDto as CreateUserControllerDto } from '../dto/create-user.dto';

@Injectable()
export class UserAdminService extends SupabaseBaseService {
  constructor(
    configService: ConfigService,
    private readonly userDataService: UserDataService,
    private readonly cacheService: CacheService,
  ) {
    super(configService);
  }

  /**
   * R√©cup√©rer tous les utilisateurs avec pagination et filtres
   */
  async getAllUsers(
    page: number = 1,
    limit: number = 20,
    searchDto?: SearchUsersDto,
    currentUser?: any,
  ): Promise<PaginatedUsersResponseDto> {
    console.log('üìã UserAdminService.getAllUsers:', { page, limit, searchDto });

    try {
      // Calculer l'offset
      const offset = (page - 1) * limit;

      // Construire les filtres
      const filters: any = {};
      if (searchDto?.email) filters.email = searchDto.email;
      if (searchDto?.isActive !== undefined) filters.is_active = searchDto.isActive;
      if (searchDto?.isPro !== undefined) filters.is_pro = searchDto.isPro;
      if (searchDto?.level !== undefined) filters.level = searchDto.level;

      // R√©cup√©rer les utilisateurs depuis la base
      const { users, total } = await this.userDataService.findUsersWithFilters(
        filters,
        offset,
        limit,
        searchDto?.sortBy || 'created_at',
        searchDto?.sortOrder || 'desc',
      );

      // Convertir au format de r√©ponse
      const formattedUsers: UserResponseDto[] = users.map((user) => ({
        id: String(user.id),
        email: user.email,
        firstName: user.first_name,
        lastName: user.last_name,
        phone: user.phone,
        isPro: user.is_pro,
        isActive: user.is_active,
        level: user.level,
        createdAt: user.created_at,
        updatedAt: user.updated_at,
        lastLoginAt: user.last_login_at,
      }));

      const result: PaginatedUsersResponseDto = {
        users: formattedUsers,
        total,
        page,
        limit,
        currentPage: page,
        totalPages: Math.ceil(total / limit),
        hasNextPage: page < Math.ceil(total / limit),
        hasPreviousPage: page > 1,
      };

      console.log(`‚úÖ ${formattedUsers.length} utilisateurs r√©cup√©r√©s sur ${total}`);
      return result;
    } catch (error: any) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateurs:', error);
      throw new HttpException(
        error?.message || 'Erreur lors de la r√©cup√©ration des utilisateurs',
        error?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * Cr√©er un nouvel utilisateur (admin uniquement)
   */
  async createUser(createUserDto: CreateUserControllerDto): Promise<UserResponseDto> {
    console.log('‚ûï UserAdminService.createUser:', createUserDto.email);

    try {
      // V√©rifier si l'utilisateur existe d√©j√†
      const existingUser = await this.userDataService.findByEmail(createUserDto.email);
      if (existingUser) {
        throw new ConflictException('Un utilisateur avec cet email existe d√©j√†');
      }

      // Pr√©parer les donn√©es utilisateur
      const userData = {
        email: createUserDto.email,
        first_name: createUserDto.firstName,
        last_name: createUserDto.lastName,
        phone: createUserDto.phone,
        password_hash: await this.generateDefaultPassword(),
        is_pro: createUserDto.isPro || false,
        is_active: true,
        level: createUserDto.level || 1,
        created_at: new Date(),
        updated_at: new Date(),
      };

      // Cr√©er en base
      const newUser = await this.userDataService.createUser(userData);

      // Convertir au format de r√©ponse
      const userResponse: UserResponseDto = {
        id: String(newUser.id),
        email: newUser.email,
        firstName: newUser.first_name,
        lastName: newUser.last_name,
        phone: newUser.phone,
        isPro: newUser.is_pro,
        isActive: newUser.is_active,
        level: newUser.level,
        createdAt: newUser.created_at,
        updatedAt: newUser.updated_at,
      };

      console.log('‚úÖ Utilisateur cr√©√© (admin):', userResponse.id);
      return userResponse;
    } catch (error: any) {
      console.error('‚ùå Erreur cr√©ation utilisateur (admin):', error);
      throw new HttpException(
        error?.message || "Erreur lors de la cr√©ation de l'utilisateur",
        error?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * Mettre √† jour un utilisateur (admin)
   */
  async updateUser(id: string, updateUserDto: UpdateUserDto): Promise<UserResponseDto> {
    console.log('‚úèÔ∏è UserAdminService.updateUser:', id, updateUserDto);

    try {
      // V√©rifier que l'utilisateur existe
      const existingUser = await this.userDataService.findById(parseInt(id));
      if (!existingUser) {
        throw new NotFoundException('Utilisateur non trouv√©');
      }

      // Pr√©parer les donn√©es √† mettre √† jour
      const updateData: any = { updated_at: new Date() };

      if (updateUserDto.email) updateData.email = updateUserDto.email;
      if (updateUserDto.name) {
        const nameParts = updateUserDto.name.split(' ');
        updateData.first_name = nameParts[0];
        updateData.last_name = nameParts.slice(1).join(' ');
      }
      if (updateUserDto.phone) updateData.phone = updateUserDto.phone;
      if (updateUserDto.isPro !== undefined) updateData.is_pro = updateUserDto.isPro;
      if (updateUserDto.isActive !== undefined) updateData.is_active = updateUserDto.isActive;
      if (updateUserDto.level !== undefined) updateData.level = updateUserDto.level;

      // Mettre √† jour en base
      const updatedUser = await this.userDataService.updateUser(parseInt(id), updateData);

      // Invalider le cache
      await this.cacheService.del(`user_profile_${id}`);

      // Convertir au format de r√©ponse
      const userResponse: UserResponseDto = {
        id: String(updatedUser.id),
        email: updatedUser.email,
        firstName: updatedUser.first_name,
        lastName: updatedUser.last_name,
        phone: updatedUser.phone,
        isPro: updatedUser.is_pro,
        isActive: updatedUser.is_active,
        level: updatedUser.level,
        createdAt: updatedUser.created_at,
        updatedAt: updatedUser.updated_at,
      };

      console.log('‚úÖ Utilisateur mis √† jour:', userResponse.email);
      return userResponse;
    } catch (error: any) {
      console.error('‚ùå Erreur mise √† jour utilisateur:', error);
      throw new HttpException(
        error?.message || "Erreur lors de la mise √† jour de l'utilisateur",
        error?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * Supprimer un utilisateur (d√©sactivation)
   */
  async deleteUser(id: string): Promise<boolean> {
    console.log('üóëÔ∏è UserAdminService.deleteUser:', id);

    try {
      const user = await this.userDataService.findById(parseInt(id));
      if (!user) {
        throw new NotFoundException('Utilisateur non trouv√©');
      }

      // D√©sactiver plut√¥t que supprimer
      await this.userDataService.updateUser(parseInt(id), {
        is_active: false,
        updated_at: new Date(),
      });

      // Invalider le cache
      await this.cacheService.del(`user_profile_${id}`);

      console.log('‚úÖ Utilisateur d√©sactiv√©:', id);
      return true;
    } catch (error: any) {
      console.error('‚ùå Erreur suppression utilisateur:', error);
      throw new HttpException(
        error?.message || "Erreur lors de la suppression de l'utilisateur",
        error?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * Mettre √† jour le niveau d'un utilisateur
   */
  async updateUserLevel(id: string, level: number): Promise<UserResponseDto> {
    console.log('üî∞ UserAdminService.updateUserLevel:', id, level);

    try {
      if (level < 1 || level > 10) {
        throw new BadRequestException('Le niveau doit √™tre entre 1 et 10');
      }

      const user = await this.userDataService.findById(parseInt(id));
      if (!user) {
        throw new NotFoundException('Utilisateur non trouv√©');
      }

      const updatedUser = await this.userDataService.updateUser(parseInt(id), {
        level,
        updated_at: new Date(),
      });

      // Invalider le cache
      await this.cacheService.del(`user_profile_${id}`);

      const userResponse: UserResponseDto = {
        id: String(updatedUser.id),
        email: updatedUser.email,
        firstName: updatedUser.first_name,
        lastName: updatedUser.last_name,
        phone: updatedUser.phone,
        isPro: updatedUser.is_pro,
        isActive: updatedUser.is_active,
        level: updatedUser.level,
        createdAt: updatedUser.created_at,
        updatedAt: updatedUser.updated_at,
      };

      console.log('‚úÖ Niveau utilisateur mis √† jour:', level);
      return userResponse;
    } catch (error: any) {
      console.error('‚ùå Erreur mise √† jour niveau:', error);
      throw new HttpException(
        error?.message || 'Erreur lors de la mise √† jour du niveau',
        error?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * R√©activer un utilisateur d√©sactiv√©
   */
  async reactivateUser(id: string): Promise<UserResponseDto> {
    console.log('üîì UserAdminService.reactivateUser:', id);

    try {
      const user = await this.userDataService.findById(parseInt(id));
      if (!user) {
        throw new NotFoundException('Utilisateur non trouv√©');
      }

      const updatedUser = await this.userDataService.updateUser(parseInt(id), {
        is_active: true,
        updated_at: new Date(),
      });

      // Invalider le cache
      await this.cacheService.del(`user_profile_${id}`);

      const userResponse: UserResponseDto = {
        id: String(updatedUser.id),
        email: updatedUser.email,
        firstName: updatedUser.first_name,
        lastName: updatedUser.last_name,
        phone: updatedUser.phone,
        isPro: updatedUser.is_pro,
        isActive: updatedUser.is_active,
        level: updatedUser.level,
        createdAt: updatedUser.created_at,
        updatedAt: updatedUser.updated_at,
      };

      console.log('‚úÖ Utilisateur r√©activ√©:', id);
      return userResponse;
    } catch (error: any) {
      console.error('‚ùå Erreur r√©activation utilisateur:', error);
      throw new HttpException(
        error?.message || 'Erreur lors de la r√©activation',
        error?.status || HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * Obtenir les statistiques des utilisateurs
   */
  async getUserStats(): Promise<{
    total: number;
    active: number;
    inactive: number;
    pro: number;
    byLevel: Record<number, number>;
  }> {
    console.log('üìä UserAdminService.getUserStats');

    try {
      const stats = await this.userDataService.getUserStatistics();

      console.log('‚úÖ Statistiques r√©cup√©r√©es');
      return stats;
    } catch (error: any) {
      console.error('‚ùå Erreur r√©cup√©ration stats:', error);
      throw new HttpException(
        'Erreur lors de la r√©cup√©ration des statistiques',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * Op√©ration en masse : d√©sactiver plusieurs utilisateurs
   */
  async bulkDeactivateUsers(userIds: string[]): Promise<number> {
    console.log('üîí UserAdminService.bulkDeactivateUsers:', userIds.length);

    try {
      const numericIds = userIds.map((id) => parseInt(id));
      const result = await this.userDataService.bulkUpdateUsers(numericIds, {
        is_active: false,
        updated_at: new Date(),
      });

      // Invalider les caches
      for (const id of userIds) {
        await this.cacheService.del(`user_profile_${id}`);
      }

      console.log('‚úÖ Utilisateurs d√©sactiv√©s en masse:', result);
      return result;
    } catch (error: any) {
      console.error('‚ùå Erreur d√©sactivation en masse:', error);
      throw new HttpException(
        'Erreur lors de la d√©sactivation en masse',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // ========== M√âTHODES PRIV√âES ==========

  private async generateDefaultPassword(): Promise<string> {
    // G√©n√©rer un mot de passe temporaire
    const tempPassword = `temp_${Date.now()}_${Math.random().toString(36).substring(2)}`;
    return `hashed_${tempPassword}`;
  }
}
