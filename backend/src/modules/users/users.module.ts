/**
 * üéØ MODULE USERS COMPLET - Architecture finale consolid√©e
 *
 * Module users unifi√© int√©grant toutes les fonctionnalit√©s :
 * ‚úÖ Gestion utilisateurs compl√®te (CRUD, profils)
 * ‚úÖ Adresses facturation/livraison (CRUD)
 * ‚úÖ Gestion des mots de passe s√©curis√©e
 * ‚úÖ Messagerie interne avec threading
 * ‚úÖ Int√©gration avec l'authentification JWT
 * ‚úÖ RGPD/Suppression compte
 * ‚úÖ Sessions JWT + Redis cache
 */

import { Module, forwardRef } from '@nestjs/common';
import { JwtModule } from '@nestjs/jwt';
import { ConfigModule } from '@nestjs/config';
import { DatabaseModule } from '../../database/database.module';
import { CacheModule } from '../../cache/cache.module';
import { MailService } from '../../services/mail.service';
import { AuthModule } from '../../auth/auth.module';
import { MessagesModule } from '../messages/messages.module';

// ‚úÖ CONTR√îLEUR FINAL CONSOLID√â
import { UsersFinalController } from './users-final.controller';

// Controllers sp√©cialis√©s (√† conserver)
import { PasswordController } from './controllers/password.controller';
import { AddressesController } from './controllers/addresses.controller';
import { UserShipmentController } from './controllers/user-shipment.controller';

// ‚úÖ SERVICES FINAUX CONSOLID√âS
import { UsersFinalService } from './users-final.service';
import { UserDataConsolidatedService } from './services/user-data-consolidated.service';

// ‚ö†Ô∏è ANCIEN SERVICE (pour compatibilit√© temporaire avec AuthModule)
import { UsersService } from './users.service';

// Services sp√©cialis√©s (√† conserver)
import { ProfileService } from './services/profile.service';
import { UsersAdminService } from './services/admin.service';
import { PasswordService } from './services/password.service';
import { AddressesService } from './services/addresses.service';
import { UserShipmentService } from './services/user-shipment.service';
// Services modernes en cours de migration (this.db -> this.client)
// import { AddressModernService } from './services/address-modern.service';
// import { MessageModernService } from './services/message-modern.service';

@Module({
  imports: [
    // Modules externes - Configuration et infrastructure
    ConfigModule, // ‚úÖ Configuration pour SupabaseBaseService
    DatabaseModule, // ‚úÖ UserDataService et autres services de donn√©es
    CacheModule, // ‚úÖ Redis cache pour sessions et performances
    forwardRef(() => AuthModule), // ‚úÖ AuthModule avec forwardRef (√©vite circular dependency)
    MessagesModule, // ‚úÖ MessagesModule pour d√©l√©gation messaging
    JwtModule.register({
      secret: process.env.JWT_SECRET || 'secret-key',
      signOptions: { expiresIn: '7d' },
    }),
  ],
  controllers: [
    // ‚úÖ CONTR√îLEUR PRINCIPAL CONSOLID√â
    UsersFinalController, // Route unique: /api/users
    
    // Controllers sp√©cialis√©s
    PasswordController, // ‚úÖ API REST pour gestion des mots de passe
    AddressesController, // ‚úÖ Service d'adresses r√©activ√©
    UserShipmentController, // ‚úÖ API pour les exp√©ditions utilisateur
  ],
  providers: [
    // ‚úÖ SERVICES PRINCIPAUX CONSOLID√âS
    UsersFinalService, // Service m√©tier avec cache Redis
    UserDataConsolidatedService, // Acc√®s donn√©es Supabase
    
    // ‚ö†Ô∏è ANCIEN SERVICE (pour compatibilit√© temporaire avec AuthModule)
    UsersService, // TODO: Migrer AuthModule vers UsersFinalService
    
    // Services sp√©cialis√©s
    ProfileService, // ‚úÖ Service moderne de gestion des profils
    UsersAdminService, // ‚úÖ Service op√©rations admin
    PasswordService, // ‚úÖ Service moderne de gestion des mots de passe
    AddressesService, // ‚úÖ Service moderne de gestion des adresses
    UserShipmentService, // ‚úÖ Service de suivi des exp√©ditions utilisateur

    // Service mail avec token d'injection
    {
      provide: 'MailService',
      useClass: MailService,
    },
  ],
  exports: [
    // ‚úÖ SERVICES PRINCIPAUX CONSOLID√âS
    UsersFinalService, // Service m√©tier principal
    UserDataConsolidatedService, // Acc√®s donn√©es
    
    // ‚ö†Ô∏è ANCIEN SERVICE (pour compatibilit√© temporaire avec AuthModule)
    UsersService, // TODO: Migrer AuthModule vers UsersFinalService
    
    // Services sp√©cialis√©s
    ProfileService, // ‚úÖ Service de profils export√©
    UsersAdminService, // ‚úÖ Service admin export√©
    PasswordService, // ‚úÖ Service de mots de passe export√©
    AddressesService, // ‚úÖ Service d'adresses export√©
    UserShipmentService, // ‚úÖ Service de suivi des exp√©ditions export√©
  ],
})
export class UsersModule {}
