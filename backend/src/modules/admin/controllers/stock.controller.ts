/**
 * üì¶ StockController - Contr√¥leur de gestion des stocks
 *
 * Contr√¥leur align√© sur l'architecture existante :
 * ‚úÖ Documentation Swagger compl√®te
 * ‚úÖ Guards d'authentification standards
 * ‚úÖ DTOs avec validation Zod
 * ‚úÖ Gestion d'erreurs coh√©rente
 */

import {
  Controller,
  Get,
  Post,
  Put,
  Body,
  Param,
  Query,
  UseGuards,
  HttpStatus,
  HttpCode,
  Request,
  Logger,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiBearerAuth,
  ApiResponse,
} from '@nestjs/swagger';
import { AuthenticatedGuard } from '../../../auth/authenticated.guard';
import { StockManagementService } from '../services/stock-management.service';
import { WorkingStockService } from '../services/working-stock.service';
import {
  StockDashboardFilters,
  UpdateStockDto,
  ReserveStockDto,
  DisableProductDto,
} from '../dto/stock.dto';

@ApiTags('Admin - Stock Management CONSOLID√â')
@Controller('api/admin/stock')
@UseGuards(AuthenticatedGuard)
@ApiBearerAuth()
export class StockController {
  private readonly logger = new Logger(StockController.name);

  constructor(
    private readonly stockService: StockManagementService,
    private readonly workingStockService: WorkingStockService,
  ) {
    this.logger.log('‚úÖ Stock Controller consolid√© - 6 controllers fusionn√©s en 1');
  }

  /**
   * GET /admin/stock/dashboard
   * R√©cup√©rer le dashboard des stocks avec statistiques
   */
  @Get('dashboard')
  @ApiOperation({ summary: 'Dashboard stock avec statistiques' })
  @ApiResponse({ status: 200, description: 'Dashboard r√©cup√©r√© avec succ√®s' })
  async getStockDashboard(@Query() filters: StockDashboardFilters) {
    try {
      this.logger.debug('R√©cup√©ration dashboard stock', { filters });
      return await this.stockService.getStockDashboard(filters);
    } catch (error) {
      this.logger.error('Erreur dashboard stock', error);
      throw error;
    }
  }

  /**
   * PUT /admin/stock/:productId
   * Mettre √† jour le stock d'un produit
   */
  @Put(':productId')
  @ApiOperation({ summary: "Mettre √† jour le stock d'un produit" })
  @ApiResponse({ status: 200, description: 'Stock mis √† jour avec succ√®s' })
  async updateStock(
    @Param('productId') productId: string,
    @Body() updateData: UpdateStockDto,
    @Request() req: any,
  ) {
    try {
      this.logger.debug('Mise √† jour stock', { productId, updateData });
      const { reason, ...stockData } = updateData;
      return await this.stockService.updateStock(
        productId,
        stockData,
        req.user.id,
        reason,
      );
    } catch (error) {
      this.logger.error('Erreur mise √† jour stock', error);
      throw error;
    }
  }

  /**
   * POST /admin/stock/:productId/disable
   * D√©sactiver un produit
   */
  @Post(':productId/disable')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'D√©sactiver un produit' })
  @ApiResponse({ status: 200, description: 'Produit d√©sactiv√© avec succ√®s' })
  async disableProduct(
    @Param('productId') productId: string,
    @Body() body: DisableProductDto,
    @Request() req: any,
  ) {
    try {
      this.logger.debug('D√©sactivation produit', {
        productId,
        reason: body.reason,
      });
      return await this.stockService.disableProduct(
        productId,
        req.user.id,
        body.reason,
      );
    } catch (error) {
      this.logger.error('Erreur d√©sactivation produit', error);
      throw error;
    }
  }

  /**
   * POST /admin/stock/:productId/reserve
   * R√©server du stock pour une commande
   */
  @Post(':productId/reserve')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'R√©server du stock pour une commande' })
  @ApiResponse({ status: 200, description: 'Stock r√©serv√© avec succ√®s' })
  async reserveStock(
    @Param('productId') productId: string,
    @Body() body: ReserveStockDto,
  ) {
    try {
      this.logger.debug('R√©servation stock', { productId, ...body });
      return await this.stockService.reserveStock(
        productId,
        body.quantity,
        body.orderId,
      );
    } catch (error) {
      this.logger.error('Erreur r√©servation stock', error);
      throw error;
    }
  }

  /**
   * POST /admin/stock/:productId/release
   * Lib√©rer du stock r√©serv√©
   */
  @Post(':productId/release')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Lib√©rer du stock r√©serv√©' })
  @ApiResponse({ status: 200, description: 'Stock lib√©r√© avec succ√®s' })
  async releaseStock(
    @Param('productId') productId: string,
    @Body() body: ReserveStockDto,
  ) {
    try {
      this.logger.debug('Lib√©ration stock', { productId, ...body });
      return await this.stockService.releaseStock(
        productId,
        body.quantity,
        body.orderId,
      );
    } catch (error) {
      this.logger.error('Erreur lib√©ration stock', error);
      throw error;
    }
  }

  /**
   * GET /admin/stock/:productId/movements
   * R√©cup√©rer l'historique des mouvements de stock
   */
  @Get(':productId/movements')
  @ApiOperation({ summary: "Historique des mouvements de stock d'un produit" })
  @ApiResponse({ status: 200, description: 'Mouvements r√©cup√©r√©s avec succ√®s' })
  async getStockMovements(
    @Param('productId') productId: string,
    @Query('limit') limit?: number,
  ) {
    try {
      this.logger.debug('R√©cup√©ration mouvements stock', { productId, limit });
      return await this.stockService.getStockMovements(productId, limit);
    } catch (error) {
      this.logger.error('Erreur r√©cup√©ration mouvements', error);
      throw error;
    }
  }

  /**
   * GET /admin/stock/alerts
   * R√©cup√©rer les alertes de stock actives
   */
  @Get('alerts')
  @ApiOperation({ summary: 'R√©cup√©rer les alertes de stock actives' })
  @ApiResponse({ status: 200, description: 'Alertes r√©cup√©r√©es avec succ√®s' })
  async getStockAlerts() {
    try {
      this.logger.debug('R√©cup√©ration alertes stock');
      return await this.stockService.getStockAlerts();
    } catch (error) {
      this.logger.error('Erreur r√©cup√©ration alertes', error);
      throw error;
    }
  }

  /**
   * GET /admin/stock/stats
   * Statistiques d√©taill√©es du stock
   * ‚ö° NOUVEAU - Fusionn√© de WorkingStockController
   */
  @Get('stats')
  @ApiOperation({ summary: 'Statistiques d√©taill√©es des stocks' })
  @ApiResponse({ status: 200, description: 'Statistiques r√©cup√©r√©es' })
  async getStockStats() {
    try {
      this.logger.debug('R√©cup√©ration statistiques stock');
      const stats = await this.workingStockService.getStockStatistics();
      return {
        success: true,
        data: stats,
        message: 'Statistiques r√©cup√©r√©es avec succ√®s',
      };
    } catch (error) {
      this.logger.error('Erreur r√©cup√©ration statistiques', error);
      throw error;
    }
  }

  /**
   * GET /admin/stock/search
   * Recherche avanc√©e dans le stock
   * ‚ö° NOUVEAU - Fusionn√© de WorkingStockController
   */
  @Get('search')
  @ApiOperation({ summary: 'Rechercher des articles dans le stock' })
  @ApiResponse({ status: 200, description: 'R√©sultats de recherche' })
  async searchStock(
    @Query('query') query: string,
    @Query('limit') limit: string = '50',
    @Query('availableOnly') availableOnly: string = 'true',
  ) {
    try {
      this.logger.debug('Recherche stock', { query, limit, availableOnly });
      const items = await this.workingStockService.searchItems(
        query,
        parseInt(limit),
        availableOnly === 'true',
      );
      return {
        success: true,
        data: items,
        count: items.length,
        message: 'Recherche effectu√©e avec succ√®s',
      };
    } catch (error) {
      this.logger.error('Erreur recherche stock', error);
      throw error;
    }
  }

  /**
   * GET /admin/stock/top-items
   * R√©cup√©rer les top produits
   * ‚ö° NOUVEAU - Fusionn√© de WorkingStockController
   */
  @Get('top-items')
  @ApiOperation({ summary: 'R√©cup√©rer les produits top (prix √©lev√©)' })
  @ApiResponse({ status: 200, description: 'Top produits r√©cup√©r√©s' })
  async getTopItems(@Query('limit') limit: string = '10') {
    try {
      this.logger.debug('R√©cup√©ration top items', { limit });
      const items = await this.workingStockService.getTopItems(parseInt(limit));
      return {
        success: true,
        data: items,
        count: items.length,
        message: 'Top produits r√©cup√©r√©s avec succ√®s',
      };
    } catch (error) {
      this.logger.error('Erreur top items', error);
      throw error;
    }
  }

  /**
   * PUT /admin/stock/:pieceId/availability
   * Mettre √† jour la disponibilit√© d'un produit
   * ‚ö° NOUVEAU - Fusionn√© de WorkingStockController
   */
  @Put(':pieceId/availability')
  @ApiOperation({ summary: 'Mettre √† jour la disponibilit√©' })
  @ApiResponse({ status: 200, description: 'Disponibilit√© mise √† jour' })
  async updateAvailability(
    @Param('pieceId') pieceId: string,
    @Body() body: { available: boolean },
  ) {
    try {
      this.logger.debug('Mise √† jour disponibilit√©', { pieceId, ...body });
      const result = await this.workingStockService.updateAvailability(
        pieceId,
        body.available,
      );
      return {
        success: true,
        data: { pieceId, available: body.available, updated: result },
        message: 'Disponibilit√© mise √† jour avec succ√®s',
      };
    } catch (error) {
      this.logger.error('Erreur mise √† jour disponibilit√©', error);
      throw error;
    }
  }

  /**
   * GET /admin/stock/health
   * V√©rifier la sant√© du service de gestion des stocks
   */
  @Get('health')
  @ApiOperation({ summary: '√âtat de sant√© du service stock consolid√©' })
  @ApiResponse({ status: 200, description: 'Service op√©rationnel' })
  async checkHealth() {
    try {
      this.logger.debug('V√©rification sant√© service stock');
      return {
        success: true,
        data: {
          service: 'StockController-Consolidated',
          oldControllers: 6,
          newControllers: 1,
          routes: 13,
          status: 'operational',
          timestamp: new Date().toISOString(),
        },
        message: '‚úÖ Service stock consolid√© op√©rationnel - 83% reduction',
      };
    } catch (error) {
      this.logger.error('Erreur v√©rification sant√©', error);
      return {
        success: false,
        data: {
          service: 'StockController-Consolidated',
          status: 'error',
          timestamp: new Date().toISOString(),
        },
        message: `Erreur: ${(error as Error).message}`,
      };
    }
  }
}
