/**
 * üìã CONTR√îLEUR ADMIN DASHBOARD - NestJS-Remix Monorepo
 * 
 * API REST pour les statistiques et m√©triques admin
 * Compatible avec l'interface Remix existante
 */

import { Controller, Get, UseGuards, Logger } from '@nestjs/common';
import { AdminDashboardService } from '../services/admin-dashboard.service';
import { LocalAuthGuard } from '../../../auth/local-auth.guard';

@Controller('admin/dashboard')
@UseGuards(LocalAuthGuard)
export class AdminDashboardController {
  private readonly logger = new Logger(AdminDashboardController.name);

  constructor(
    private readonly dashboardService: AdminDashboardService,
  ) {}

  /**
   * GET /admin/dashboard/stats
   * R√©cup√©rer les statistiques compl√®tes du dashboard
   */
  @Get('stats')
  async getDashboardStats() {
    try {
      this.logger.log('Requ√™te stats dashboard admin');
      const stats = await this.dashboardService.getDashboardStats();
      
      return {
        success: true,
        data: stats,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      this.logger.error('Erreur lors de la r√©cup√©ration des stats dashboard:', error);
      return {
        success: false,
        error: 'Erreur lors de la r√©cup√©ration des statistiques',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * GET /admin/dashboard/metrics
   * M√©triques en temps r√©el
   */
  @Get('metrics')
  async getRealtimeMetrics() {
    try {
      this.logger.log('Requ√™te m√©triques temps r√©el');
      const metrics = await this.dashboardService.getRealtimeMetrics();
      
      return {
        success: true,
        data: metrics,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      this.logger.error('Erreur lors de la r√©cup√©ration des m√©triques:', error);
      return {
        success: false,
        error: 'Erreur lors de la r√©cup√©ration des m√©triques',
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * GET /admin/dashboard/health
   * V√©rification de l'√©tat du syst√®me
   */
  @Get('health')
  async getSystemHealth() {
    try {
      this.logger.log('V√©rification √©tat syst√®me');
      
      return {
        success: true,
        data: {
          status: 'healthy',
          timestamp: new Date().toISOString(),
          services: {
            database: 'connected',
            cache: 'connected',
            api: 'running'
          }
        }
      };

    } catch (error) {
      this.logger.error('Erreur lors de la v√©rification syst√®me:', error);
      return {
        success: false,
        error: 'Erreur syst√®me',
        timestamp: new Date().toISOString()
      };
    }
  }
}
