import { Injectable } from '@nestjs/common';
import { SupabaseBaseService } from '../../../database/services/supabase-base.service';

/**
 * üîß ConfigurationService - Service de configuration syst√®me
 *
 * Service align√© sur l'approche des modules users/orders/cart :
 * ‚úÖ H√©rite de SupabaseBaseService pour acc√®s Supabase
 * ‚úÖ M√©thodes async avec gestion d'erreurs
 * ‚úÖ Architecture modulaire et testable
 */
@Injectable()
export class ConfigurationService extends SupabaseBaseService {
  /**
   * R√©cup√®re toutes les configurations syst√®me
   */
  async getAllConfigurations() {
    try {
      const { data, error } = await this.client
        .from('system_config')
        .select('*')
        .order('key', { ascending: true });

      if (error) {
        throw new Error(
          `Erreur lors de la r√©cup√©ration des configurations: ${error.message}`,
        );
      }

      return {
        success: true,
        data: data || [],
        message: 'Configurations r√©cup√©r√©es avec succ√®s',
      };
    } catch (error) {
      return {
        success: false,
        data: [],
        message: `Erreur: ${(error as Error).message}`,
      };
    }
  }

  /**
   * R√©cup√®re une configuration par cl√©
   */
  async getConfigurationByKey(key: string) {
    try {
      const { data, error } = await this.client
        .from('system_config')
        .select('*')
        .eq('key', key)
        .single();

      if (error) {
        throw new Error(`Configuration non trouv√©e: ${error.message}`);
      }

      return {
        success: true,
        data,
        message: 'Configuration r√©cup√©r√©e avec succ√®s',
      };
    } catch (error) {
      return {
        success: false,
        data: null,
        message: `Erreur: ${(error as Error).message}`,
      };
    }
  }

  /**
   * Met √† jour une configuration
   */
  async updateConfiguration(key: string, value: any) {
    try {
      const { data, error } = await this.client
        .from('system_config')
        .update({
          value,
          updated_at: new Date().toISOString(),
        })
        .eq('key', key)
        .select()
        .single();

      if (error) {
        throw new Error(`Erreur lors de la mise √† jour: ${error.message}`);
      }

      return {
        success: true,
        data,
        message: 'Configuration mise √† jour avec succ√®s',
      };
    } catch (error) {
      return {
        success: false,
        data: null,
        message: `Erreur: ${(error as Error).message}`,
      };
    }
  }
}
