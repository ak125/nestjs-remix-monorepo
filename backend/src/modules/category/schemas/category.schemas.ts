/**
 * üõ°Ô∏è SCH√âMAS DE VALIDATION ZOD POUR LES CAT√âGORIES
 *
 * D√©finit les sch√©mas de validation pour les endpoints de cat√©gories
 */

import { z } from 'zod';

// ========================================
// üì• SCH√âMAS D'ENTR√âE (Param√®tres)
// ========================================

/**
 * Validation du slug de cat√©gorie
 */
export const CategorySlugSchema = z
  .string()
  .min(2, 'Le slug doit contenir au moins 2 caract√®res')
  .max(100, 'Le slug ne peut pas d√©passer 100 caract√®res')
  .regex(
    /^[a-z0-9]+(?:-[a-z0-9]+)*$/,
    'Le slug doit √™tre en minuscules, avec des tirets pour s√©parer les mots'
  );

// ========================================
// üì§ SCH√âMAS DE SORTIE (R√©ponses API)
// ========================================

/**
 * Sch√©ma pour une cat√©gorie de base
 */
export const CategoryInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  description: z.string().optional(),
  shortDescription: z.string().optional(),
  image: z.string().url().optional(),
  seoTitle: z.string().optional(),
  seoDescription: z.string().optional(),
  productsCount: z.number().int().min(0).optional(),
});

/**
 * Sch√©ma pour un breadcrumb
 */
export const CategoryBreadcrumbSchema = z.object({
  name: z.string(),
  url: z.string(),
});

/**
 * Sch√©ma pour le s√©lecteur de v√©hicule
 */
export const CategoryVehicleSelectorSchema = z.object({
  brands: z.array(
    z.object({
      id: z.string(),
      name: z.string(),
      logo: z.string().url().optional(),
    })
  ),
  searchByTypemine: z.boolean(),
});

/**
 * Sch√©ma pour un √©chantillon de produit
 */
export const CategoryProductSampleSchema = z.object({
  id: z.string(),
  reference: z.string(),
  name: z.string(),
  brand: z.string().optional(),
  price: z.number().min(0).optional(),
  image: z.string().url().optional(),
  hasImage: z.boolean(),
});

/**
 * Sch√©ma pour une cat√©gorie li√©e
 */
export const CategoryRelatedSchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  description: z.string().optional(),
  productsCount: z.number().int().min(0).optional(),
  image: z.string().url().optional(),
});

/**
 * Sch√©ma pour les informations techniques
 */
export const CategoryTechnicalInfoSchema = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string(),
  order: z.number().int(),
  isMainInfo: z.boolean(),
});

/**
 * Sch√©ma pour les statistiques
 */
export const CategoryStatsSchema = z.object({
  totalProducts: z.number().int().min(0),
  totalBrands: z.number().int().min(0),
  averagePrice: z.number().min(0).optional(),
});

/**
 * Sch√©ma complet pour les donn√©es de page cat√©gorie
 */
export const CategoryPageDataSchema = z.object({
  category: CategoryInfoSchema,
  breadcrumbs: z.array(CategoryBreadcrumbSchema),
  vehicleSelector: CategoryVehicleSelectorSchema,
  productsSample: z.array(CategoryProductSampleSchema),
  relatedCategories: z.array(CategoryRelatedSchema),
  technicalInfo: z.array(CategoryTechnicalInfoSchema),
  stats: CategoryStatsSchema,
});

/**
 * Sch√©ma de r√©ponse API compl√®te
 */
export const CategoryApiResponseSchema = z.object({
  success: z.boolean(),
  data: CategoryPageDataSchema,
  message: z.string(),
  meta: z.object({
    timestamp: z.string(),
    slug: z.string(),
    categoryId: z.string(),
    productsCount: z.number().int().min(0),
  }),
});

// ========================================
// üéØ TYPES TYPESCRIPT INF√âR√âS
// ========================================

export type CategorySlug = z.infer<typeof CategorySlugSchema>;
export type CategoryInfo = z.infer<typeof CategoryInfoSchema>;
export type CategoryPageData = z.infer<typeof CategoryPageDataSchema>;
export type CategoryApiResponse = z.infer<typeof CategoryApiResponseSchema>;