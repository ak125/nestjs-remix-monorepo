/**
 * üéØ SERVICE CONTENU CAT√âGORIE - VERSION ADAPT√âE AUX DONN√âES R√âELLES
 */

import { Injectable, Logger } from '@nestjs/common';

// ========================================
// üìã INTERFACES SIMPLIFI√âES
// ========================================

export interface CategoryBlogArticle {
  id: number;
  title: string;
  content: string;
  url: string;
  publishedAt: string;
}

export interface RelatedCategory {
  id: number;
  name: string;
  alias: string;
  image?: string;
  productCount: number;
}

export interface PopularMotorization {
  id: number;
  name: string;
  type: string;
  productCount: number;
  icon: string;
}

export interface Equipmentier {
  id: number;
  name: string;
  logo?: string;
  qualityLevel: 'Premium' | 'Qualit√©' | 'Standard';
  productCount: number;
}

export interface TechnicalInfo {
  id: number;
  title: string;
  description: string;
  category: 'specification' | 'installation' | 'maintenance';
  icon: string;
}

export interface CategoryFullContent {
  blogArticle?: CategoryBlogArticle | null;
  relatedCategories: RelatedCategory[];
  popularMotorizations: PopularMotorization[];
  equipmentiers: Equipmentier[];
  technicalInfo: TechnicalInfo[];
}

@Injectable()
export class CategoryContentServiceReal {
  private readonly logger = new Logger(CategoryContentServiceReal.name);

  constructor() {
    // Service standalone sans d√©pendances Supabase
  }

  /**
   * üéØ M√âTHODE PRINCIPALE - R√©cup√®re le contenu enrichi avec donn√©es r√©elles
   */
  async getCategoryFullContent(
    categoryId: number,
    _familyId: number,
    categoryAlias: string,
  ): Promise<CategoryFullContent> {
    this.logger.log(`üîç R√©cup√©ration contenu enrichi pour cat√©gorie ${categoryId} (${categoryAlias})`);

    try {
      const [
        blogArticle,
        relatedCategories,
        popularMotorizations,
        equipmentiers,
        technicalInfo,
      ] = await Promise.all([
        this.getCategoryBlogArticle(categoryAlias),
        this.getRelatedCategories(categoryId),
        this.getPopularMotorizations(),
        this.getEquipementiers(),
        this.getTechnicalInfo(categoryAlias),
      ]);

      return {
        blogArticle,
        relatedCategories,
        popularMotorizations,
        equipmentiers,
        technicalInfo,
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur getCategoryFullContent:`, error);
      return {
        blogArticle: null,
        relatedCategories: [],
        popularMotorizations: [],
        equipmentiers: [],
        technicalInfo: [],
      };
    }
  }

  /**
   * üì∞ R√©cup√®re un article de blog li√© (VERSION MOCK TEMPORAIRE)
   */
  private async getCategoryBlogArticle(categoryAlias: string): Promise<CategoryBlogArticle | null> {
    try {
      // TODO: Remplacer par un vrai appel Supabase plus tard
      this.logger.log(`‚ÑπÔ∏è Mock: Recherche article pour ${categoryAlias}`);
      
      // Retour mock pour √©viter les erreurs
      return null;
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è Erreur r√©cup√©ration article blog:`, error);
      return null;
    }
  }

  /**
   * üîó R√©cup√®re les cat√©gories li√©es (VERSION MOCK TEMPORAIRE)
   */
  private async getRelatedCategories(currentCategoryId: number): Promise<RelatedCategory[]> {
    try {
      // TODO: Remplacer par un vrai appel Supabase plus tard
      this.logger.log(`‚ÑπÔ∏è Mock: Cat√©gories li√©es pour ${currentCategoryId}`);
      
      // Retour mock pour √©viter les erreurs
      return [];
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è Erreur getRelatedCategories:`, error);
      return [];
    }
  }

  /**
   * üöó G√©n√®re des motorisations populaires (donn√©es mock r√©alistes)
   */
  private async getPopularMotorizations(): Promise<PopularMotorization[]> {
    const motorizations = [
      { name: 'Diesel', type: 'fuel', icon: '‚õΩ', count: 1250 },
      { name: 'Essence', type: 'fuel', icon: 'üöó', count: 980 },
      { name: 'Hybrid', type: 'alternative', icon: 'üîã', count: 450 },
      { name: 'TDI', type: 'diesel', icon: 'üõ£Ô∏è', count: 720 },
      { name: 'TSI', type: 'essence', icon: 'üí®', count: 630 },
      { name: 'HDI', type: 'diesel', icon: 'üîß', count: 540 },
    ];

    return motorizations.map((motor, index) => ({
      id: index + 1,
      name: motor.name,
      type: motor.type,
      productCount: motor.count,
      icon: motor.icon,
    }));
  }

  /**
   * üè≠ G√©n√®re des √©quipementiers (donn√©es mock r√©alistes)
   */
  private async getEquipementiers(): Promise<Equipmentier[]> {
    const equipmentiers = [
      { name: 'BOSCH', level: 'Premium' as const, count: 245, logo: 'üîß' },
      { name: 'MANN', level: 'Qualit√©' as const, count: 198, logo: 'üõ†Ô∏è' },
      { name: 'FEBI', level: 'Standard' as const, count: 156, logo: '‚öôÔ∏è' },
      { name: 'VALEO', level: 'Premium' as const, count: 134, logo: 'üî©' },
      { name: 'MAHLE', level: 'Qualit√©' as const, count: 112, logo: 'üß≤' },
      { name: 'SKF', level: 'Premium' as const, count: 89, logo: '‚ö™' },
    ];

    return equipmentiers.map((equip, index) => ({
      id: index + 1,
      name: equip.name,
      logo: equip.logo,
      qualityLevel: equip.level,
      productCount: equip.count,
    }));
  }

  /**
   * üìñ G√©n√®re des informations techniques (donn√©es mock contextuelles)
   */
  private async getTechnicalInfo(categoryAlias: string): Promise<TechnicalInfo[]> {
    const baseInfo = [
      {
        id: 1,
        title: 'Sp√©cifications',
        description: 'Compatibilit√© v√©hicules, dimensions et r√©f√©rences, normes et certifications',
        category: 'specification' as const,
        icon: 'üìã',
      },
      {
        id: 2,
        title: 'Installation',
        description: 'Guide √©tape par √©tape, outils n√©cessaires, conseils de s√©curit√©',
        category: 'installation' as const,
        icon: 'üî®',
      },
      {
        id: 3,
        title: 'Maintenance',
        description: 'Fr√©quence de remplacement, signes d\'usure, entretien pr√©ventif',
        category: 'maintenance' as const,
        icon: '‚ö°',
      },
    ];

    // Adapter le contenu selon la cat√©gorie
    if (categoryAlias.includes('filtre')) {
      baseInfo[2].description = 'Changement tous les 10,000 km, v√©rification mensuelle, remplacement pr√©ventif';
    } else if (categoryAlias.includes('frein')) {
      baseInfo[2].description = 'Contr√¥le tous les 20,000 km, √©coute des bruits, mesure de l\'√©paisseur';
    }

    return baseInfo;
  }
}