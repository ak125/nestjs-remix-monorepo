/**
 * üéØ CONTR√îLEUR API POUR LES PAGES CAT√âGORIES
 *
 * Expose les endpoints REST pour r√©cup√©rer les donn√©es des pages cat√©gories
 */

import {
  Controller,
  Get,
  Param,
  Logger,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiParam, ApiResponse } from '@nestjs/swagger';
import { CategorySimpleService } from './category-simple.service';

@ApiTags('Categories - Pages cat√©gories dynamiques')
@Controller('api/categories')
export class CategoryController {
  private readonly logger = new Logger(CategoryController.name);

  constructor(private readonly categoryService: CategorySimpleService) {}

  /**
   * üîç GET /api/categories/:slug - R√©cup√®re toutes les donn√©es d'une page cat√©gorie
   */
  @Get(':slug')
  @ApiOperation({
    summary: "R√©cup√©rer les donn√©es compl√®tes d'une page cat√©gorie",
    description:
      'Retourne toutes les informations n√©cessaires pour afficher une page cat√©gorie : infos de base, breadcrumbs, s√©lecteur v√©hicule, √©chantillon produits, cat√©gories li√©es, informations techniques et statistiques.',
  })
  @ApiParam({
    name: 'slug',
    description:
      'Slug de la cat√©gorie (ex: filtre-a-huile-7, plaquette-frein-12)',
    example: 'filtre-a-huile-7',
  })
  @ApiResponse({
    status: 200,
    description: 'Donn√©es de la page cat√©gorie r√©cup√©r√©es avec succ√®s',
  })
  @ApiResponse({
    status: 404,
    description: 'Cat√©gorie non trouv√©e',
  })
  @ApiResponse({
    status: 500,
    description: 'Erreur serveur lors de la r√©cup√©ration des donn√©es',
  })
  async getCategoryPageData(@Param('slug') slug: string) {
    this.logger.log(`üîç [GET] /api/categories/${slug}`);

    try {
      // Validation basique du slug
      if (!slug || slug.length < 2) {
        throw new HttpException(
          'Slug de cat√©gorie invalide',
          HttpStatus.BAD_REQUEST,
        );
      }

      // R√©cup√©rer les donn√©es compl√®tes de la cat√©gorie
      const categoryData = await this.categoryService.getCategoryFullData(slug);

      this.logger.log(
        `‚úÖ Donn√©es cat√©gorie "${categoryData.name}" r√©cup√©r√©es avec succ√®s`,
      );

      return {
        success: true,
        data: categoryData,
        message: `Donn√©es cat√©gorie "${categoryData.name}" r√©cup√©r√©es avec succ√®s`,
        meta: {
          timestamp: new Date().toISOString(),
          slug: slug,
          categoryId: categoryData.id,
          productsCount: categoryData.stats.totalProducts,
        },
      };
    } catch (error: any) {
      this.logger.error(`‚ùå Erreur r√©cup√©ration cat√©gorie ${slug}:`, error);

      // Gestion sp√©cifique des erreurs 404
      if (error.status === 404 || error.message?.includes('non trouv√©e')) {
        throw new HttpException(
          `Cat√©gorie '${slug}' non trouv√©e`,
          HttpStatus.NOT_FOUND,
        );
      }

      // Gestion des autres erreurs
      throw new HttpException(
        `Erreur lors de la r√©cup√©ration de la cat√©gorie "${slug}"`,
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üîç GET /api/categories/:slug/full - R√©cup√®re TOUTES les donn√©es d'une page cat√©gorie avec contenu √©tendu
   */
  @Get(':slug/full')
  @ApiOperation({
    summary: "R√©cup√©rer les donn√©es compl√®tes d'une page cat√©gorie avec contenu √©tendu",
    description: 'Inclut les donn√©es de base plus articles blog, motorisations populaires, √©quipementiers, etc.',
  })
  @ApiParam({
    name: 'slug',
    description: 'Slug unique de la cat√©gorie',
    example: 'filtre-a-huile',
  })
  @ApiResponse({
    status: 200,
    description: 'Donn√©es compl√®tes de la cat√©gorie r√©cup√©r√©es avec succ√®s',
  })
  @ApiResponse({
    status: 404,
    description: 'Cat√©gorie non trouv√©e',
  })
  @ApiResponse({
    status: 500,
    description: 'Erreur serveur lors de la r√©cup√©ration des donn√©es',
  })
  async getCategoryFullData(@Param('slug') slug: string) {
    this.logger.log(`üîç [GET] /api/categories/${slug}/full`);

    try {
      // Validation basique du slug
      if (!slug || slug.length < 2) {
        throw new HttpException(
          'Slug de cat√©gorie invalide',
          HttpStatus.BAD_REQUEST,
        );
      }

      // R√©cup√©rer les donn√©es compl√®tes de la cat√©gorie avec contenu √©tendu
      const categoryData = await this.categoryService.getCategoryFullData(slug);

      this.logger.log(
        `‚úÖ Donn√©es compl√®tes cat√©gorie "${categoryData.name}" r√©cup√©r√©es avec succ√®s`,
      );

      return {
        success: true,
        data: categoryData,
        message: `Donn√©es compl√®tes cat√©gorie "${categoryData.name}" r√©cup√©r√©es avec succ√®s`,
        meta: {
          timestamp: new Date().toISOString(),
          slug: slug,
          categoryId: categoryData.id,
          productsCount: categoryData.stats.totalProducts,
          hasExtendedContent: {
            blogArticle: !!categoryData.blogArticle,
            relatedCategories: categoryData.relatedCategories.length,
            popularMotorizations: categoryData.popularMotorizations.length,
            equipmentiers: categoryData.equipmentiers.length,
            technicalInfo: categoryData.technicalInfo.length,
          },
        },
      };
    } catch (error: any) {
      this.logger.error(`‚ùå Erreur r√©cup√©ration compl√®te cat√©gorie ${slug}:`, error);

      // Gestion sp√©cifique des erreurs 404
      if (error.status === 404 || error.message?.includes('non trouv√©e')) {
        throw new HttpException(
          `Cat√©gorie '${slug}' non trouv√©e`,
          HttpStatus.NOT_FOUND,
        );
      }

      // Autres erreurs serveur
      throw new HttpException(
        `Erreur lors de la r√©cup√©ration de la cat√©gorie: ${error.message}`,
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üîç GET /api/categories/:slug/info - R√©cup√®re uniquement les infos de base d'une cat√©gorie
   */
  @Get(':slug/info')
  @ApiOperation({
    summary: "R√©cup√©rer les informations de base d'une cat√©gorie",
    description:
      "Endpoint l√©ger pour r√©cup√©rer uniquement les informations essentielles d'une cat√©gorie (nom, description, image, etc.)",
  })
  @ApiParam({
    name: 'slug',
    description: 'Slug de la cat√©gorie',
    example: 'filtre-a-huile-7',
  })
  async getCategoryInfo(@Param('slug') slug: string) {
    this.logger.log(`üîç [GET] /api/categories/${slug}/info`);

    try {
      // R√©cup√©rer les donn√©es compl√®tes mais ne retourner que les infos de base
      const categoryData = await this.categoryService.getCategoryPageData(slug);

      return {
        success: true,
        data: {
          category: categoryData.category,
          stats: categoryData.stats,
        },
        message: `Informations de base pour "${categoryData.category.name}" r√©cup√©r√©es`,
      };
    } catch (error: any) {
      this.logger.error(
        `‚ùå Erreur r√©cup√©ration infos cat√©gorie ${slug}:`,
        error,
      );

      if (error.status === 404 || error.message?.includes('non trouv√©e')) {
        throw new HttpException(
          `Cat√©gorie '${slug}' non trouv√©e`,
          HttpStatus.NOT_FOUND,
        );
      }

      throw new HttpException(
        `Erreur lors de la r√©cup√©ration des infos: ${error.message}`,
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üõçÔ∏è GET /api/categories/:slug/products - R√©cup√®re les produits d'une cat√©gorie avec pagination
   */
  @Get(':slug/products')
  @ApiOperation({
    summary: "R√©cup√©rer les produits d'une cat√©gorie avec pagination",
    description:
      "Endpoint pour la liste pagin√©e des produits d'une cat√©gorie sp√©cifique",
  })
  @ApiParam({
    name: 'slug',
    description: 'Slug de la cat√©gorie',
    example: 'filtre-a-huile-7',
  })
  async getCategoryProducts(@Param('slug') slug: string) {
    this.logger.log(`üîç [GET] /api/categories/${slug}/products`);

    try {
      // Pour l'instant, utiliser l'√©chantillon de produits
      // TODO: Impl√©menter la pagination compl√®te dans le service
      const categoryData = await this.categoryService.getCategoryPageData(slug);

      return {
        success: true,
        data: {
          products: categoryData.productsSample,
          category: {
            id: categoryData.category.id,
            name: categoryData.category.name,
            slug: categoryData.category.slug,
          },
          pagination: {
            total: categoryData.stats.totalProducts,
            page: 1,
            limit: categoryData.productsSample.length,
            hasMore:
              categoryData.stats.totalProducts >
              categoryData.productsSample.length,
          },
        },
        message: `Produits de la cat√©gorie "${categoryData.category.name}" r√©cup√©r√©s`,
      };
    } catch (error: any) {
      this.logger.error(
        `‚ùå Erreur r√©cup√©ration produits cat√©gorie ${slug}:`,
        error,
      );

      if (error.status === 404 || error.message?.includes('non trouv√©e')) {
        throw new HttpException(
          `Cat√©gorie '${slug}' non trouv√©e`,
          HttpStatus.NOT_FOUND,
        );
      }

      throw new HttpException(
        `Erreur lors de la r√©cup√©ration des produits: ${error.message}`,
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * üè• GET /api/categories/health - Endpoint de sant√© pour v√©rifier l'API
   */
  @Get('health')
  @ApiOperation({
    summary: "V√©rification de sant√© de l'API cat√©gories",
    description:
      "Endpoint simple pour v√©rifier que l'API cat√©gories fonctionne correctement",
  })
  async healthCheck() {
    this.logger.log('üè• [GET] /api/categories/health');

    return {
      success: true,
      message: 'API Categories est op√©rationnelle',
      data: {
        status: 'healthy',
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        endpoints: [
          'GET /api/categories/:slug - Page cat√©gorie compl√®te',
          'GET /api/categories/:slug/info - Infos de base',
          'GET /api/categories/:slug/products - Produits avec pagination',
          "GET /api/categories/health - Sant√© de l'API",
        ],
      },
    };
  }
}