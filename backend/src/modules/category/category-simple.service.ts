/**
 * üóÇÔ∏è SERVICE CATEGORY SIMPLIFI√â - UTILISE PRODUCTSERVICE EXISTANT
 */

import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { ProductsService } from '../products/products.service';
import { CategoryContentServiceReal, CategoryFullContent } from './category-content-real.service';

// Interface pour les donn√©es de ProductsService.getGammeById()
interface GammeData {
  id: string;
  name: string;
  alias: string;
  image: string;
  is_active: boolean;
  is_top: boolean;
  source: string;
  sort_order: number;
}

export interface CategoryPageData {
  id: number;
  name: string;
  slug: string;
  description?: string;
  image?: string;
  metaTitle?: string;
  metaDescription?: string;
  subcategories: CategoryPageData[];
  totalProducts: number;
  stats: {
    totalProducts: number;
    totalBrands: number;
    averagePrice?: number;
  };
}

@Injectable()
export class CategorySimpleService {
  private readonly logger = new Logger(CategorySimpleService.name);

  constructor(
    private readonly productsService: ProductsService,
    private readonly categoryContentService: CategoryContentServiceReal,
  ) {}

  /**
   * üéØ M√âTHODE PRINCIPALE - R√©cup√®re les donn√©es compl√®tes d'une cat√©gorie
   * Utilise ProductsService (qui fonctionne) + CategoryContentService (contenu enrichi)
   */
  async getCategoryFullData(
    categorySlug: string,
  ): Promise<CategoryPageData & CategoryFullContent> {
    this.logger.log(
      `üîç R√©cup√©ration compl√®te des donn√©es pour la cat√©gorie: ${categorySlug}`,
    );

    try {
      // 1. R√©cup√©rer l'ID de la gamme depuis le slug
      const gammeId = await this.getGammeIdBySlug(categorySlug);

      // 2. Utiliser ProductsService pour r√©cup√©rer les donn√©es de base (FONCTIONNE ‚úÖ)
      const gammeData = (await this.productsService.getGammeById(
        gammeId.toString(),
      )) as GammeData;

      if (!gammeData) {
        throw new NotFoundException(`Cat√©gorie introuvable: ${categorySlug}`);
      }

      // 3. R√©cup√©rer le contenu enrichi via CategoryContentService
      // Note: Les IDs peuvent ne pas correspondre - utilisons des donn√©es par d√©faut pour l'instant
      const fullContent =
        await this.categoryContentService.getCategoryFullContent(
          parseInt(gammeData.id), // pg_id
          1, // mf_id par d√©faut
          categorySlug,
        );

      // 4. Construire la r√©ponse finale combin√©e
      const result = {
        // Donn√©es de base depuis ProductsService (structure correcte)
        id: parseInt(gammeData.id),
        name: gammeData.name,
        slug: categorySlug,
        description: `D√©couvrez notre gamme de ${gammeData.name}`,
        image: gammeData.image,
        metaTitle: `${gammeData.name} - Pi√®ces auto de qualit√©`,
        metaDescription: `Trouvez les meilleurs ${gammeData.name} pour votre v√©hicule`,
        subcategories: [], // √Ä impl√©menter si n√©cessaire
        totalProducts: 0, // √Ä calculer si n√©cessaire
        stats: {
          totalProducts: 0,
          totalBrands: 0,
          averagePrice: undefined,
        },
        // Contenu enrichi depuis CategoryContentService
        ...fullContent,
      };

      this.logger.log(
        `‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s pour ${gammeData.name}`,
      );
      return result;
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur r√©cup√©ration cat√©gorie ${categorySlug}:`,
        error,
      );
      throw error;
    }
  }

  /**
   * üîç R√©cup√®re l'ID de la gamme √† partir du slug (REQU√äTE DB DYNAMIQUE)
   */
  private async getGammeIdBySlug(slug: string): Promise<number> {
    try {
      this.logger.log(`üîç Recherche dynamique slug: ${slug}`);

      const gammeId = await this.productsService.getGammeIdBySlug(slug);

      if (!gammeId) {
        this.logger.warn(`‚ùå Slug non trouv√©: ${slug}`);
        throw new NotFoundException(`Slug de cat√©gorie non trouv√©: ${slug}`);
      }

      this.logger.log(`‚úÖ Slug ${slug} ‚Üí ID ${gammeId}`);
      return gammeId;
    } catch (error) {
      this.logger.error(`‚ùå Erreur recherche slug ${slug}:`, error);
      throw new NotFoundException(`Slug de cat√©gorie non trouv√©: ${slug}`);
    }
  }
}
