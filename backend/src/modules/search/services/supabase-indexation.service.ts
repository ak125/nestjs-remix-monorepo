import { Injectable, Logger } from '@nestjs/common';
import { SupabaseBaseService } from '../../../database/services/supabase-base.service';
import { VehicleNamingService } from './vehicle-naming.service';

/**
 * üìä SERVICE INDEXATION DONN√âES R√âELLES SUPABASE
 *
 * Importe les v√©hicules et produits depuis les vraies tables Supabase :
 * - auto_marque (117 marques avec logos)
 * - auto_modele (5,745 mod√®les avec p√©riodes)
 * - auto_type (48,918 types/motorisations avec sp√©cifications)
 * - pieces (pour les produits)
 */
@Injectable()
export class SupabaseIndexationService extends SupabaseBaseService {
  protected readonly logger = new Logger(SupabaseIndexationService.name);

  constructor(private readonly vehicleNamingService?: VehicleNamingService) {
    super();
  }

  /**
   * üöó R√©cup√©rer TOUS les v√©hicules r√©els avec noms complets
   *
   * NOUVELLE VERSION : Utilise le VehicleNamingService pour construire
   * des noms comme "AUDI A3 II 2.0 TDI 140 ch de 2005 √† 2008"
   */
  async getAllVehiclesFromSupabase(limit: number = 1000, offset: number = 0) {
    try {
      this.logger.log(
        `üîç R√©cup√©ration v√©hicules avec noms complets - Limit: ${limit}, Offset: ${offset}`,
      );

      // Si le service de nommage est disponible, utiliser la m√©thode avanc√©e
      if (this.vehicleNamingService) {
        const vehiclesWithNames =
          await this.vehicleNamingService.getVehiclesWithFullNames(limit);

        this.logger.log(
          `‚úÖ R√©cup√©r√©s ${vehiclesWithNames.length} v√©hicules avec noms complets`,
        );
        return vehiclesWithNames;
      }

      // Sinon, fallback sur l'ancienne m√©thode
      this.logger.warn(
        '‚ö†Ô∏è VehicleNamingService non disponible, utilisation m√©thode basique',
      );

      const { data: vehicles, error } = await this.client
        .from('auto_type')
        .select(
          `
          type_id,
          type_name,
          type_modele_id,
          type_marque_id,
          type_fuel,
          type_power_ps,
          type_year_from,
          type_year_to
        `,
        )
        .eq('type_display', '1')
        .range(offset, offset + limit - 1);

      if (error) {
        this.logger.error('‚ùå Erreur r√©cup√©ration v√©hicules:', error);
        throw error;
      }

      // Transformation basique
      const basicVehicles =
        vehicles?.map((vehicle) => ({
          id: `vehicle_${vehicle.type_id}`,
          type: 'vehicle',
          typeId: vehicle.type_id,
          name: vehicle.type_name,
          displayName: `${vehicle.type_name} (${vehicle.type_fuel})`,
          fullName: `UNKNOWN UNKNOWN ${vehicle.type_name}`,
          motorisation: vehicle.type_name,
          searchTerms: [vehicle.type_name, vehicle.type_fuel].filter(Boolean),
          isActive: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        })) || [];

      return basicVehicles;

      if (error) {
        this.logger.error('‚ùå Erreur r√©cup√©ration v√©hicules:', error);
        throw error;
      }

      this.logger.log(
        `‚úÖ R√©cup√©r√© ${vehicles?.length || 0} v√©hicules depuis Supabase`,
      );

      // Transformer les donn√©es pour Meilisearch avec toutes les informations
      const transformedVehicles =
        vehicles?.map((vehicle: any) => {
          const marque = vehicle.auto_modele?.auto_marque;
          const modele = vehicle.auto_modele;

          return {
            id: `vehicle_${vehicle.type_id}`,
            type: 'vehicle',
            typeId: vehicle.type_id,

            // Informations du v√©hicule
            name: vehicle.type_name,
            displayName: vehicle.type_name,
            fullName: `${marque?.marque_name} ${modele?.modele_name} ${vehicle.type_name}`,

            // Informations moteur
            motorisation: vehicle.type_name,
            engineCode: vehicle.type_code_moteur || vehicle.type_engine,
            engineName: vehicle.type_nom_moteur,
            fuel: vehicle.type_fuel,
            power: vehicle.type_power,

            // Informations marque
            brandId: marque?.marque_id,
            brandName: marque?.marque_name,
            brandCode: marque?.marque_alias,
            brandCountry: marque?.marque_country,

            // Informations mod√®le
            modelId: modele?.modele_id,
            modelName: modele?.modele_name,
            modelAlias: modele?.modele_alias,
            modelFullName: modele?.modele_ful_name,

            // P√©riode de fabrication
            yearFrom: vehicle.type_year_from || vehicle.type_pf_deb,
            yearTo: vehicle.type_year_to || vehicle.type_pf_fin,

            // M√©tadonn√©es pour recherche
            searchTerms: [
              marque?.marque_name,
              modele?.modele_name,
              modele?.modele_ful_name,
              vehicle.type_name,
              vehicle.type_nom_moteur,
              vehicle.type_code_moteur,
              vehicle.type_engine,
            ].filter(Boolean),

            // Donn√©es d'indexation
            isActive: vehicle.type_display === 1,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
          };
        }) || [];

      return {
        success: true,
        data: transformedVehicles,
        count: transformedVehicles.length,
        totalInQuery: vehicles?.length || 0,
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur getAllVehiclesFromSupabase:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue',
        data: [],
        count: 0,
      };
    }
  }

  /**
   * üîß R√©cup√©rer TOUS les produits r√©els avec filtres inclus
   * MODIFI√â : Prioriser les filtres en les r√©cup√©rant s√©par√©ment
   */
  async getAllProductsFromSupabase(limit: number = 1000, offset: number = 0) {
    try {
      this.logger.log(
        `üîç R√©cup√©ration produits Supabase avec filtres - Limit: ${limit}, Offset: ${offset}`,
      );

      // 1. R√©cup√©rer d'abord tous les filtres (priorit√©)
      const { data: filters, error: filtersError } = await this.client
        .from('pieces')
        .select(
          `
          piece_id,
          piece_name,
          piece_ref,
          piece_des,
          piece_display,
          piece_has_img,
          piece_has_oem,
          piece_year
        `,
        )
        .ilike('piece_name', '%filtre%')
        .not('piece_name', 'is', null)
        .not('piece_name', 'eq', '')
        .order('piece_name')
        .limit(Math.min(200, limit)); // Max 200 filtres

      // 2. R√©cup√©rer les produits actifs normaux
      const remainingLimit = Math.max(0, limit - (filters?.length || 0));
      let activeProducts: any[] = [];
      
      if (remainingLimit > 0) {
        const { data: products, error: productsError } = await this.client
          .from('pieces')
          .select(
            `
            piece_id,
            piece_name,
            piece_ref,
            piece_des,
            piece_display,
            piece_has_img,
            piece_has_oem,
            piece_year
          `,
          )
          .eq('piece_display', true)
          .not('piece_name', 'is', null)
          .not('piece_name', 'eq', '')
          .not('piece_name', 'ilike', '%filtre%') // Exclure les filtres d√©j√† r√©cup√©r√©s
          .order('piece_name')
          .range(offset, offset + remainingLimit - 1);

        if (productsError) {
          this.logger.error('‚ùå Erreur r√©cup√©ration produits actifs:', productsError);
        } else {
          activeProducts = products || [];
        }
      }

      // 3. Combiner filtres + produits actifs
      const allProducts = [...(filters || []), ...activeProducts];

      if (filtersError && !filters) {
        this.logger.error('‚ùå Erreur r√©cup√©ration filtres:', filtersError);
        throw filtersError;
      }

      this.logger.log(
        `‚úÖ R√©cup√©r√© ${allProducts.length} produits depuis Supabase (${filters?.length || 0} filtres + ${activeProducts.length} actifs)`,
      );

      // Transformer les donn√©es pour Meilisearch
      const transformedProducts =
        allProducts?.map((product: any) => {
          // üè≠ D√©terminer l'√©quipementier bas√© sur la r√©f√©rence
          const brand = this.extractBrandFromReference(product.piece_ref || '');
          
          return {
            id: `product_${product.piece_id}`,
            type: 'product',
            productId: product.piece_id,
            name: product.piece_name,
            reference: product.piece_ref,
            description: product.piece_des,

            // üè≠ Informations √©quipementier
            brand: brand,
            brandId: product.piece_pm_id || null,
            productGroupId: product.piece_pg_id || null,
            articleGroupId: product.piece_ga_id || null,

            // M√©tadonn√©es pour recherche
            searchTerms: [
              product.piece_name,
              product.piece_ref,
              product.piece_des,
              brand, // Ajouter la marque aux termes de recherche
            ].filter(Boolean),

            // Donn√©es d'indexation
            isActive: product.piece_display === true,
            isFilter: product.piece_name?.toLowerCase().includes('filtre') || false,
            
            // M√©tadonn√©es suppl√©mentaires
            year: product.piece_year || null,
            weight: product.piece_weight_kgm || 0,
            hasImage: product.piece_has_img || false,
            hasOEM: product.piece_has_oem || false,
            quantity: product.piece_qty_sale || 1,
            
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
          };
        }) || [];

      return {
        success: true,
        data: transformedProducts,
        count: transformedProducts.length,
        totalInQuery: allProducts?.length || 0,
        filterCount: filters?.length || 0,
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur getAllProductsFromSupabase:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue',
        data: [],
        count: 0,
        totalInQuery: 0,
      };
    }
  }

  /**
   * üìä Obtenir les statistiques des tables Supabase
   */
  async getSupabaseStats() {
    try {
      this.logger.log('üìä R√©cup√©ration statistiques Supabase...');

      const [marquesResult, modelesResult, typesResult, piecesResult] =
        await Promise.all([
          // Marques actives
          this.client
            .from('auto_marque')
            .select('marque_id', { count: 'exact' })
            .eq('marque_display', 1),

          // Mod√®les actifs
          this.client
            .from('auto_modele')
            .select('modele_id', { count: 'exact' })
            .eq('modele_display', 1),

          // Types actifs
          this.client
            .from('auto_type')
            .select('type_id', { count: 'exact' })
            .eq('type_display', 1),

          // Pi√®ces actives
          this.client
            .from('pieces')
            .select('piece_id', { count: 'exact' })
            .eq('piece_display', true),
        ]);

      const stats = {
        marques: {
          total: marquesResult.count || 0,
          error: marquesResult.error?.message,
        },
        modeles: {
          total: modelesResult.count || 0,
          error: modelesResult.error?.message,
        },
        types: {
          total: typesResult.count || 0,
          error: typesResult.error?.message,
        },
        pieces: {
          total: piecesResult.count || 0,
          error: piecesResult.error?.message,
        },
      };

      this.logger.log(
        'üìä Statistiques Supabase:',
        JSON.stringify(stats, null, 2),
      );
      return stats;
    } catch (error) {
      this.logger.error('‚ùå Erreur getSupabaseStats:', error);
      return {
        error: error instanceof Error ? error.message : 'Erreur inconnue',
      };
    }
  }

  /**
   * üîç Test de connexion et r√©cup√©ration d'√©chantillons
   */
  async testSupabaseConnection() {
    try {
      this.logger.log('üß™ Test connexion Supabase...');

      // Test 1: R√©cup√©rer 3 marques (simple, pas de relation)
      const { data: sampleBrands, error: brandsError } = await this.client
        .from('auto_marque')
        .select('marque_id, marque_name, marque_logo, marque_display')
        .eq('marque_display', 1)
        .limit(3);

      if (brandsError) {
        this.logger.error('‚ùå Erreur test marques:', brandsError);
        return { success: false, error: brandsError.message };
      }

      // Test 2: R√©cup√©rer 3 types simples (sans jointure)
      const { data: sampleTypes, error: typesError } = await this.client
        .from('auto_type')
        .select('type_id, type_name, type_display, type_modele_id')
        .eq('type_display', 1)
        .limit(3);

      if (typesError) {
        this.logger.error('‚ùå Erreur test types:', typesError);
        return { success: false, error: typesError.message };
      }

      // Test 3: R√©cup√©rer 3 produits simples
      const { data: sampleProducts, error: productsError } = await this.client
        .from('pieces')
        .select('piece_id, piece_name, piece_ref, piece_display')
        .eq('piece_display', true)
        .not('piece_name', 'is', null)
        .limit(3);

      if (productsError) {
        this.logger.error('‚ùå Erreur test produits:', productsError);
        return { success: false, error: productsError.message };
      }

      this.logger.log(
        '‚úÖ Test connexion Supabase r√©ussi - Donn√©es r√©cup√©r√©es avec succ√®s',
      );
      return {
        success: true,
        samples: {
          brands: sampleBrands,
          types: sampleTypes,
          products: sampleProducts,
        },
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur testSupabaseConnection:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue',
      };
    }
  }

  /**
   * üîß Acc√®s au client Supabase pour les services externes
   * Permet aux autres services d'acc√©der au client configur√©
   */
  getClient() {
    return this.client;
  }

  /**
   * üè≠ Extraire l'√©quipementier/marque depuis la r√©f√©rence de pi√®ce
   */
  private extractBrandFromReference(reference: string): string {
    if (!reference) return 'INCONNU';
    
    const ref = reference.toLowerCase().replace(/\s+/g, '');
    
    // Patterns de r√©f√©rences courantes
    const brandPatterns = {
      'bosch': ['0986', '0 986', 'bosch'],
      'mann-filter': ['mann', 'hum', 'w'],
      'mahle': ['lx', 'ox', 'kx', 'mahle'],
      'fram': ['fram', 'ca'],
      'purflux': ['purflux', 'a', 'l'],
      'knecht': ['knecht', 'lx'],
      'champion': ['champion', 'cof'],
      'febi': ['febi', '49', '48'],
      'sachs': ['sachs', 'zf'],
      'valeo': ['valeo', '585'],
    };
    
    // Recherche de correspondance
    for (const [brand, patterns] of Object.entries(brandPatterns)) {
      if (patterns.some(pattern => ref.includes(pattern))) {
        return brand.toUpperCase();
      }
    }
    
    // Si aucune correspondance, retourner le d√©but de la r√©f√©rence
    const firstPart = reference.split(' ')[0] || reference.substring(0, 4);
    return firstPart.toUpperCase();
  }
}
