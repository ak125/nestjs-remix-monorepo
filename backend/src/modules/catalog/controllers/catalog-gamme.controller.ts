// üìÅ backend/src/modules/catalog/controllers/catalog-gamme.controller.ts
// üîß Contr√¥leur pour les gammes de catalogue (table catalog_gamme)

import { Controller, Get, Param, Logger } from '@nestjs/common';
import { CatalogGammeService } from '../services/catalog-gamme.service';

@Controller('api/catalog/gammes')
export class CatalogGammeController {
  private readonly logger = new Logger(CatalogGammeController.name);

  constructor(private readonly catalogGammeService: CatalogGammeService) {}

  /**
   * üîß GET /api/catalog/gammes/all - Toutes les gammes
   */
  @Get('all')
  async getAllGammes() {
    this.logger.log('üîß [GET] /api/catalog/gammes/all');
    
    try {
      const gammes = await this.catalogGammeService.getAllGammes();
      
      this.logger.log(`‚úÖ Retour ${gammes.length} gammes`);
      return {
        success: true,
        data: gammes,
        count: gammes.length,
        message: `${gammes.length} gammes r√©cup√©r√©es avec succ√®s`
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur r√©cup√©ration toutes gammes:', error);
      return {
        success: false,
        data: [],
        count: 0,
        error: error.message
      };
    }
  }

  /**
   * üîß GET /api/catalog/gammes/by-manufacturer - Gammes group√©es par fabricant
   */
  @Get('by-manufacturer')
  async getGammesByManufacturer() {
    this.logger.log('üîß [GET] /api/catalog/gammes/by-manufacturer');
    
    try {
      const grouped = await this.catalogGammeService.getGammesByManufacturer();
      
      this.logger.log(`‚úÖ Gammes group√©es par ${Object.keys(grouped).length} fabricants`);
      return {
        success: true,
        data: grouped,
        manufacturers_count: Object.keys(grouped).length,
        total_gammes: Object.values(grouped).reduce((sum, gammes) => sum + gammes.length, 0),
        message: 'Gammes group√©es par fabricant r√©cup√©r√©es avec succ√®s'
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur groupement gammes:', error);
      return {
        success: false,
        data: {},
        manufacturers_count: 0,
        total_gammes: 0,
        error: error.message
      };
    }
  }

  /**
   * üîß GET /api/catalog/gammes/display - Gammes format√©es pour affichage
   */
  @Get('display')
  async getGammesForDisplay() {
    this.logger.log('üîß [GET] /api/catalog/gammes/display');
    
    try {
      const displayData = await this.catalogGammeService.getGammesForDisplay();
      
      this.logger.log(`‚úÖ Donn√©es d'affichage pr√©par√©es: ${displayData.stats.total_gammes} gammes`);
      return {
        success: true,
        ...displayData,
        message: 'Donn√©es d\'affichage pr√©par√©es avec succ√®s'
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur pr√©paration affichage:', error);
      return {
        success: false,
        manufacturers: {},
        stats: { total_gammes: 0, total_manufacturers: 0 },
        error: error.message
      };
    }
  }

  /**
   * üîß GET /api/catalog/gammes/:id - Gamme sp√©cifique par ID
   */
  @Get(':id')
  async getGammeById(@Param('id') id: string) {
    this.logger.log(`üîß [GET] /api/catalog/gammes/${id}`);
    
    try {
      const gamme = await this.catalogGammeService.getGammeById(id);
      
      if (!gamme) {
        this.logger.warn(`‚ö†Ô∏è Gamme ${id} non trouv√©e`);
        return {
          success: false,
          data: null,
          message: `Gamme ${id} non trouv√©e`
        };
      }

      this.logger.log(`‚úÖ Gamme ${id} trouv√©e`);
      return {
        success: true,
        data: gamme,
        message: `Gamme ${id} r√©cup√©r√©e avec succ√®s`
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur r√©cup√©ration gamme ${id}:`, error);
      return {
        success: false,
        data: null,
        error: error.message
      };
    }
  }

  /**
   * üîß GET /api/catalog/gammes/manufacturer/:manufacturerId - Gammes d'un fabricant
   */
  @Get('manufacturer/:manufacturerId')
  async getGammesByManufacturerId(@Param('manufacturerId') manufacturerId: string) {
    this.logger.log(`üîß [GET] /api/catalog/gammes/manufacturer/${manufacturerId}`);
    
    try {
      const gammes = await this.catalogGammeService.getGammesByManufacturerId(manufacturerId);
      
      this.logger.log(`‚úÖ ${gammes.length} gammes trouv√©es pour fabricant ${manufacturerId}`);
      return {
        success: true,
        data: gammes,
        count: gammes.length,
        manufacturer_id: manufacturerId,
        message: `${gammes.length} gammes r√©cup√©r√©es pour le fabricant ${manufacturerId}`
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur gammes fabricant ${manufacturerId}:`, error);
      return {
        success: false,
        data: [],
        count: 0,
        manufacturer_id: manufacturerId,
        error: error.message
      };
    }
  }
}