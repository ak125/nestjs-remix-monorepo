// üìÅ backend/src/modules/catalog/controllers/family-gamme-hierarchy.controller.ts
// üèóÔ∏è Contr√¥leur pour la hi√©rarchie Familles ‚Üí Gammes (sous-cat√©gories)

import { Controller, Get, Param, Logger } from '@nestjs/common';
import { FamilyGammeHierarchyService } from '../services/family-gamme-hierarchy.service';
import { CatalogFamilyService } from '../services/catalog-family.service';

@Controller('api/catalog/hierarchy')
export class FamilyGammeHierarchyController {
  private readonly logger = new Logger(FamilyGammeHierarchyController.name);

  constructor(
    private readonly hierarchyService: FamilyGammeHierarchyService,
    private readonly catalogFamilyService: CatalogFamilyService,
  ) {}

  /**
   * üìã GET /api/catalog/hierarchy/php-logic - Reproduction exacte de la logique PHP index.php
   * Pour le composant SimpleCatalogFamilies du frontend
   */
  @Get('php-logic')
  async getCatalogFamiliesPhpLogic() {
    this.logger.log(
      'üìã [GET] /api/catalog/hierarchy/php-logic - Logique PHP index.php',
    );

    try {
      const result =
        await this.catalogFamilyService.getCatalogFamiliesPhpLogic();

      this.logger.log(
        `‚úÖ Logique PHP: ${result.totalFamilies} familles avec gammes r√©cup√©r√©es`,
      );
      return result;
    } catch (error: any) {
      this.logger.error('‚ùå Erreur logique PHP:', error);
      return {
        success: false,
        families: [],
        totalFamilies: 0,
        message:
          error?.message ||
          'Erreur lors de la r√©cup√©ration des familles (logique PHP)',
      };
    }
  }

  /**
   * üèóÔ∏è GET /api/catalog/hierarchy/full - Hi√©rarchie compl√®te Familles ‚Üí Gammes
   */
  @Get('full')
  async getFullHierarchy() {
    this.logger.log('üèóÔ∏è [GET] /api/catalog/hierarchy/full');

    try {
      const result = await this.hierarchyService.getFamilyGammeHierarchy();

      this.logger.log(
        `‚úÖ Hi√©rarchie compl√®te: ${result.stats.total_families} familles, ${result.stats.total_gammes} gammes`,
      );
      return {
        success: true,
        ...result,
        message: `Hi√©rarchie avec ${result.stats.total_families} familles et ${result.stats.total_gammes} gammes r√©cup√©r√©e`,
      };
    } catch (error: any) {
      this.logger.error('‚ùå Erreur hi√©rarchie compl√®te:', error);
      return {
        success: false,
        hierarchy: {},
        stats: {
          total_families: 0,
          total_gammes: 0,
          total_manufacturers: 0,
          families_with_gammes: 0,
        },
        error: error?.message || 'Erreur inconnue',
      };
    }
  }

  /**
   * üèóÔ∏è GET /api/catalog/hierarchy/families-with-subcategories - Familles avec sous-cat√©gories
   */
  @Get('families-with-subcategories')
  async getFamiliesWithSubcategories() {
    this.logger.log(
      'üèóÔ∏è [GET] /api/catalog/hierarchy/families-with-subcategories',
    );

    try {
      const families =
        await this.hierarchyService.getFamiliesWithSubcategories();

      this.logger.log(
        `‚úÖ ${families.length} familles avec sous-cat√©gories r√©cup√©r√©es`,
      );
      return {
        success: true,
        data: families,
        count: families.length,
        message: `${families.length} familles avec sous-cat√©gories r√©cup√©r√©es avec succ√®s`,
      };
    } catch (error: any) {
      this.logger.error('‚ùå Erreur familles avec sous-cat√©gories:', error);
      return {
        success: false,
        data: [],
        count: 0,
        error: error?.message || 'Erreur inconnue',
      };
    }
  }

  /**
   * üèóÔ∏è GET /api/catalog/hierarchy/stats - Statistiques de la hi√©rarchie
   */
  @Get('stats')
  async getHierarchyStats() {
    this.logger.log('üèóÔ∏è [GET] /api/catalog/hierarchy/stats');

    try {
      const { stats } = await this.hierarchyService.getFamilyGammeHierarchy();

      this.logger.log(
        `‚úÖ Statistiques calcul√©es: ${stats.total_families} familles, ${stats.total_gammes} gammes`,
      );
      return {
        success: true,
        data: stats,
        message: 'Statistiques de la hi√©rarchie r√©cup√©r√©es avec succ√®s',
      };
    } catch (error: any) {
      this.logger.error('‚ùå Erreur statistiques hi√©rarchie:', error);
      return {
        success: false,
        data: {
          total_families: 0,
          total_gammes: 0,
          total_manufacturers: 0,
          families_with_gammes: 0,
        },
        error: error?.message || 'Erreur inconnue',
      };
    }
  }

  /**
   * üèóÔ∏è GET /api/catalog/hierarchy/family/:id - Famille avec ses gammes
   */
  @Get('family/:id')
  async getFamilyWithGammes(@Param('id') familyId: string) {
    this.logger.log(`üèóÔ∏è [GET] /api/catalog/hierarchy/family/${familyId}`);

    try {
      const family =
        await this.hierarchyService.getFamilyWithGammesById(familyId);

      if (!family) {
        this.logger.warn(`‚ö†Ô∏è Famille ${familyId} non trouv√©e`);
        return {
          success: false,
          data: null,
          message: `Famille ${familyId} non trouv√©e`,
        };
      }

      this.logger.log(
        `‚úÖ Famille ${familyId} avec ${family.gammes_count} gammes r√©cup√©r√©e`,
      );
      return {
        success: true,
        data: family,
        message: `Famille ${familyId} avec ${family.gammes_count} gammes r√©cup√©r√©e avec succ√®s`,
      };
    } catch (error: any) {
      this.logger.error(`‚ùå Erreur famille ${familyId} avec gammes:`, error);
      return {
        success: false,
        data: null,
        error: error?.message || 'Erreur inconnue',
      };
    }
  }

  /**
   * üèóÔ∏è GET /api/catalog/hierarchy/homepage - Donn√©es optimis√©es pour homepage
   */
  @Get('homepage')
  async getHomepageData() {
    this.logger.log('üèóÔ∏è [GET] /api/catalog/hierarchy/homepage');

    try {
      // Un seul appel pour obtenir √† la fois les familles et les stats
      const { hierarchy, stats } =
        await this.hierarchyService.getFamilyGammeHierarchy();

      // Transformer l'objet hierarchy en tableau de familles pour le frontend
      const homepageFamilies = Object.values(hierarchy)
        .map((item) => ({
          ...item.family,
          gammes: item.gammes,
          gammes_count: item.stats.total_gammes,
        }))
        .filter((family) => family.gammes_count > 0) // Seulement les familles avec gammes
        .sort((a, b) => {
          const sortA = parseInt(a.mf_sort?.toString() || '0') || 0;
          const sortB = parseInt(b.mf_sort?.toString() || '0') || 0;
          return sortA - sortB;
        });

      this.logger.log(
        `‚úÖ Donn√©es homepage: ${homepageFamilies.length} familles affich√©es`,
      );
      return {
        success: true,
        families: homepageFamilies,
        stats,
        display_count: homepageFamilies.length,
        total_available: Object.keys(hierarchy).length,
        message: `Donn√©es homepage avec ${homepageFamilies.length} familles affich√©es`,
      };
    } catch (error: any) {
      this.logger.error('‚ùå Erreur donn√©es homepage:', error);
      return {
        success: false,
        families: [],
        stats: {
          total_families: 0,
          total_gammes: 0,
          total_manufacturers: 0,
          families_with_gammes: 0,
        },
        display_count: 0,
        total_available: 0,
        error: error?.message || 'Erreur inconnue',
      };
    }
  }
}
