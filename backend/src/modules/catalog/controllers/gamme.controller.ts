import { 
  Controller, 
  Get, 
  Param, 
  Query, 
  Logger,
  ParseIntPipe,
  ParseBoolPipe,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { 
  ApiTags, 
  ApiOperation, 
  ApiResponse, 
  ApiParam, 
  ApiQuery,
} from '@nestjs/swagger';
import { GammeService } from '../services/gamme.service';

/**
 * üéØ GAMME CONTROLLER - API Gammes de Produits
 * 
 * ‚úÖ ENDPOINTS DISPONIBLES :
 * - GET /api/catalog/gammes - Toutes les gammes avec filtres
 * - GET /api/catalog/gammes/featured - Gammes mises en avant
 * - GET /api/catalog/gammes/popular - Gammes populaires  
 * - GET /api/catalog/gammes/homepage-data - Donn√©es pour page d'accueil
 * - GET /api/catalog/gammes/:id - D√©tails d'une gamme
 * 
 * üîß FEATURES :
 * - Documentation Swagger automatique
 * - Validation des param√®tres
 * - Cache intelligent transparent
 * - Gestion d'erreurs structur√©e
 * - Logging complet
 */
@ApiTags('Catalog - Gammes')
@Controller('api/catalog/gammes')
export class GammeController {
  private readonly logger = new Logger(GammeController.name);

  constructor(private readonly gammeService: GammeService) {}

  /**
   * üè† GET /api/catalog/gammes/homepage-data
   * Donn√©es compl√®tes optimis√©es pour la page d'accueil
   */
  @Get('homepage-data')
  @ApiOperation({ 
    summary: 'Donn√©es gammes pour page d\'accueil',
    description: 'Retourne les gammes featured, populaires et statistiques optimis√©es pour la homepage'
  })
  @ApiQuery({ 
    name: 'includeFeatured', 
    required: false, 
    type: Boolean, 
    description: 'Inclure les gammes mises en avant' 
  })
  @ApiQuery({ 
    name: 'includeStats', 
    required: false, 
    type: Boolean, 
    description: 'Inclure les statistiques' 
  })
  @ApiQuery({ 
    name: 'maxCategories', 
    required: false, 
    type: Number, 
    description: 'Nombre maximum de cat√©gories (1-50)' 
  })
  @ApiResponse({ status: 200, description: 'Donn√©es homepage r√©cup√©r√©es avec succ√®s' })
  @ApiResponse({ status: 400, description: 'Param√®tres invalides' })
  async getHomepageData(
    @Query('includeFeatured', new ParseBoolPipe({ optional: true })) includeFeatured?: boolean,
    @Query('includeStats', new ParseBoolPipe({ optional: true })) includeStats?: boolean,
    @Query('maxCategories', new ParseIntPipe({ optional: true })) maxCategories?: number,
  ) {
    try {
      this.logger.log(`üè† Requ√™te homepage gammes - Featured: ${includeFeatured}, Stats: ${includeStats}, Max: ${maxCategories}`);
      
      const result = await this.gammeService.getHomepageGammeData({
        includeFeatured,
        includeStats,
        maxCategories,
      });
      
      this.logger.log(`‚úÖ Homepage gammes: ${result.featured_gammes.length} featured, ${result.popular_gammes.length} populaires`);
      return result;
      
    } catch (error) {
      this.logger.error('‚ùå Erreur homepage gammes:', error);
      throw new HttpException(
        'Erreur lors de la r√©cup√©ration des donn√©es homepage',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üåü GET /api/catalog/gammes/featured
   * Gammes mises en avant
   */
  @Get('featured')
  @ApiOperation({ 
    summary: 'Gammes mises en avant',
    description: 'Retourne les gammes configur√©es comme featured dans l\'admin'
  })
  @ApiQuery({ 
    name: 'limit', 
    required: false, 
    type: Number, 
    description: 'Nombre maximum de gammes (1-50)' 
  })
  @ApiResponse({ status: 200, description: 'Gammes featured r√©cup√©r√©es avec succ√®s' })
  async getFeaturedGammes(
    @Query('limit', new ParseIntPipe({ optional: true })) limit?: number,
  ) {
    try {
      this.logger.log(`üåü Requ√™te gammes featured - Limite: ${limit || 12}`);
      
      const result = await this.gammeService.getFeaturedGammes(limit);
      
      this.logger.log(`‚úÖ ${result.length} gammes featured r√©cup√©r√©es`);
      return {
        success: true,
        data: result,
        count: result.length,
        message: 'Gammes featured r√©cup√©r√©es avec succ√®s'
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erreur gammes featured:', error);
      throw new HttpException(
        'Erreur lors de la r√©cup√©ration des gammes featured',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üî• GET /api/catalog/gammes/popular
   * Gammes populaires bas√©es sur les commandes
   */
  @Get('popular')
  @ApiOperation({ 
    summary: 'Gammes populaires',
    description: 'Retourne les gammes les plus command√©es (bas√© sur les statistiques de vente)'
  })
  @ApiQuery({ 
    name: 'limit', 
    required: false, 
    type: Number, 
    description: 'Nombre maximum de gammes (1-20)' 
  })
  @ApiResponse({ status: 200, description: 'Gammes populaires r√©cup√©r√©es avec succ√®s' })
  async getPopularGammes(
    @Query('limit', new ParseIntPipe({ optional: true })) limit?: number,
  ) {
    try {
      this.logger.log(`üî• Requ√™te gammes populaires - Limite: ${limit || 8}`);
      
      const result = await this.gammeService.getPopularGammes(limit);
      
      this.logger.log(`‚úÖ ${result.length} gammes populaires r√©cup√©r√©es`);
      return {
        success: true,
        data: result,
        count: result.length,
        message: 'Gammes populaires r√©cup√©r√©es avec succ√®s'
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erreur gammes populaires:', error);
      throw new HttpException(
        'Erreur lors de la r√©cup√©ration des gammes populaires',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üìã GET /api/catalog/gammes
   * Toutes les gammes avec filtres avanc√©s
   */
  @Get()
  @ApiOperation({ 
    summary: 'Toutes les gammes avec filtres',
    description: 'Retourne toutes les gammes actives avec possibilit√© de filtrage'
  })
  @ApiQuery({ 
    name: 'featured', 
    required: false, 
    type: Boolean, 
    description: 'Filtrer par statut featured' 
  })
  @ApiQuery({ 
    name: 'brandId', 
    required: false, 
    type: Number, 
    description: 'Filtrer par marque' 
  })
  @ApiQuery({ 
    name: 'categoryFilter', 
    required: false, 
    type: String, 
    description: 'Filtrer par nom de cat√©gorie (recherche partielle)' 
  })
  @ApiQuery({ 
    name: 'limit', 
    required: false, 
    type: Number, 
    description: 'Nombre maximum de r√©sultats (1-100)' 
  })
  @ApiQuery({ 
    name: 'offset', 
    required: false, 
    type: Number, 
    description: 'D√©calage pour la pagination' 
  })
  @ApiResponse({ status: 200, description: 'Gammes r√©cup√©r√©es avec succ√®s' })
  @ApiResponse({ status: 400, description: 'Param√®tres de filtre invalides' })
  async getAllGammes(
    @Query('featured', new ParseBoolPipe({ optional: true })) featured?: boolean,
    @Query('brandId', new ParseIntPipe({ optional: true })) brandId?: number,
    @Query('categoryFilter') categoryFilter?: string,
    @Query('limit', new ParseIntPipe({ optional: true })) limit?: number,
    @Query('offset', new ParseIntPipe({ optional: true })) offset?: number,
  ) {
    try {
      this.logger.log(`üìã Requ√™te toutes gammes - Featured: ${featured}, Brand: ${brandId}, Filter: ${categoryFilter}`);
      
      const result = await this.gammeService.getAllGammes({
        featured,
        brandId,
        categoryFilter,
        limit,
        offset,
      });
      
      this.logger.log(`‚úÖ ${result.length} gammes r√©cup√©r√©es avec filtres`);
      return {
        success: true,
        data: result,
        count: result.length,
        filters: {
          featured,
          brandId,
          categoryFilter,
          limit: limit || 20,
          offset: offset || 0
        },
        message: 'Gammes r√©cup√©r√©es avec succ√®s'
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erreur r√©cup√©ration gammes:', error);
      throw new HttpException(
        'Erreur lors de la r√©cup√©ration des gammes',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üîç GET /api/catalog/gammes/:id
   * D√©tails complets d'une gamme
   */
  @Get(':id')
  @ApiOperation({ 
    summary: 'D√©tails d\'une gamme',
    description: 'Retourne les d√©tails complets d\'une gamme avec produits populaires optionnels'
  })
  @ApiParam({ 
    name: 'id', 
    type: Number, 
    description: 'ID unique de la gamme' 
  })
  @ApiQuery({ 
    name: 'includeProducts', 
    required: false, 
    type: Boolean, 
    description: 'Inclure les produits populaires de la gamme' 
  })
  @ApiResponse({ status: 200, description: 'D√©tails de la gamme r√©cup√©r√©s avec succ√®s' })
  @ApiResponse({ status: 404, description: 'Gamme non trouv√©e' })
  async getGammeById(
    @Param('id', ParseIntPipe) gammeId: number,
    @Query('includeProducts', new ParseBoolPipe({ optional: true })) includeProducts?: boolean,
  ) {
    try {
      this.logger.log(`üîç Requ√™te d√©tails gamme ID: ${gammeId} - Produits: ${includeProducts}`);
      
      const result = await this.gammeService.getGammeById(gammeId, includeProducts);
      
      this.logger.log(`‚úÖ Gamme ${gammeId} r√©cup√©r√©e: ${result.gamme_name}`);
      return {
        success: true,
        data: result,
        message: `D√©tails de la gamme ${result.gamme_name} r√©cup√©r√©s avec succ√®s`
      };
      
    } catch (error) {
      this.logger.error(`‚ùå Erreur d√©tails gamme ${gammeId}:`, error);
      
      if (error.status === 404) {
        throw error; // Re-throw NotFoundException
      }
      
      throw new HttpException(
        'Erreur lors de la r√©cup√©ration des d√©tails de la gamme',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  // ========================================
  // üÜï NOUVELLES M√âTHODES AM√âLIOR√âES
  // ========================================

  /**
   * üîç GET /api/catalog/gammes/:code/with-pieces
   * Gamme sp√©cifique avec ses pi√®ces d√©tach√©es
   */
  @Get(':code/with-pieces')
  @ApiOperation({ 
    summary: 'R√©cup√®re une gamme avec ses pi√®ces',
    description: 'Retourne les d√©tails d\'une gamme avec la liste de ses pi√®ces d√©tach√©es associ√©es'
  })
  @ApiParam({ 
    name: 'code', 
    description: 'Code (alias) de la gamme',
    example: 'freinage'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Gamme avec pi√®ces r√©cup√©r√©e avec succ√®s'
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Gamme non trouv√©e'
  })
  async getGammeWithPieces(
    @Param('code') gammeCode: string,
  ) {
    try {
      this.logger.log(`üîç API - R√©cup√©ration gamme avec pi√®ces: ${gammeCode}`);
      
      const gamme = await this.gammeService.getGammeWithPieces(gammeCode);
      
      if (!gamme) {
        throw new HttpException(
          `Gamme ${gammeCode} non trouv√©e`,
          HttpStatus.NOT_FOUND
        );
      }

      this.logger.log(`‚úÖ API - Gamme ${gammeCode} avec ${gamme.pieces?.length || 0} pi√®ces`);
      return {
        success: true,
        data: gamme,
        metadata: {
          piece_count: gamme.pieces?.length || 0,
          retrieved_at: new Date().toISOString()
        }
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur API gamme avec pi√®ces ${gammeCode}:`, error);
      if (error instanceof HttpException) {
        throw error;
      }
      throw new HttpException(
        'Erreur lors de la r√©cup√©ration de la gamme',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üèóÔ∏è GET /api/catalog/gammes/hierarchy
   * Arborescence compl√®te des gammes
   */
  @Get('hierarchy')
  @ApiOperation({ 
    summary: 'R√©cup√®re l\'arborescence des gammes',
    description: 'Retourne la hi√©rarchie compl√®te des gammes avec leurs sous-cat√©gories'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Hi√©rarchie r√©cup√©r√©e avec succ√®s'
  })
  async getGammeHierarchy() {
    try {
      this.logger.log('üèóÔ∏è API - R√©cup√©ration hi√©rarchie gammes');
      
      const hierarchy = await this.gammeService.getGammeHierarchy();
      
      this.logger.log(`‚úÖ API - Hi√©rarchie: ${hierarchy.length} gammes principales`);
      return {
        success: true,
        data: hierarchy,
        metadata: {
          total_categories: hierarchy.length,
          total_subcategories: hierarchy.reduce((sum, cat) => sum + (cat.children?.length || 0), 0),
          retrieved_at: new Date().toISOString()
        }
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur API hi√©rarchie gammes:', error);
      throw new HttpException(
        'Erreur lors de la r√©cup√©ration de la hi√©rarchie',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üéØ GET /api/catalog/gammes/:code/metadata
   * M√©tadonn√©es SEO pour une gamme
   */
  @Get(':code/metadata')
  @ApiOperation({ 
    summary: 'R√©cup√®re les m√©tadonn√©es SEO d\'une gamme',
    description: 'Retourne title, description, mots-cl√©s et breadcrumbs pour le SEO'
  })
  @ApiParam({ 
    name: 'code', 
    description: 'Code (alias) de la gamme',
    example: 'freinage'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'M√©tadonn√©es r√©cup√©r√©es avec succ√®s'
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Gamme non trouv√©e'
  })
  async getGammeMetadata(
    @Param('code') gammeCode: string,
  ) {
    try {
      this.logger.log(`üéØ API - R√©cup√©ration m√©tadonn√©es SEO: ${gammeCode}`);
      
      const metadata = await this.gammeService.getGammeMetadata(gammeCode);
      
      if (!metadata) {
        throw new HttpException(
          `M√©tadonn√©es pour gamme ${gammeCode} non trouv√©es`,
          HttpStatus.NOT_FOUND
        );
      }

      this.logger.log(`‚úÖ API - M√©tadonn√©es SEO g√©n√©r√©es pour ${gammeCode}`);
      return {
        success: true,
        data: metadata,
        metadata: {
          breadcrumb_count: metadata.breadcrumbs.length,
          keyword_count: metadata.keywords.length,
          generated_at: new Date().toISOString()
        }
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur API m√©tadonn√©es ${gammeCode}:`, error);
      if (error instanceof HttpException) {
        throw error;
      }
      throw new HttpException(
        'Erreur lors de la r√©cup√©ration des m√©tadonn√©es',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  /**
   * üîç GET /api/catalog/gammes/search
   * Recherche de gammes avec texte libre
   */
  @Get('search')
  @ApiOperation({ 
    summary: 'Recherche de gammes',
    description: 'Recherche textuelle dans les noms, descriptions et codes de gammes'
  })
  @ApiQuery({ 
    name: 'q', 
    description: 'Terme de recherche',
    example: 'frein'
  })
  @ApiQuery({ 
    name: 'limit', 
    description: 'Nombre maximum de r√©sultats',
    required: false,
    example: 20
  })
  @ApiQuery({ 
    name: 'includeProducts', 
    description: 'Inclure les produits dans les r√©sultats',
    required: false,
    example: false
  })
  @ApiQuery({ 
    name: 'onlyFeatured', 
    description: 'Uniquement les gammes mises en avant',
    required: false,
    example: false
  })
  @ApiResponse({ 
    status: 200, 
    description: 'R√©sultats de recherche'
  })
  async searchGammes(
    @Query('q') query: string,
    @Query('limit', new ParseIntPipe({ optional: true })) limit?: number,
    @Query('includeProducts', new ParseBoolPipe({ optional: true })) includeProducts?: boolean,
    @Query('onlyFeatured', new ParseBoolPipe({ optional: true })) onlyFeatured?: boolean,
  ) {
    try {
      if (!query || query.trim().length < 2) {
        throw new HttpException(
          'Le terme de recherche doit contenir au moins 2 caract√®res',
          HttpStatus.BAD_REQUEST
        );
      }

      this.logger.log(`üîç API - Recherche gammes: "${query}"`);
      
      const results = await this.gammeService.searchGammes(query, {
        limit: limit || 20,
        includeProducts: includeProducts || false,
        onlyFeatured: onlyFeatured || false
      });
      
      this.logger.log(`‚úÖ API - Recherche "${query}": ${results.length} r√©sultats`);
      return {
        success: true,
        data: results,
        metadata: {
          query: query.trim(),
          result_count: results.length,
          filters: {
            limit: limit || 20,
            include_products: includeProducts || false,
            only_featured: onlyFeatured || false
          },
          searched_at: new Date().toISOString()
        }
      };
    } catch (error) {
      this.logger.error(`‚ùå Erreur API recherche gammes "${query}":`, error);
      if (error instanceof HttpException) {
        throw error;
      }
      throw new HttpException(
        'Erreur lors de la recherche de gammes',
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }
}