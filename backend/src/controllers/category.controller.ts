/**
 * üéÆ CONTR√îLEUR CAT√âGORIE
 * 
 * API REST pour r√©cup√©rer les donn√©es des pages de cat√©gorie
 */

import { Controller, Get, Param, Query, UseInterceptors, CacheInterceptor } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery } from '@nestjs/swagger';
import { CategoryDataService } from '../services/category-data.service';
import { CategoryPageData, CategoryQueryParams, CategoryQuerySchema } from '../types/category-data.types';
import { ValidationPipe } from '../common/validation/validation.pipe';
import { ZodValidationPipe } from '../common/validation/zod-validation.pipe';

@ApiTags('üóÇÔ∏è Cat√©gories')
@Controller('api/categories')
@UseInterceptors(CacheInterceptor) // Cache des r√©ponses
export class CategoryController {
  
  constructor(
    private readonly categoryDataService: CategoryDataService
  ) {}

  /**
   * üéØ ENDPOINT PRINCIPAL - R√©cup√®re toutes les donn√©es d'une page de cat√©gorie
   */
  @Get(':slug/page-data')
  @ApiOperation({ 
    summary: 'R√©cup√®re les donn√©es compl√®tes d\'une page de cat√©gorie',
    description: 'Retourne toutes les informations n√©cessaires pour afficher une page de cat√©gorie : infos de base, s√©lecteur v√©hicule, articles, motorisations populaires, etc.'
  })
  @ApiParam({ 
    name: 'slug', 
    description: 'Slug de la cat√©gorie (ex: filtre-a-huile-7)',
    example: 'filtre-a-huile-7'
  })
  @ApiQuery({ 
    name: 'includeRelated', 
    required: false, 
    type: Boolean,
    description: 'Inclure les cat√©gories li√©es et l\'article',
    example: true
  })
  @ApiQuery({ 
    name: 'includeMotorizations', 
    required: false, 
    type: Boolean,
    description: 'Inclure les motorisations populaires',
    example: true
  })
  @ApiQuery({ 
    name: 'includeEquipmentiers', 
    required: false, 
    type: Boolean,
    description: 'Inclure les √©quipementiers',
    example: true
  })
  @ApiQuery({ 
    name: 'includeTechnicalInfo', 
    required: false, 
    type: Boolean,
    description: 'Inclure les informations techniques',
    example: true
  })
  @ApiQuery({ 
    name: 'includeStats', 
    required: false, 
    type: Boolean,
    description: 'Inclure les statistiques de la cat√©gorie',
    example: false
  })
  @ApiQuery({ 
    name: 'limit', 
    required: false, 
    type: Number,
    description: 'Nombre max de motorisations √† retourner',
    example: 20
  })
  @ApiQuery({ 
    name: 'offset', 
    required: false, 
    type: Number,
    description: 'D√©calage pour la pagination des motorisations',
    example: 0
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Donn√©es de la cat√©gorie r√©cup√©r√©es avec succ√®s',
    type: 'object' // TODO: Ajouter le DTO Swagger quand disponible
  })
  @ApiResponse({ 
    status: 404, 
    description: 'Cat√©gorie non trouv√©e'
  })
  async getCategoryPageData(
    @Param('slug') slug: string,
    @Query(new ZodValidationPipe(CategoryQuerySchema.omit({ slug: true }))) 
    queryParams: Omit<CategoryQueryParams, 'slug'>
  ): Promise<CategoryPageData> {
    
    console.log(`üéØ Requ√™te donn√©es cat√©gorie: ${slug}`, queryParams);
    
    // Fusion du slug avec les param√®tres de query
    const fullParams: CategoryQueryParams = {
      slug,
      ...queryParams
    };
    
    const data = await this.categoryDataService.getCategoryPageData(fullParams);
    
    console.log(`‚úÖ Donn√©es r√©cup√©r√©es pour ${data.category.name} - ${data.popularMotorizations.length} motorisations`);
    
    return data;
  }

  /**
   * üîç ENDPOINT RAPIDE - R√©cup√®re seulement les infos de base
   */
  @Get(':slug/basic')
  @ApiOperation({ 
    summary: 'R√©cup√®re uniquement les informations de base d\'une cat√©gorie',
    description: 'Version all√©g√©e pour les aper√ßus et la navigation'
  })
  @ApiParam({ 
    name: 'slug', 
    description: 'Slug de la cat√©gorie',
    example: 'filtre-a-huile-7'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'Informations de base r√©cup√©r√©es'
  })
  async getCategoryBasic(@Param('slug') slug: string) {
    const params: CategoryQueryParams = {
      slug,
      includeRelated: false,
      includeMotorizations: false,
      includeEquipementiers: false,
      includeTechnicalInfo: false,
      includeStats: false,
      limit: 0,
      offset: 0
    };
    
    const data = await this.categoryDataService.getCategoryPageData(params);
    
    return {
      category: data.category,
      vehicleSelector: data.vehicleSelector,
      seo: data.seo
    };
  }

  /**
   * üöó ENDPOINT V√âHICULES - R√©cup√®re seulement les donn√©es du s√©lecteur
   */
  @Get(':slug/vehicles')
  @ApiOperation({ 
    summary: 'R√©cup√®re les donn√©es du s√©lecteur de v√©hicules pour une cat√©gorie',
    description: 'Retourne les marques et options disponibles pour le s√©lecteur'
  })
  @ApiParam({ 
    name: 'slug', 
    description: 'Slug de la cat√©gorie',
    example: 'filtre-a-huile-7'
  })
  async getCategoryVehicles(@Param('slug') slug: string) {
    const params: CategoryQueryParams = {
      slug,
      includeRelated: false,
      includeMotorizations: false,
      includeEquipementiers: false,
      includeTechnicalInfo: false,
      includeStats: false,
      limit: 0,
      offset: 0
    };
    
    const data = await this.categoryDataService.getCategoryPageData(params);
    
    return {
      vehicleSelector: data.vehicleSelector,
      categoryName: data.category.name
    };
  }

  /**
   * üîß ENDPOINT MOTORISATIONS - R√©cup√®re seulement les motorisations populaires
   */
  @Get(':slug/motorizations')
  @ApiOperation({ 
    summary: 'R√©cup√®re les motorisations populaires pour une cat√©gorie',
    description: 'Permet de paginer les motorisations pour l\'affichage dynamique'
  })
  @ApiParam({ 
    name: 'slug', 
    description: 'Slug de la cat√©gorie',
    example: 'filtre-a-huile-7'
  })
  @ApiQuery({ 
    name: 'limit', 
    required: false, 
    type: Number,
    description: 'Nombre de motorisations √† retourner',
    example: 10
  })
  @ApiQuery({ 
    name: 'offset', 
    required: false, 
    type: Number,
    description: 'D√©calage pour la pagination',
    example: 0
  })
  async getCategoryMotorizations(
    @Param('slug') slug: string,
    @Query('limit') limit: number = 20,
    @Query('offset') offset: number = 0
  ) {
    const params: CategoryQueryParams = {
      slug,
      includeRelated: false,
      includeMotorizations: true,
      includeEquipementiers: false,
      includeTechnicalInfo: false,
      includeStats: false,
      limit,
      offset
    };
    
    const data = await this.categoryDataService.getCategoryPageData(params);
    
    return {
      motorizations: data.popularMotorizations,
      categoryName: data.category.name,
      pagination: {
        limit,
        offset,
        hasMore: data.popularMotorizations.length === limit // Simple check
      }
    };
  }

  /**
   * üìä ENDPOINT STATISTIQUES - R√©cup√®re les stats d'une cat√©gorie
   */
  @Get(':slug/stats')
  @ApiOperation({ 
    summary: 'R√©cup√®re les statistiques d\'une cat√©gorie',
    description: 'Nombre de produits, marques, v√©hicules, prix moyen, etc.'
  })
  @ApiParam({ 
    name: 'slug', 
    description: 'Slug de la cat√©gorie',
    example: 'filtre-a-huile-7'
  })
  async getCategoryStats(@Param('slug') slug: string) {
    const params: CategoryQueryParams = {
      slug,
      includeRelated: false,
      includeMotorizations: false,
      includeEquipementiers: false,
      includeTechnicalInfo: false,
      includeStats: true,
      limit: 0,
      offset: 0
    };
    
    const data = await this.categoryDataService.getCategoryPageData(params);
    
    return {
      stats: data.stats,
      categoryName: data.category.name,
      lastUpdated: new Date().toISOString()
    };
  }
}