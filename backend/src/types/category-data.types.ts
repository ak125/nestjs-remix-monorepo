/**
 * üóÇÔ∏è STRUCTURE DES DONN√âES CAT√âGORIE
 * 
 * D√©finit toutes les donn√©es √† r√©cup√©rer dynamiquement pour une page de cat√©gorie
 */

import { z } from 'zod';

// üîß Sch√©ma pour les informations de base de la cat√©gorie
export const CategoryBaseSchema = z.object({
  id: z.string(),
  name: z.string(), // "Filtre √† huile"
  slug: z.string(), // "filtre-a-huile"
  description: z.string(), // Description principale
  shortDescription: z.string().optional(),
  seoTitle: z.string(),
  seoDescription: z.string(),
  image: z.string().url().optional(),
  parentId: z.string().optional(), // Pour les sous-cat√©gories
});

// üöó Sch√©ma pour le s√©lecteur de v√©hicule
export const VehicleSelectorSchema = z.object({
  brands: z.array(z.object({
    id: z.string(),
    name: z.string(), // "RENAULT", "PEUGEOT"
    logo: z.string().url().optional(),
  })),
  searchByTypemine: z.boolean().default(true),
});

// üì∞ Sch√©ma pour l'article/blog associ√©
export const CategoryArticleSchema = z.object({
  id: z.string(),
  title: z.string(), // "Comment changer un filtre √† huile"
  slug: z.string(),
  publishedAt: z.string(), // "07/06/2021"
  content: z.string(), // Contenu HTML de l'article
  excerpt: z.string(), // Extrait pour l'aper√ßu
  readTime: z.number().optional(), // Temps de lecture en minutes
});

// üîó Sch√©ma pour les cat√©gories li√©es
export const RelatedCategorySchema = z.object({
  id: z.string(),
  name: z.string(), // "Filtre √† air", "Filtre √† carburant"
  slug: z.string(),
  description: z.string(),
  image: z.string().url().optional(),
  advice: z.string(), // Conseil Automecanik
});

// üöó Sch√©ma pour les motorisations populaires
export const PopularMotorizationSchema = z.object({
  id: z.string(),
  brand: z.string(), // "RENAULT"
  model: z.string(), // "CLIO III"
  engine: z.string(), // "1.5 dCi"
  power: z.number(), // 86
  unit: z.string().default('ch'), // "ch"
  pricePrefix: z.string(), // "prix bas", "tarif r√©duit"
  symptoms: z.array(z.string()), // ["changer si encrass√©", "contr√¥ler si t√©moin allum√©"]
  description: z.string(), // Description technique
  productCount: z.number().optional(), // Nombre de produits disponibles
});

// üè≠ Sch√©ma pour les √©quipementiers
export const EquipmentierSchema = z.object({
  id: z.string(),
  name: z.string(), // "BOSCH", "CHAMPION"
  logo: z.string().url().optional(),
  description: z.string(), // Description des produits de la marque
  qualityLevel: z.enum(['OEM', 'Premium', 'Standard']).optional(),
  technologies: z.array(z.string()).optional(), // Technologies sp√©ciales
});

// üìö Sch√©ma pour les informations techniques
export const TechnicalInfoSchema = z.object({
  id: z.string(),
  title: z.string(),
  content: z.string(),
  order: z.number(), // Pour l'ordre d'affichage
  isMainInfo: z.boolean().default(false), // Information principale
});

// üéØ Sch√©ma principal pour une page de cat√©gorie compl√®te
export const CategoryPageDataSchema = z.object({
  // Informations de base
  category: CategoryBaseSchema,
  
  // S√©lecteur de v√©hicule
  vehicleSelector: VehicleSelectorSchema,
  
  // Article/blog associ√©
  article: CategoryArticleSchema.optional(),
  
  // Cat√©gories li√©es (catalogue)
  relatedCategories: z.array(RelatedCategorySchema),
  
  // Motorisations populaires
  popularMotorizations: z.array(PopularMotorizationSchema),
  
  // √âquipementiers
  equipmentiers: z.array(EquipmentierSchema),
  
  // Informations techniques
  technicalInfo: z.array(TechnicalInfoSchema),
  
  // M√©tadonn√©es SEO
  seo: z.object({
    canonicalUrl: z.string().url(),
    breadcrumbs: z.array(z.object({
      name: z.string(),
      url: z.string(),
    })),
    alternateUrls: z.array(z.object({
      lang: z.string(),
      url: z.string(),
    })).optional(),
  }),
  
  // Statistiques et m√©triques
  stats: z.object({
    totalProducts: z.number(),
    totalBrands: z.number(),
    totalVehicles: z.number(),
    avgPrice: z.number().optional(),
    lastUpdated: z.string(),
  }).optional(),
});

// üìä Types TypeScript d√©riv√©s
export type CategoryBaseData = z.infer<typeof CategoryBaseSchema>;
export type VehicleSelectorData = z.infer<typeof VehicleSelectorSchema>;
export type CategoryArticleData = z.infer<typeof CategoryArticleSchema>;
export type RelatedCategoryData = z.infer<typeof RelatedCategorySchema>;
export type PopularMotorizationData = z.infer<typeof PopularMotorizationSchema>;
export type EquipmentierData = z.infer<typeof EquipmentierSchema>;
export type TechnicalInfoData = z.infer<typeof TechnicalInfoSchema>;
export type CategoryPageData = z.infer<typeof CategoryPageDataSchema>;

// üîç Sch√©mas pour les requ√™tes et filtres
export const CategoryQuerySchema = z.object({
  slug: z.string(),
  includeRelated: z.boolean().default(true),
  includeMotorizations: z.boolean().default(true),
  includeEquipmentiers: z.boolean().default(true),
  includeTechnicalInfo: z.boolean().default(true),
  includeStats: z.boolean().default(false),
  limit: z.number().min(1).max(100).default(20), // Pour paginer les motorisations
  offset: z.number().min(0).default(0),
});

export type CategoryQueryParams = z.infer<typeof CategoryQuerySchema>;