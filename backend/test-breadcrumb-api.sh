#!/bin/bash

# üß™ SCRIPT DE TEST CURL - API Breadcrumb & Metadata
# Test complet de toutes les fonctionnalit√©s impl√©ment√©es

echo "üß™ TESTS API BREADCRUMB & METADATA"
echo "=================================="
echo ""

BASE_URL="http://localhost:3000"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_test() {
    echo -e "${BLUE}Test $1:${NC} $2"
}

print_success() {
    echo -e "${GREEN}‚úÖ R√âUSSI:${NC} $1"
}

print_error() {
    echo -e "${RED}‚ùå √âCHEC:${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  PROBL√àME:${NC} $1"
}

# Test 1: R√©cup√©ration m√©tadonn√©es existantes
print_test "1" "R√©cup√©ration m√©tadonn√©es existantes"
response=$(curl -s -X GET "$BASE_URL/api/metadata/pieces/filtre-a-huile-7/audi-22/a3-ii-22031/2-0-tdi-19966.html" -H "Content-Type: application/json")
if echo "$response" | grep -q '"success":true'; then
    print_success "M√©tadonn√©es r√©cup√©r√©es"
    echo "   Titre trouv√©: $(echo "$response" | grep -o '"title":"[^"]*"' | head -1)"
else
    print_error "Erreur r√©cup√©ration m√©tadonn√©es"
fi
echo ""

# Test 2: Cr√©ation nouvelles m√©tadonn√©es
print_test "2" "Cr√©ation nouvelles m√©tadonn√©es"
response=$(curl -s -X POST "$BASE_URL/api/metadata/test-creation" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Test de cr√©ation - Pi√®ces auto",
    "description": "Description test pour validation API",
    "keywords": ["test", "creation", "api"],
    "h1": "Test Cr√©ation API",
    "robots": "index,follow"
  }')
if echo "$response" | grep -q '"success":true'; then
    print_success "M√©tadonn√©es cr√©√©es"
else
    print_error "Cr√©ation √©chou√©e - $(echo "$response" | grep -o '"statusCode":[0-9]*')"
fi
echo ""

# Test 3: Service breadcrumb (probl√©matique)
print_test "3" "Service breadcrumb - R√©cup√©ration"
response=$(curl -s -X GET "$BASE_URL/api/metadata/breadcrumb/pieces/test" -H "Content-Type: application/json")
if echo "$response" | grep -q '"breadcrumbs"'; then
    print_success "Breadcrumb r√©cup√©r√© au bon format"
elif echo "$response" | grep -q '"title"'; then
    print_warning "Service retourne des m√©tadonn√©es au lieu de breadcrumb"
else
    print_error "Erreur service breadcrumb"
fi
echo ""

# Test 4: G√©n√©ration automatique breadcrumb
print_test "4" "G√©n√©ration automatique breadcrumb"
response=$(curl -s -X GET "$BASE_URL/api/metadata/breadcrumb/generate?url=/pieces/freinage/disques" -H "Content-Type: application/json")
if echo "$response" | grep -q '"generate"'; then
    print_warning "G√©n√©ration retourne des m√©tadonn√©es par d√©faut"
else
    print_error "G√©n√©ration automatique non fonctionnelle"
fi
echo ""

# Test 5: Interface admin
print_test "5" "Interface admin - Liste breadcrumbs"
response=$(curl -s -X GET "$BASE_URL/admin/breadcrumbs" -H "Content-Type: application/json")
if echo "$response" | grep -q '"data"'; then
    print_success "Interface admin accessible"
elif echo "$response" | grep -q '"statusCode":404'; then
    print_error "Routes admin non trouv√©es"
else
    print_warning "Interface admin retourne des donn√©es inattendues"
fi
echo ""

# Test 6: Cr√©ation breadcrumb via admin
print_test "6" "Cr√©ation breadcrumb via interface admin"
response=$(curl -s -X POST "$BASE_URL/admin/breadcrumbs" \
  -H "Content-Type: application/json" \
  -d '{
    "url": "/test/admin/creation",
    "title": "Test Admin - Breadcrumb",
    "description": "Test cr√©ation via interface admin",
    "breadcrumbs": [
      {"label": "Accueil", "path": "/", "isClickable": true, "active": false},
      {"label": "Test", "path": "/test", "isClickable": true, "active": false},
      {"label": "Admin", "path": "/test/admin", "isClickable": true, "active": false},
      {"label": "Cr√©ation", "path": "/test/admin/creation", "isClickable": false, "active": true}
    ]
  }')
if echo "$response" | grep -q '"success":true'; then
    print_success "Breadcrumb cr√©√© via admin"
else
    print_error "Cr√©ation admin √©chou√©e"
fi
echo ""

# Test 7: Statistiques admin
print_test "7" "Statistiques interface admin"
response=$(curl -s -X GET "$BASE_URL/admin/breadcrumbs/stats/overview" -H "Content-Type: application/json")
if echo "$response" | grep -q '"total"'; then
    print_success "Statistiques r√©cup√©r√©es"
    echo "   Total: $(echo "$response" | grep -o '"total":[0-9]*' | cut -d':' -f2)"
else
    print_error "Statistiques non disponibles"
fi
echo ""

# Test 8: Pr√©visualisation breadcrumb
print_test "8" "Pr√©visualisation breadcrumb"
response=$(curl -s -X POST "$BASE_URL/admin/breadcrumbs/preview" \
  -H "Content-Type: application/json" \
  -d '{
    "url": "/preview/test",
    "title": "Test Pr√©visualisation",
    "breadcrumbs": [
      {"label": "Accueil", "path": "/", "isClickable": true, "active": false},
      {"label": "Pr√©visualisation", "path": "/preview/test", "isClickable": false, "active": true}
    ]
  }')
if echo "$response" | grep -q '"schemaOrg"'; then
    print_success "Pr√©visualisation g√©n√©r√©e avec Schema.org"
else
    print_error "Pr√©visualisation √©chou√©e"
fi
echo ""

# Test 9: V√©rification cache
print_test "9" "Performance cache - Double appel"
start_time=$(date +%s%N)
curl -s -X GET "$BASE_URL/api/metadata/pieces/filtre-a-huile-7/audi-22/a3-ii-22031/2-0-tdi-19966.html" > /dev/null
first_call=$(($(date +%s%N) - start_time))

start_time=$(date +%s%N)
curl -s -X GET "$BASE_URL/api/metadata/pieces/filtre-a-huile-7/audi-22/a3-ii-22031/2-0-tdi-19966.html" > /dev/null
second_call=$(($(date +%s%N) - start_time))

if [ $second_call -lt $first_call ]; then
    print_success "Cache fonctionnel (2√®me appel plus rapide)"
else
    print_warning "Cache peut-√™tre non optimal"
fi
echo ""

# Test 10: Nettoyage cache
print_test "10" "Nettoyage cache"
response=$(curl -s -X POST "$BASE_URL/api/metadata/breadcrumb/cache/clear" -H "Content-Type: application/json")
if echo "$response" | grep -q '"success"'; then
    print_success "Cache nettoy√©"
else
    print_warning "Nettoyage cache non confirm√©"
fi
echo ""

echo "=================================="
echo "üèÅ TESTS TERMIN√âS"
echo ""
echo "üìä R√âSUM√â DES PROBL√àMES IDENTIFI√âS:"
echo "1. Service breadcrumb retourne des m√©tadonn√©es au lieu de breadcrumbs"
echo "2. Routes POST pour m√©tadonn√©es non fonctionnelles"
echo "3. Interface admin non accessible ou mal configur√©e"
echo "4. G√©n√©ration automatique retourne des donn√©es par d√©faut"
echo ""
echo "‚úÖ POINTS POSITIFS:"
echo "1. R√©cup√©ration m√©tadonn√©es existantes fonctionne"
echo "2. Stockage de donn√©es dans la base r√©ussi"
echo "3. Structure API bien d√©finie"
echo "4. Cache Redis int√©gr√©"
echo ""
echo "üîß ACTIONS RECOMMAND√âES:"
echo "1. Corriger la logique du service breadcrumb"
echo "2. Ajouter les routes POST manquantes"
echo "3. D√©boguer l'interface admin"
echo "4. Impl√©menter la vraie g√©n√©ration automatique"