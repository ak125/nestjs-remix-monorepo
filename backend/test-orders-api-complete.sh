#!/bin/bash

# Script de test complet pour l'API Orders
# Test de toutes les fonctionnalit√©s avec curl

echo "üöÄ Tests complets de l'API Orders - Syst√®me de gestion des commandes"
echo "============================================================================="
echo ""

# Configuration
BASE_URL="http://localhost:3000"
API_BASE="$BASE_URL/api/orders"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    local test_name="$1"
    local status_code="$2"
    local expected="$3"
    
    echo -n "[$test_name] "
    if [ "$status_code" -eq "$expected" ]; then
        echo -e "${GREEN}‚úÖ PASS${NC} (Status: $status_code)"
    else
        echo -e "${RED}‚ùå FAIL${NC} (Status: $status_code, Expected: $expected)"
    fi
}

# Fonction pour tester une endpoint
test_endpoint() {
    local method="$1"
    local url="$2"
    local expected_status="$3"
    local description="$4"
    local data="$5"
    
    echo -e "${BLUE}üîç Test: $description${NC}"
    echo "   URL: $method $url"
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s -w "\n%{http_code}" "$url")
    elif [ "$method" = "POST" ]; then
        response=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d "$data" "$url")
    elif [ "$method" = "PUT" ]; then
        response=$(curl -s -w "\n%{http_code}" -X PUT \
            -H "Content-Type: application/json" \
            -d "$data" "$url")
    elif [ "$method" = "DELETE" ]; then
        response=$(curl -s -w "\n%{http_code}" -X DELETE "$url")
    fi
    
    # S√©parer le body et le status code
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | sed '$d')
    
    print_result "$description" "$http_code" "$expected_status"
    
    # Afficher un extrait du body si c'est un succ√®s
    if [ "$http_code" -eq "$expected_status" ] && [ ! -z "$body" ]; then
        echo "   üìÑ R√©ponse: $(echo "$body" | head -c 200)..."
    fi
    
    echo ""
    return $http_code
}

echo "üîß Configuration:"
echo "   Base URL: $BASE_URL"
echo "   API Base: $API_BASE"
echo ""

# Test 1: R√©cup√©ration des commandes avec pagination (par d√©faut)
echo -e "${YELLOW}üìã TESTS DE R√âCUP√âRATION DES COMMANDES${NC}"
echo "-------------------------------------------"

test_endpoint "GET" "$API_BASE" 200 "R√©cup√©ration des commandes (page 1, limit 10)"

# Test 2: Pagination personnalis√©e
test_endpoint "GET" "$API_BASE?page=2&limit=5" 200 "Pagination personnalis√©e (page 2, limit 5)"

# Test 3: Filtres par statut
test_endpoint "GET" "$API_BASE?status=1" 200 "Filtrage par statut (statut=1)"

# Test 4: Filtres par client
test_endpoint "GET" "$API_BASE?customerId=81561" 200 "Filtrage par client (customerId=81561)"

# Test 5: Filtres par date
test_endpoint "GET" "$API_BASE?dateFrom=2023-01-01&dateTo=2024-12-31" 200 "Filtrage par plage de dates"

# Test 6: Combinaison de filtres
test_endpoint "GET" "$API_BASE?page=1&limit=3&status=1&customerId=81561" 200 "Combinaison de filtres"

echo -e "${YELLOW}üîç TESTS DE R√âCUP√âRATION PAR ID${NC}"
echo "-----------------------------------"

# Test 7: R√©cup√©ration d'une commande par ID (nous devons d'abord r√©cup√©rer un ID valide)
echo -e "${BLUE}üîç Test: R√©cup√©ration d'une commande sp√©cifique${NC}"
echo "   R√©cup√©ration d'un ID de commande valide..."

# R√©cup√©rer un ID de commande valide
valid_order_id=$(curl -s "$API_BASE?limit=1" | grep -o '"ord_id":"[^"]*' | head -1 | cut -d'"' -f4)

if [ ! -z "$valid_order_id" ]; then
    echo "   ID trouv√©: $valid_order_id"
    test_endpoint "GET" "$API_BASE/$valid_order_id" 200 "R√©cup√©ration commande ID: $valid_order_id"
else
    echo -e "${RED}‚ùå Impossible de r√©cup√©rer un ID de commande valide${NC}"
fi

# Test 8: R√©cup√©ration d'une commande inexistante
test_endpoint "GET" "$API_BASE/INVALID_ORDER_ID" 404 "R√©cup√©ration commande inexistante"

echo -e "${YELLOW}üë§ TESTS DE R√âCUP√âRATION PAR CLIENT${NC}"
echo "--------------------------------------"

# Test 9: R√©cup√©ration des commandes par client
test_endpoint "GET" "$API_BASE/customer/81561" 200 "Commandes du client 81561"

# Test 10: Client inexistant
test_endpoint "GET" "$API_BASE/customer/999999" 200 "Commandes client inexistant"

echo -e "${YELLOW}üìä TESTS DE STATISTIQUES${NC}"
echo "----------------------------"

# Test 11: Statistiques par statut
test_endpoint "GET" "$API_BASE/stats/by-status" 200 "Statistiques par statut"

# Test 12: Statistiques g√©n√©rales
test_endpoint "GET" "$API_BASE/stats/general" 200 "Statistiques g√©n√©rales"

echo -e "${YELLOW}üè∑Ô∏è TESTS DE R√âCUP√âRATION DES STATUTS${NC}"
echo "--------------------------------------"

# Test 13: R√©cup√©ration des statuts de commande
test_endpoint "GET" "$API_BASE/statuses/orders" 200 "Statuts de commande"

# Test 14: R√©cup√©ration des statuts de ligne
test_endpoint "GET" "$API_BASE/statuses/lines" 200 "Statuts de ligne"

echo -e "${YELLOW}‚ûï TESTS DE CR√âATION DE COMMANDE${NC}"
echo "-----------------------------------"

# Test 15: Cr√©ation d'une nouvelle commande
new_order_data='{
    "customerId": "81561",
    "totalAmount": 125.50,
    "ord_total_ht": "104.58",
    "ord_total_ttc": "125.50",
    "ord_shipping_cost": "5.00",
    "ord_cba_id": "1",
    "ord_cda_id": "1"
}'

test_endpoint "POST" "$API_BASE" 201 "Cr√©ation nouvelle commande" "$new_order_data"

# R√©cup√©rer l'ID de la commande cr√©√©e pour les tests suivants
created_order_id=$(curl -s -X POST -H "Content-Type: application/json" -d "$new_order_data" "$API_BASE" | grep -o '"ord_id":"[^"]*' | cut -d'"' -f4)

echo -e "${YELLOW}‚úèÔ∏è TESTS DE MISE √Ä JOUR${NC}"
echo "----------------------------"

if [ ! -z "$created_order_id" ]; then
    echo "   Commande cr√©√©e avec ID: $created_order_id"
    
    # Test 16: Mise √† jour du statut de paiement
    payment_data='{"isPaid": true}'
    test_endpoint "PUT" "$API_BASE/$created_order_id/payment" 200 "Mise √† jour statut paiement" "$payment_data"
    
    # Test 17: Mise √† jour du statut de commande
    status_data='{"statusId": "2"}'
    test_endpoint "PUT" "$API_BASE/$created_order_id/status" 200 "Mise √† jour statut commande" "$status_data"
    
    # Test 18: Mise √† jour g√©n√©rale de la commande
    update_data='{"ord_total_ttc": "150.00", "ord_shipping_cost": "10.00"}'
    test_endpoint "PUT" "$API_BASE/$created_order_id" 200 "Mise √† jour g√©n√©rale commande" "$update_data"
    
else
    echo -e "${RED}‚ùå Impossible de cr√©er une commande pour les tests de mise √† jour${NC}"
fi

echo -e "${YELLOW}üóëÔ∏è TESTS DE SUPPRESSION${NC}"
echo "----------------------------"

if [ ! -z "$created_order_id" ]; then
    # Test 19: Suppression de la commande
    test_endpoint "DELETE" "$API_BASE/$created_order_id" 200 "Suppression commande"
    
    # Test 20: V√©rification que la commande a √©t√© supprim√©e
    test_endpoint "GET" "$API_BASE/$created_order_id" 404 "V√©rification suppression"
else
    echo -e "${RED}‚ùå Pas de commande √† supprimer${NC}"
fi

echo -e "${YELLOW}üîí TESTS D'ADMINISTRATION${NC}"
echo "------------------------------"

# Test 21: R√©cup√©ration avec relations compl√®tes (admin)
test_endpoint "GET" "$API_BASE/admin/all-relations?page=1&limit=2" 200 "Commandes avec relations compl√®tes"

if [ ! -z "$valid_order_id" ]; then
    # Test 22: Commande compl√®te par ID (admin)
    test_endpoint "GET" "$API_BASE/admin/$valid_order_id/complete" 200 "D√©tails complets commande"
fi

echo -e "${YELLOW}‚ùå TESTS D'ERREURS${NC}"
echo "-------------------"

# Test 23: M√©thode non autoris√©e
test_endpoint "PATCH" "$API_BASE" 405 "M√©thode non autoris√©e"

# Test 24: Donn√©es invalides pour cr√©ation
invalid_data='{"invalid": "data"}'
test_endpoint "POST" "$API_BASE" 400 "Donn√©es invalides pour cr√©ation" "$invalid_data"

# Test 25: Mise √† jour commande inexistante
update_data='{"ord_total_ttc": "200.00"}'
test_endpoint "PUT" "$API_BASE/INVALID_ID" 404 "Mise √† jour commande inexistante" "$update_data"

echo ""
echo "============================================================================="
echo -e "${GREEN}üéâ Tests termin√©s !${NC}"
echo ""
echo "üìã R√©sum√© des tests effectu√©s:"
echo "   ‚Ä¢ R√©cup√©ration des commandes avec pagination"
echo "   ‚Ä¢ Filtres par statut, client, et dates"
echo "   ‚Ä¢ R√©cup√©ration par ID"
echo "   ‚Ä¢ R√©cup√©ration par client"
echo "   ‚Ä¢ Statistiques et statuts"
echo "   ‚Ä¢ Cr√©ation de commande"
echo "   ‚Ä¢ Mise √† jour (paiement, statut, donn√©es)"
echo "   ‚Ä¢ Suppression"
echo "   ‚Ä¢ Fonctionnalit√©s d'administration"
echo "   ‚Ä¢ Gestion des erreurs"
echo ""
echo -e "${BLUE}üìä Base de donn√©es utilis√©e: 1417 commandes r√©elles${NC}"
echo -e "${BLUE}üóÉÔ∏è Tables int√©gr√©es: 7 tables avec relations compl√®tes${NC}"
echo "============================================================================="
