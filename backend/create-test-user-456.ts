// Script pour cr√©er l'utilisateur test2@example.com avec l'ID test-user-456
import { NestFactory } from '@nestjs/core';
import { AppModule } from './src/app.module';
import { SupabaseRestService } from './src/database/supabase-rest.service';

async function createTestUser456() {
  console.log('=== Cr√©ation utilisateur test-user-456 ===');
  
  try {
    // Cr√©er l'application NestJS
    const app = await NestFactory.create(AppModule, {
      logger: false // D√©sactiver les logs pour plus de clart√©
    });
    const supabaseService = app.get(SupabaseRestService);
    
    // Donn√©es de test pour test-user-456
    const testEmail = 'test2@example.com';
    const testPassword = 'test123';
    const unixCryptHash = 'abRcsZmlrrKFA'; // Hash Unix DES crypt pour 'test123'
    
    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await supabaseService.findUserByEmail(testEmail);
    if (existingUser) {
      console.log('‚ùå Un utilisateur avec cet email existe d√©j√†');
      console.log('Utilisateur existant:', existingUser);
      await app.close();
      return;
    }
    
    // Ins√©rer directement avec l'ID sp√©cifique test-user-456
    const userData = {
      cst_id: 'test-user-456', // ID sp√©cifique pour les tests
      cst_mail: testEmail,
      cst_pswd: unixCryptHash,
      cst_fname: 'TestCorrig√©',
      cst_name: 'User456',
      cst_civility: 'Mr.',
      cst_address: '123 Rue Test Corrig√©e',
      cst_zip_code: '75001',
      cst_city: 'Paris',
      cst_country: 'France',
      cst_tel: '0123456789',
      cst_gsm: null,
      cst_is_pro: '0',
      cst_rs: null,
      cst_siret: null,
      cst_activ: '1',
      cst_level: 1,
      cst_is_cpy: '0',
      cst_keylog: 'TEST_KEYLOG_456'
    };
    
    // Utiliser fetch directement pour ins√©rer avec le hash personnalis√©
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      'Prefer': 'return=representation'
    };
    
    if (process.env.SUPABASE_SERVICE_ROLE_KEY) {
      headers['apikey'] = process.env.SUPABASE_SERVICE_ROLE_KEY;
      headers['Authorization'] = `Bearer ${process.env.SUPABASE_SERVICE_ROLE_KEY}`;
    } else {
      console.warn('‚ö†Ô∏è SUPABASE_SERVICE_ROLE_KEY non d√©finie, tentative sans cl√©');
    }
    
    console.log('üì° Tentative d\'insertion dans la base de donn√©es...');
    console.log('URL:', `${process.env.SUPABASE_URL}/rest/v1/___xtr_customer`);
    console.log('Donn√©es √† ins√©rer:', {
      cst_id: userData.cst_id,
      cst_mail: userData.cst_mail,
      cst_fname: userData.cst_fname,
      cst_name: userData.cst_name
    });
    
    const response = await fetch(`${process.env.SUPABASE_URL}/rest/v1/___xtr_customer`, {
      method: 'POST',
      headers,
      body: JSON.stringify(userData)
    });
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Utilisateur test-user-456 cr√©√© avec succ√®s!');
      console.log('');
      console.log('üîë Identifiants de test:');
      console.log(`Email: ${testEmail}`);
      console.log(`Mot de passe: ${testPassword}`);
      console.log(`ID: test-user-456`);
      console.log(`Hash: ${unixCryptHash}`);
      console.log('');
      console.log('üéâ Les erreurs 404 devraient maintenant √™tre r√©solues!');
      
      // Test de validation
      console.log('\\n=== Test de validation ===');
      const isValid = await supabaseService.validatePassword(testPassword, unixCryptHash);
      console.log('Validation du mot de passe:', isValid ? '‚úÖ Succ√®s' : '‚ùå √âchec');
      
      // Test de r√©cup√©ration
      console.log('\\n=== Test de r√©cup√©ration ===');
      const retrievedUser = await supabaseService.findUserByEmail(testEmail);
      if (retrievedUser) {
        console.log('‚úÖ Utilisateur r√©cup√©r√© avec succ√®s');
        console.log('ID r√©cup√©r√©:', retrievedUser.cst_id);
        console.log('Email r√©cup√©r√©:', retrievedUser.cst_mail);
        console.log('Nom r√©cup√©r√©:', retrievedUser.cst_fname, retrievedUser.cst_name);
      } else {
        console.log('‚ùå Impossible de r√©cup√©rer l\'utilisateur');
      }
      
    } else {
      console.error('‚ùå Erreur lors de la cr√©ation:', response.status, response.statusText);
      const error = await response.text();
      console.error('D√©tails:', error);
    }
    
    await app.close();
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

createTestUser456();
