#!/bin/bash

# üß™ Tests CURL pour ConfigService Am√©lior√©
# ==========================================

echo "üöÄ Tests du ConfigService Am√©lior√© - $(date)"
echo "=============================================="

BASE_URL="http://localhost:3000"
ADMIN_URL="$BASE_URL/api/admin"
CONFIG_URL="$ADMIN_URL/configuration"

# Couleurs pour les logs
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction d'aide pour les tests
test_endpoint() {
    local method=$1
    local url=$2
    local data=$3
    local description=$4
    
    echo -e "\n${BLUE}üîç Test:${NC} $description"
    echo -e "${YELLOW}üì° $method $url${NC}"
    
    if [ -n "$data" ]; then
        echo -e "${YELLOW}üìÑ Data: $data${NC}"
        response=$(curl -s -w "\n%{http_code}" -X $method \
            -H "Content-Type: application/json" \
            -d "$data" \
            "$url")
    else
        response=$(curl -s -w "\n%{http_code}" -X $method \
            -H "Content-Type: application/json" \
            "$url")
    fi
    
    # S√©parer le body et le status code
    body=$(echo "$response" | head -n -1)
    status_code=$(echo "$response" | tail -n 1)
    
    if [[ $status_code -ge 200 && $status_code -lt 300 ]]; then
        echo -e "${GREEN}‚úÖ Success ($status_code)${NC}"
        echo -e "${GREEN}Response:${NC} $body" | jq . 2>/dev/null || echo "$body"
    else
        echo -e "${RED}‚ùå Failed ($status_code)${NC}"
        echo -e "${RED}Response:${NC} $body"
    fi
    
    sleep 1
}

echo -e "\n${BLUE}üîß 1. TESTS DE CONFIGURATION BASIQUE${NC}"
echo "======================================"

# Test 1: R√©cup√©rer une configuration existante
test_endpoint "GET" "$CONFIG_URL/database.url" "" "R√©cup√©rer configuration database.url"

# Test 2: Cr√©er une nouvelle configuration
test_endpoint "POST" "$CONFIG_URL" '{
    "key": "test.simple_string",
    "value": "Hello World",
    "category": "test",
    "description": "Test de configuration simple"
}' "Cr√©er configuration string simple"

# Test 3: Cr√©er configuration avec validation Zod
test_endpoint "POST" "$CONFIG_URL" '{
    "key": "test.number_config",
    "value": 42,
    "type": "number",
    "category": "test",
    "description": "Test de configuration num√©rique"
}' "Cr√©er configuration num√©rique"

# Test 4: Cr√©er configuration JSON complexe
test_endpoint "POST" "$CONFIG_URL" '{
    "key": "test.json_config",
    "value": {
        "enabled": true,
        "timeout": 5000,
        "endpoints": ["api1", "api2"],
        "settings": {
            "debug": false,
            "level": "info"
        }
    },
    "type": "json",
    "category": "test",
    "description": "Test de configuration JSON complexe"
}' "Cr√©er configuration JSON complexe"

echo -e "\n${BLUE}üîê 2. TESTS DE S√âCURIT√â ET CHIFFREMENT${NC}"
echo "======================================"

# Test 5: Configuration sensible (chiffr√©e)
test_endpoint "POST" "$CONFIG_URL" '{
    "key": "test.secret_key",
    "value": "super_secret_password_123",
    "category": "security",
    "isSensitive": true,
    "description": "Test de configuration sensible chiffr√©e"
}' "Cr√©er configuration sensible (chiffr√©e)"

# Test 6: R√©cup√©rer la configuration sensible (doit √™tre d√©chiffr√©e)
test_endpoint "GET" "$CONFIG_URL/test.secret_key" "" "R√©cup√©rer configuration sensible"

echo -e "\n${BLUE}üìä 3. TESTS D'ANALYTICS ET CACHE${NC}"
echo "================================="

# Test 7: R√©cup√©rer les statistiques du cache
test_endpoint "GET" "$CONFIG_URL/cache/stats" "" "Statistiques du cache"

# Test 8: Vider le cache
test_endpoint "DELETE" "$CONFIG_URL/cache" "" "Vider le cache"

# Test 9: R√©chauffer le cache
test_endpoint "POST" "$CONFIG_URL/cache/warmup" "" "R√©chauffer le cache"

echo -e "\n${BLUE}üîç 4. TESTS DE RECHERCHE ET FILTRAGE${NC}"
echo "====================================="

# Test 10: R√©cup√©rer toutes les configurations de test
test_endpoint "GET" "$CONFIG_URL?category=test" "" "Configurations de cat√©gorie 'test'"

# Test 11: Recherche par pattern
test_endpoint "GET" "$CONFIG_URL?search=test" "" "Recherche configurations contenant 'test'"

# Test 12: Configurations publiques seulement
test_endpoint "GET" "$CONFIG_URL/public" "" "Configurations publiques"

echo -e "\n${BLUE}üö´ 5. TESTS DE VALIDATION ET ERREURS${NC}"
echo "===================================="

# Test 13: Validation √©chou√©e - cl√© vide
test_endpoint "POST" "$CONFIG_URL" '{
    "key": "",
    "value": "test",
    "category": "test"
}' "Test validation cl√© vide (doit √©chouer)"

# Test 14: Validation √©chou√©e - type invalide
test_endpoint "POST" "$CONFIG_URL" '{
    "key": "test.invalid_type",
    "value": "not_a_number",
    "type": "number",
    "category": "test"
}' "Test validation type invalide (doit √©chouer)"

# Test 15: Configuration inexistante
test_endpoint "GET" "$CONFIG_URL/nonexistent.key" "" "Configuration inexistante (doit retourner 404)"

echo -e "\n${BLUE}üîÑ 6. TESTS DE MISE √Ä JOUR${NC}"
echo "=========================="

# Test 16: Mettre √† jour une configuration existante
test_endpoint "PUT" "$CONFIG_URL/test.simple_string" '{
    "value": "Hello World Updated!",
    "description": "Configuration mise √† jour"
}' "Mettre √† jour configuration existante"

# Test 17: V√©rifier la mise √† jour
test_endpoint "GET" "$CONFIG_URL/test.simple_string" "" "V√©rifier mise √† jour"

echo -e "\n${BLUE}üóëÔ∏è 7. TESTS DE SUPPRESSION${NC}"
echo "=========================="

# Test 18: Supprimer une configuration
test_endpoint "DELETE" "$CONFIG_URL/test.number_config" "" "Supprimer configuration"

# Test 19: V√©rifier suppression
test_endpoint "GET" "$CONFIG_URL/test.number_config" "" "V√©rifier suppression (doit retourner 404)"

echo -e "\n${BLUE}üìà 8. TESTS DE M√âTRIQUES ET MONITORING${NC}"
echo "======================================"

# Test 20: M√©triques d'utilisation
test_endpoint "GET" "$CONFIG_URL/metrics" "" "M√©triques d'utilisation"

# Test 21: Historique des changements
test_endpoint "GET" "$CONFIG_URL/audit-trail?key=test.simple_string" "" "Historique des changements"

echo -e "\n${BLUE}‚öôÔ∏è 9. TESTS DE CONFIGURATIONS SYST√àME${NC}"
echo "===================================="

# Test 22: Configuration de base de donn√©es
test_endpoint "GET" "$CONFIG_URL/system/database" "" "Configuration de base de donn√©es"

# Test 23: Configuration email
test_endpoint "GET" "$CONFIG_URL/system/email" "" "Configuration email"

# Test 24: Toutes les configurations syst√®me
test_endpoint "GET" "$CONFIG_URL/system/all" "" "Toutes les configurations syst√®me"

echo -e "\n${BLUE}üßπ 10. NETTOYAGE${NC}"
echo "================"

# Test 25: Supprimer les configurations de test
test_endpoint "DELETE" "$CONFIG_URL/test.simple_string" "" "Supprimer test.simple_string"
test_endpoint "DELETE" "$CONFIG_URL/test.json_config" "" "Supprimer test.json_config"
test_endpoint "DELETE" "$CONFIG_URL/test.secret_key" "" "Supprimer test.secret_key"

echo -e "\n${GREEN}üéâ Tests termin√©s !${NC}"
echo -e "${YELLOW}üìä R√©sum√©:${NC}"
echo "- Tests de CRUD sur les configurations"
echo "- Validation Zod int√©gr√©e"
echo "- Chiffrement/d√©chiffrement s√©curis√©"
echo "- Cache intelligent avec TTL"
echo "- Analytics et m√©triques"
echo "- Gestion d'erreurs robuste"

echo -e "\n${BLUE}üí° Pour des tests plus avanc√©s:${NC}"
echo "curl -X GET '$CONFIG_URL?limit=10&page=1' # Pagination"
echo "curl -X GET '$CONFIG_URL?category=ui&sensitive=false' # Filtres combin√©s"
echo "curl -X POST '$CONFIG_URL/bulk' -d '{\"configs\": [...]}' # Cr√©ation en lot"