#!/bin/bash

# üéØ Analyse strat√©gique pour d√©terminer la meilleure approche de nettoyage
# Objectif: √âvaluer risques, impacts et priorit√©s

set -e

echo "üéØ ANALYSE STRAT√âGIQUE DE NETTOYAGE"
echo "==================================="
echo "üìÖ Date: $(date)"
echo ""

cd "$(dirname "$0")/.."

echo "1Ô∏è‚É£ ANALYSE DES RISQUES PAR MODULE"
echo "=================================="

# Fonction pour analyser un module
analyze_module() {
    local module_path="$1"
    local module_name=$(basename "$module_path")
    
    if [[ ! -d "$module_path" ]]; then
        return
    fi
    
    echo ""
    echo "üì¶ MODULE: $module_name"
    echo "$(printf '%.${#module_name}s' | tr ' ' '-')"
    
    # Compter les fichiers
    total_files=$(find "$module_path" -name "*.ts" | wc -l)
    controllers=$(find "$module_path" -name "*.controller.ts" | wc -l)
    services=$(find "$module_path" -name "*.service.ts" | wc -l)
    modules=$(find "$module_path" -name "*.module.ts" | wc -l)
    
    echo "üìä Fichiers: $total_files total ($controllers controllers, $services services, $modules modules)"
    
    # Identifier les redondances
    redundant_files=$(find "$module_path" -name "*test*.ts" -o -name "*debug*.ts" -o -name "*minimal*.ts" -o -name "*enhanced*.ts" -o -name "*simple*.ts" -o -name "*legacy*.ts" -o -name "*backup*.ts" | wc -l)
    
    if [[ $redundant_files -gt 0 ]]; then
        echo "‚ö†Ô∏è  Fichiers potentiellement redondants: $redundant_files"
        
        # D√©tail des redondances
        find "$module_path" -name "*test*.ts" -o -name "*debug*.ts" -o -name "*minimal*.ts" -o -name "*enhanced*.ts" -o -name "*simple*.ts" -o -name "*legacy*.ts" -o -name "*backup*.ts" | sed 's|.*/||' | sort | while read file; do
            echo "   üî∏ $file"
        done
        
        # Calculer le score de risque
        if [[ $redundant_files -gt 10 ]]; then
            echo "üö® RISQUE: √âLEV√â (>10 fichiers redondants)"
        elif [[ $redundant_files -gt 5 ]]; then
            echo "‚ö†Ô∏è  RISQUE: MOYEN (5-10 fichiers redondants)"
        else
            echo "‚úÖ RISQUE: FAIBLE (<5 fichiers redondants)"
        fi
    else
        echo "‚úÖ Aucun fichier redondant d√©tect√©"
    fi
    
    # V√©rifier si le module est import√©
    imports_count=$(grep -r "from.*$module_name" src/ 2>/dev/null | wc -l)
    echo "üîó Utilis√© dans: $imports_count imports"
    
    if [[ $imports_count -gt 20 ]]; then
        echo "üö® IMPACT: CRITIQUE (>20 d√©pendances)"
    elif [[ $imports_count -gt 10 ]]; then
        echo "‚ö†Ô∏è  IMPACT: √âLEV√â (10-20 d√©pendances)"
    elif [[ $imports_count -gt 5 ]]; then
        echo "‚úÖ IMPACT: MOYEN (5-10 d√©pendances)"
    else
        echo "‚úÖ IMPACT: FAIBLE (<5 d√©pendances)"
    fi
}

# Analyser les modules principaux
echo "Analyse des modules avec le plus de redondances d√©tect√©es..."

analyze_module "src/modules/orders"
analyze_module "src/modules/search" 
analyze_module "src/modules/admin"
analyze_module "src/modules/vehicles"
analyze_module "src/modules/messages"
analyze_module "src/modules/shipping"
analyze_module "src/auth"

echo ""
echo "2Ô∏è‚É£ MATRICE RISQUE/IMPACT"
echo "========================"
echo ""
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ Module          ‚îÇ Redond.  ‚îÇ Impact ‚îÇ Recommandation ‚îÇ"
echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"

# Analyser chaque module pour la matrice
for module in orders search admin vehicles messages shipping auth; do
    if [[ -d "src/modules/$module" ]] || [[ -d "src/$module" ]]; then
        module_path="src/modules/$module"
        [[ ! -d "$module_path" ]] && module_path="src/$module"
        
        redundant=$(find "$module_path" -name "*test*.ts" -o -name "*debug*.ts" -o -name "*minimal*.ts" -o -name "*enhanced*.ts" -o -name "*simple*.ts" -o -name "*legacy*.ts" -o -name "*backup*.ts" 2>/dev/null | wc -l)
        imports=$(grep -r "from.*$module" src/ 2>/dev/null | wc -l)
        
        if [[ $redundant -gt 5 && $imports -gt 15 ]]; then
            priority="üö® URGENT"
        elif [[ $redundant -gt 5 || $imports -gt 15 ]]; then
            priority="‚ö†Ô∏è  √âLEV√â"
        elif [[ $redundant -gt 2 ]]; then
            priority="‚úÖ MOYEN"
        else
            priority="‚úÖ FAIBLE"
        fi
        
        printf "‚îÇ %-15s ‚îÇ %8d ‚îÇ %6d ‚îÇ %-14s ‚îÇ\n" "$module" "$redundant" "$imports" "$priority"
    fi
done

echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"

echo ""
echo "3Ô∏è‚É£ RECOMMANDATION STRAT√âGIQUE"
echo "============================="
echo ""

# Calculer la complexit√© totale
total_redundant=$(find src -name "*test*.ts" -o -name "*debug*.ts" -o -name "*minimal*.ts" -o -name "*enhanced*.ts" -o -name "*simple*.ts" -o -name "*legacy*.ts" -o -name "*backup*.ts" 2>/dev/null | wc -l)

if [[ $total_redundant -gt 50 ]]; then
    echo "üéØ STRAT√âGIE RECOMMAND√âE: NETTOYAGE PAR PHASES"
    echo ""
    echo "Phase 1 (Imm√©diate) - Fichiers Legacy (Risque minimal):"
    echo "  ‚Ä¢ Supprimer tous les fichiers *legacy* et *backup*"
    echo "  ‚Ä¢ Impact: Minimal, B√©n√©fice: Imm√©diat"
    echo ""
    echo "Phase 2 (Court terme) - Module avec plus de redondances:"
    echo "  ‚Ä¢ Focus sur le module avec le plus de fichiers redondants"
    echo "  ‚Ä¢ Cr√©er sauvegarde compl√®te avant"
    echo ""
    echo "Phase 3 (Moyen terme) - Modules critiques:"
    echo "  ‚Ä¢ Nettoyer les modules avec beaucoup de d√©pendances"
    echo "  ‚Ä¢ Tests approfondis requis"
elif [[ $total_redundant -gt 20 ]]; then
    echo "üéØ STRAT√âGIE RECOMMAND√âE: NETTOYAGE CIBL√â"
    echo ""
    echo "‚Ä¢ Focus sur 2-3 modules les plus probl√©matiques"
    echo "‚Ä¢ Sauvegarde + nettoyage + tests par module"
    echo "‚Ä¢ Approche conservative"
else
    echo "üéØ STRAT√âGIE RECOMMAND√âE: NETTOYAGE GLOBAL"
    echo ""
    echo "‚Ä¢ Nettoyage en une seule phase"
    echo "‚Ä¢ Sauvegarde globale + suppression + validation"
fi

echo ""
echo "4Ô∏è‚É£ PLAN D'EX√âCUTION OPTIMAL"
echo "==========================="
echo ""
echo "Bas√© sur l'analyse, voici le plan optimal:"
echo ""
echo "1. üóÑÔ∏è  SAUVEGARDE PR√âVENTIVE (Obligatoire)"
echo "   ./scripts/backup-global-cleanup.sh"
echo ""
echo "2. üßπ NETTOYAGE PHASE 1 - Legacy (Sans risque)"
echo "   ./scripts/cleanup-legacy-files.sh"
echo ""
echo "3. üîç ANALYSE POST-PHASE 1"
echo "   ./scripts/validate-phase1-cleanup.sh"
echo ""
echo "4. üéØ NETTOYAGE PHASE 2 - Module prioritaire"
echo "   ./scripts/cleanup-priority-module.sh"
echo ""
echo "5. ‚úÖ VALIDATION COMPL√àTE"
echo "   ./scripts/validate-complete-cleanup.sh"

echo ""
echo "üí° CONSEIL: Commencer par les fichiers legacy pour un succ√®s rapide et sans risque !"
