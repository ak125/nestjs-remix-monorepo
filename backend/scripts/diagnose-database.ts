#!/usr/bin/env ts-node
/**
 * üîç Script de Diagnostic - Connexion aux Tables Existantes
 * V√©rifie quelles tables existent et leur structure
 */

import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import { join } from 'path';

// Charger les variables d'environnement
dotenv.config({ path: join(__dirname, '../.env') });

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables Supabase manquantes dans .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function diagnoseDatabaseTables() {
  console.log('üîç DIAGNOSTIC DES TABLES EXISTANTES');
  console.log('=====================================\n');

  try {
    // 1. Lister toutes les tables
    console.log('üìã 1. TABLES DISPONIBLES:');
    const { data: tables, error: tablesError } = await supabase
      .rpc('get_tables');

    if (tablesError) {
      // Fallback : requ√™te SQL directe
      const { data: tablesRaw, error: rawError } = await supabase
        .from('information_schema.tables')
        .select('table_name')
        .eq('table_schema', 'public')
        .order('table_name');

      if (rawError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des tables:', rawError);
        return;
      }

      console.log('Tables trouv√©es:');
      tablesRaw?.forEach((table: any) => {
        console.log(`  - ${table.table_name}`);
      });
    }

    // 2. V√©rifier les tables sp√©cifiques ___xtr_*
    console.log('\nüéØ 2. TABLES ___xtr_* (LEGACY):');
    const xtrTables = [
      '___xtr_customer',
      '___xtr_order',
      '___xtr_product',
      '___xtr_cart',
      '___xtr_payment',
      '___xtr_msg'
    ];

    for (const tableName of xtrTables) {
      await checkTable(tableName);
    }

    // 3. V√©rifier les nouvelles tables modernes
    console.log('\nüÜï 3. TABLES MODERNES:');
    const modernTables = [
      'users',
      'products',
      'orders',
      'order_items',
      'carts',
      'cart_items'
    ];

    for (const tableName of modernTables) {
      await checkTable(tableName);
    }

    console.log('\n‚úÖ Diagnostic termin√©!');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

async function checkTable(tableName: string) {
  try {
    // Tenter de compter les enregistrements
    const { count, error } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });

    if (error) {
      console.log(`  ‚ùå ${tableName}: Table non trouv√©e ou inaccessible`);
      return;
    }

    console.log(`  ‚úÖ ${tableName}: ${count} enregistrements`);

    // Si la table existe et a des donn√©es, montrer un √©chantillon
    if (count && count > 0) {
      const { data: sample, error: sampleError } = await supabase
        .from(tableName)
        .select('*')
        .limit(1);

      if (!sampleError && sample && sample.length > 0) {
        const columns = Object.keys(sample[0]);
        console.log(`    üìä Colonnes: ${columns.slice(0, 5).join(', ')}${columns.length > 5 ? '...' : ''}`);
      }
    }

  } catch (error) {
    console.log(`  ‚ùå ${tableName}: Erreur lors de la v√©rification`);
  }
}

// Fonction pour tester les services sp√©cifiques
async function testServices() {
  console.log('\nüß™ 4. TEST DES SERVICES:');
  console.log('========================');

  // Test UserDataService
  console.log('\nüë§ Test UserDataService:');
  try {
    const { data: users, error } = await supabase
      .from('___xtr_customer')
      .select('*')
      .limit(3);

    if (error) {
      console.log('  ‚ùå Impossible de r√©cup√©rer les utilisateurs');
    } else {
      console.log(`  ‚úÖ ${users?.length || 0} utilisateurs trouv√©s`);
      if (users && users.length > 0) {
        console.log(`  üìß Premier user: ${users[0].customer_email || 'Email non d√©fini'}`);
      }
    }
  } catch (error) {
    console.log('  ‚ùå Erreur service utilisateurs');
  }

  // Test OrderDataService
  console.log('\nüì¶ Test OrderDataService:');
  try {
    const { data: orders, error } = await supabase
      .from('___xtr_order')
      .select('*')
      .limit(3);

    if (error) {
      console.log('  ‚ùå Impossible de r√©cup√©rer les commandes');
    } else {
      console.log(`  ‚úÖ ${orders?.length || 0} commandes trouv√©es`);
      if (orders && orders.length > 0) {
        console.log(`  üõí Premi√®re commande: ID ${orders[0].ord_id || orders[0].order_id}`);
      }
    }
  } catch (error) {
    console.log('  ‚ùå Erreur service commandes');
  }

  // Test CartDataService
  console.log('\nüõí Test CartDataService:');
  try {
    const { data: carts, error } = await supabase
      .from('cart')
      .select('*')
      .limit(3);

    if (error) {
      console.log('  ‚ùå Table cart non trouv√©e, test avec ___xtr_cart...');
      
      const { data: xtrCarts, error: xtrError } = await supabase
        .from('___xtr_cart')
        .select('*')
        .limit(3);

      if (xtrError) {
        console.log('  ‚ùå Aucune table de panier trouv√©e');
      } else {
        console.log(`  ‚úÖ ${xtrCarts?.length || 0} paniers trouv√©s (table legacy)`);
      }
    } else {
      console.log(`  ‚úÖ ${carts?.length || 0} paniers trouv√©s (table moderne)`);
    }
  } catch (error) {
    console.log('  ‚ùå Erreur service panier');
  }
}

// Fonction pour recommandations
function showRecommendations() {
  console.log('\nüí° 5. RECOMMANDATIONS:');
  console.log('======================');
  console.log('1. Si les tables ___xtr_* existent et ont des donn√©es:');
  console.log('   ‚Üí Utiliser les services existants (UserDataService, OrderDataService)');
  console.log('   ‚Üí Ces services utilisent d√©j√† Supabase avec les bonnes tables');
  console.log('');
  console.log('2. Si seules les tables modernes existent:');
  console.log('   ‚Üí Cr√©er de nouveaux services avec Drizzle ORM');
  console.log('   ‚Üí Migration des donn√©es si n√©cessaire');
  console.log('');
  console.log('3. Si les deux types de tables existent:');
  console.log('   ‚Üí Utiliser les services legacy pour les donn√©es existantes');
  console.log('   ‚Üí Migrer progressivement vers les tables modernes');
}

// Ex√©cution du diagnostic
async function main() {
  await diagnoseDatabaseTables();
  await testServices();
  showRecommendations();
  process.exit(0);
}

main().catch(console.error);
