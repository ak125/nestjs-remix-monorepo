#!/bin/bash

# üöó SCRIPT DE VALIDATION POST-MIGRATION
# V√©rifie que la migration des types v√©hicules s'est bien pass√©e

echo "üîç Validation post-migration des types v√©hicules"
echo "================================================"

FRONTEND_DIR="/workspaces/nestjs-remix-monorepo/frontend/app"
BACKEND_DIR="/workspaces/nestjs-remix-monorepo/backend"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

SUCCESS=0
WARNINGS=0
ERRORS=0

print_status() {
    local status="$1"
    local message="$2"
    
    case $status in
        "OK")
            echo -e "   ${GREEN}‚úÖ $message${NC}"
            ;;
        "WARNING")
            echo -e "   ${YELLOW}‚ö†Ô∏è  $message${NC}"
            ((WARNINGS++))
            ;;
        "ERROR")
            echo -e "   ${RED}‚ùå $message${NC}"
            ((ERRORS++))
            ;;
        "INFO")
            echo -e "   ${BLUE}‚ÑπÔ∏è  $message${NC}"
            ;;
    esac
}

echo ""
echo "üîç 1. V√©rification du fichier de types centralis√©"
echo "================================================="

TYPES_FILE="$FRONTEND_DIR/types/vehicle.types.ts"

if [ -f "$TYPES_FILE" ]; then
    print_status "OK" "Fichier de types centralis√© existe"
    
    # V√©rifier les exports principaux
    if grep -q "export interface VehicleBrand" "$TYPES_FILE"; then
        print_status "OK" "Interface VehicleBrand export√©e"
    else
        print_status "ERROR" "Interface VehicleBrand manquante"
    fi
    
    if grep -q "export interface VehicleModel" "$TYPES_FILE"; then
        print_status "OK" "Interface VehicleModel export√©e" 
    else
        print_status "ERROR" "Interface VehicleModel manquante"
    fi
    
    if grep -q "export interface VehicleType" "$TYPES_FILE"; then
        print_status "OK" "Interface VehicleType export√©e"
    else
        print_status "ERROR" "Interface VehicleType manquante"
    fi
    
else
    print_status "ERROR" "Fichier de types centralis√© manquant: $TYPES_FILE"
fi

echo ""
echo "üîç 2. V√©rification des imports dans les composants"
echo "=================================================="

COMPONENTS_TO_CHECK=(
    "$FRONTEND_DIR/components/vehicles/ModelSelector.tsx"
    "$FRONTEND_DIR/components/vehicles/TypeSelector.tsx"
    "$FRONTEND_DIR/components/home/VehicleSelector.tsx"
    "$FRONTEND_DIR/services/api/enhanced-vehicle.api.ts"
)

for file in "${COMPONENTS_TO_CHECK[@]}"; do
    if [ -f "$file" ]; then
        filename=$(basename "$file")
        
        # V√©rifier l'import des types centralis√©s
        if grep -q "from.*types/vehicle.types" "$file"; then
            print_status "OK" "$filename: Import des types centralis√©s pr√©sent"
        else
            print_status "WARNING" "$filename: Import des types centralis√©s manquant"
        fi
        
        # V√©rifier s'il reste des interfaces locales
        if grep -q "^interface Vehicle\|^export interface Vehicle" "$file"; then
            print_status "WARNING" "$filename: Interfaces locales toujours pr√©sentes"
        else
            print_status "OK" "$filename: Pas d'interfaces locales d√©tect√©es"
        fi
        
    else
        print_status "WARNING" "$(basename "$file"): Fichier non trouv√©"
    fi
done

echo ""
echo "üîç 3. V√©rification de la coh√©rence des noms de propri√©t√©s"
echo "========================================================="

# V√©rifier que les noms de propri√©t√©s correspondent √† la BDD
if [ -f "$TYPES_FILE" ]; then
    
    # V√©rifier marque_id vs brand_id
    if grep -q "marque_id:" "$TYPES_FILE"; then
        print_status "OK" "Utilisation de marque_id (coh√©rent avec BDD)"
    else
        print_status "WARNING" "marque_id manquant dans les types"
    fi
    
    # V√©rifier modele_id
    if grep -q "modele_id:" "$TYPES_FILE"; then
        print_status "OK" "Utilisation de modele_id (coh√©rent avec BDD)"
    else
        print_status "WARNING" "modele_id manquant dans les types"
    fi
    
    # V√©rifier type_id
    if grep -q "type_id:" "$TYPES_FILE"; then
        print_status "OK" "Utilisation de type_id (coh√©rent avec BDD)"
    else
        print_status "WARNING" "type_id manquant dans les types"
    fi
fi

echo ""
echo "üîç 4. Test de compilation TypeScript"
echo "===================================="

cd "$FRONTEND_DIR/../.." || exit 1

if command -v npm &> /dev/null; then
    print_status "INFO" "Test de compilation en cours..."
    
    # Test de compilation sans √©mission de fichiers
    if npm run type-check 2>/dev/null || npx tsc --noEmit 2>/dev/null; then
        print_status "OK" "Compilation TypeScript r√©ussie"
    else
        print_status "ERROR" "Erreurs de compilation TypeScript d√©tect√©es"
        print_status "INFO" "Ex√©cuter 'npm run type-check' pour plus de d√©tails"
    fi
else
    print_status "WARNING" "npm non disponible, test de compilation ignor√©"
fi

echo ""
echo "üîç 5. V√©rification des endpoints API backend"
echo "============================================"

BACKEND_FILES=(
    "$BACKEND_DIR/src/modules/vehicles/vehicles-forms-simple.controller.ts"
    "$BACKEND_DIR/src/modules/vehicles/vehicles.controller.ts"
    "$BACKEND_DIR/src/modules/vehicles/vehicles.service.ts"
)

for file in "${BACKEND_FILES[@]}"; do
    if [ -f "$file" ]; then
        filename=$(basename "$file")
        
        # V√©rifier la coh√©rence des noms de tables
        if grep -q "auto_marque\|auto_modele\|auto_type" "$file"; then
            print_status "OK" "$filename: Utilise les vraies tables BDD"
        else
            print_status "WARNING" "$filename: Ne semble pas utiliser les tables BDD standard"
        fi
        
    else
        print_status "WARNING" "$(basename "$file"): Fichier backend non trouv√©"
    fi
done

echo ""
echo "üîç 6. Test fonctionnel du s√©lecteur (si serveur actif)"
echo "======================================================"

# Tester si le serveur backend est actif
if curl -s http://localhost:4000/api/vehicles/forms/models >/dev/null 2>&1; then
    print_status "OK" "Serveur backend accessible"
    
    # Test de l'endpoint des mod√®les
    MODELS_RESPONSE=$(curl -s http://localhost:4000/api/vehicles/forms/models | jq length 2>/dev/null)
    if [ "$MODELS_RESPONSE" -gt 0 ] 2>/dev/null; then
        print_status "OK" "Endpoint des mod√®les retourne $MODELS_RESPONSE √©l√©ments"
    else
        print_status "WARNING" "Endpoint des mod√®les retourne des donn√©es invalides"
    fi
    
else
    print_status "INFO" "Serveur backend non accessible - tests fonctionnels ignor√©s"
fi

echo ""
echo "üìä R√âSUM√â DE LA VALIDATION"
echo "========================="

echo -e "   ‚úÖ Succ√®s: $(($(find . -name "*.tsx" -o -name "*.ts" | wc -l) - ERRORS - WARNINGS))"
echo -e "   ‚ö†Ô∏è  Avertissements: $WARNINGS"
echo -e "   ‚ùå Erreurs: $ERRORS"

echo ""
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ VALIDATION R√âUSSIE!${NC}"
    echo "   La migration des types v√©hicules s'est bien d√©roul√©e."
    echo ""
    echo "üîß Prochaines √©tapes:"
    echo "   1. D√©marrer le serveur de d√©veloppement"
    echo "   2. Tester les s√©lecteurs dans l'interface"
    echo "   3. V√©rifier les fonctionnalit√©s avanc√©es"
else
    echo -e "${RED}‚ùå VALIDATION √âCHOU√âE${NC}"
    echo "   $ERRORS erreur(s) d√©tect√©e(s) - correction manuelle n√©cessaire"
    echo ""
    echo "üîß Actions recommand√©es:"
    echo "   1. Corriger les erreurs list√©es ci-dessus"
    echo "   2. Relancer la validation"
    echo "   3. Consulter les logs de compilation pour plus de d√©tails"
fi

if [ $WARNINGS -gt 0 ]; then
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  $WARNINGS avertissement(s) d√©tect√©(s)${NC}"
    echo "   Ces avertissements n'emp√™chent pas le fonctionnement mais m√©ritent attention."
fi

echo ""
echo "üìù Pour plus d'informations:"
echo "   - Documentation: ./ANALYSE_PROBLEMES_VEHICLE_SELECTOR.md"
echo "   - Script de migration: ./migrate-vehicle-types.sh"
echo "   - Types centralis√©s: ./frontend/app/types/vehicle.types.ts"

exit $ERRORS