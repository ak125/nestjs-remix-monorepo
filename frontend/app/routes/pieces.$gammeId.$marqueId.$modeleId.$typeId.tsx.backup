import { json, LoaderFunctionArgs, MetaFunction } from '@remix-run/node';
import { useLoaderData, useSearchParams } from '@remix-run/react';
import { useState, useEffect } from 'react';
// Import des composants existants (adapt√©s)
// import { ProductCard } from '~/components/products/ProductCard'; // √Ä cr√©er
// import { FilterSidebar } from '~/components/filters/FilterSidebar'; // √Ä cr√©er  
import { VehicleSelector } from '~/components/home/VehicleSelector';
// import { apiClient } from '~/services/api-client'; // Service non configur√©

// Composants temporaires inline pour √©viter les erreurs
const ProductCard = ({ product, vehicle, className }: any) => (
  <div className={`bg-white rounded-lg shadow-sm hover:shadow-md transition-all p-4 ${className || ''}`}>
    <div className="aspect-square bg-gray-100 rounded-lg mb-3 flex items-center justify-center">
      <div className="text-4xl text-gray-400">üîß</div>
    </div>
    <h3 className="font-medium text-lg mb-2">{product.piece_name}</h3>
    <div className="space-y-2 text-sm text-gray-600 mb-4">
      <div>R√©f: {product.piece_ref}</div>
      <div>Marque: {product.manufacturer.alias}</div>
    </div>
    <div className="flex items-center justify-between">
      <div className="text-lg font-bold text-blue-600">
        {product.price.ttc.toFixed(2)}‚Ç¨
      </div>
      <button className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700">
        Ajouter
      </button>
    </div>
  </div>
);

const FilterSidebar = ({ filters, selectedFilters, onFilterChange, isLoading }: any) => (
  <div className="p-4 bg-gray-50 rounded-lg">
    <h3 className="font-semibold mb-3">Filtres avanc√©s</h3>
    <div className="text-sm text-gray-600">
      Fonctionnalit√© en d√©veloppement
    </div>
    {isLoading && <div className="text-xs text-blue-600 mt-2">Chargement...</div>}
  </div>
);

// Service API temporaire
const apiClient = {
  get: async (url: string, options?: any) => {
    console.warn('API call simul√©:', url);
    throw new Error('Service apiClient non configur√©');
  },
  post: async (url: string, options?: any) => {
    console.warn('API call simul√©:', url);  
    throw new Error('Service apiClient non configur√©');
  }
};

// ========================================
// üéØ TYPES TYPESCRIPT AM√âLIOR√âS
// ========================================

interface VehicleData {
  type_id: number;
  type_name: string;
  type_alias: string;
  type_display: boolean;
  relfollow: boolean;
  marque: {
    marque_id: number;
    marque_name: string;
    marque_alias: string;
  };
  modele: {
    modele_id: number;
    modele_name: string;
    modele_alias: string;
  };
}

interface GammeData {
  pg_id: number;
  pg_name: string;
  pg_alias: string;
  pg_display: boolean;
  family_name?: string;
}

interface ProductData {
  id: number;
  piece_id: number;
  piece_name: string;
  piece_ref: string;
  manufacturer: {
    id: number;
    alias: string;
    quality: string;
    stars?: number;
  };
  side?: string;
  price: {
    ttc: number;
  };
}

interface FiltersData {
  manufacturers: Array<{
    id: number;
    alias: string;
    name: string;
  }>;
  qualities: string[];
  sides: string[];
}

interface EnhancedSeoData {
  title: string;
  description: string;
  h1: string;
  content: string;
  keywords: string;
  generatedAt: string;
}

interface LoaderData {
  seo: EnhancedSeoData;
  vehicle: VehicleData;
  gamme: GammeData;
  products: ProductData[];
  filters: FiltersData;
  crossProducts: any[];
  minPrice: number;
  canonical: string;
  performance: {
    loadTime: number;
    cacheHit: boolean;
    dataSource: string;
  };
}

// ========================================
// üöÄ META FUNCTION OPTIMIS√âE
// ========================================

export const meta: MetaFunction<typeof loader> = ({ data }) => {
  if (!data) {
    return [
      { title: 'Pi√®ces d√©tach√©es auto - Erreur' },
      { name: 'robots', content: 'noindex' }
    ];
  }
  
  return [
    { title: data.seo.title },
    { name: 'description', content: data.seo.description },
    { name: 'keywords', content: data.seo.keywords },
    { 
      name: 'robots', 
      content: data.vehicle.relfollow ? 'index, follow' : 'noindex, nofollow' 
    },
    { tagName: 'link', rel: 'canonical', href: data.canonical },
    // Schema.org structur√© pour SEO
    {
      tagName: 'script',
      type: 'application/ld+json',
      children: JSON.stringify({
        '@context': 'https://schema.org',
        '@type': 'CollectionPage',
        'name': data.seo.h1,
        'description': data.seo.description,
        'url': data.canonical,
        'mainEntity': {
          '@type': 'ItemList',
          'numberOfItems': data.products.length,
          'itemListElement': data.products.slice(0, 5).map((product, index) => ({
            '@type': 'ListItem',
            'position': index + 1,
            'item': {
              '@type': 'Product',
              'name': product.piece_name,
              'sku': product.piece_ref,
              'offers': {
                '@type': 'Offer',
                'price': product.price.ttc,
                'priceCurrency': 'EUR'
              }
            }
          }))
        }
      })
    }
  ];
};

// ========================================
// üîß LOADER FUNCTION AM√âLIOR√â
// ========================================

export async function loader({ params, request }: LoaderFunctionArgs) {
  const { gammeId, marqueId, modeleId, typeId } = params;
  const startTime = Date.now();
  
  try {
    // üîí Validation des param√®tres renforc√©e
    const validationErrors = [];
    if (!gammeId || !/^\d+$/.test(gammeId)) validationErrors.push('gammeId invalide');
    if (!marqueId || !/^\d+$/.test(marqueId)) validationErrors.push('marqueId invalide');
    if (!modeleId || !/^\d+$/.test(modeleId)) validationErrors.push('modeleId invalide');
    if (!typeId || !/^\d+$/.test(typeId)) validationErrors.push('typeId invalide');

    if (validationErrors.length > 0) {
      throw new Response(`Param√®tres invalides: ${validationErrors.join(', ')}`, { 
        status: 400,
        statusText: 'Bad Request'
      });
    }

    // üöÄ R√©cup√©ration parall√®le optimis√©e avec nouvelles API
    const [vehicleResponse, gammeResponse, productsResponse, seoResponse] = await Promise.allSettled([
      // Utilisation des nouveaux services backend
      apiClient.get(`/api/vehicles/${marqueId}/${modeleId}/${typeId}`),
      apiClient.get(`/api/catalog/gammes/${gammeId}`),
      apiClient.get(`/api/products/compatible`, {
        params: { 
          pgId: gammeId, 
          typeId,
          limit: 100,
          includeFilters: true 
        }
      }),
      // üéØ INT√âGRATION DU SEO ENHANCED SERVICE
      apiClient.get(`/api/seo-enhanced/generate`, {
        method: 'POST',
        data: {
          pgId: parseInt(gammeId),
          typeId: parseInt(typeId),
          variables: {
            // Variables seront enrichies dynamiquement
            gamme: 'Pi√®ces d√©tach√©es',
            marque: 'V√©hicule',
            modele: 'Mod√®le',
            type: 'Type'
          }
        }
      })
    ]);

    // üîç V√©rification des r√©sultats avec gestion fine des erreurs
    if (vehicleResponse.status === 'rejected') {
      throw new Response('V√©hicule non trouv√©', { status: 404 });
    }
    if (gammeResponse.status === 'rejected') {
      throw new Response('Gamme non disponible', { status: 404 });
    }
    if (productsResponse.status === 'rejected') {
      throw new Response('Produits non disponibles', { status: 503 });
    }

    const vehicle = vehicleResponse.value.data;
    const gamme = gammeResponse.value.data;
    const productsData = productsResponse.value.data;
    
    // üéØ SEO Enhanced ou fallback
    let seo: EnhancedSeoData;
    if (seoResponse.status === 'fulfilled' && seoResponse.value.data.success) {
      seo = {
        ...seoResponse.value.data.data,
        generatedAt: seoResponse.value.data.generatedAt
      };
    } else {
      // Fallback SEO classique am√©lior√©
      seo = generateFallbackSeo(vehicle, gamme, productsData);
    }

    // üîí V√©rifications business am√©lior√©es
    if (!vehicle.type_display || !gamme.pg_display) {
      throw new Response('Page non disponible (configuration)', { 
        status: 410,
        statusText: 'Gone'
      });
    }

    if (!productsData.products || productsData.products.length === 0) {
      throw new Response('Aucun produit compatible trouv√©', { 
        status: 412,
        statusText: 'Precondition Failed'
      });
    }

    // üìä Extraction des filtres optimis√©e
    const filters = extractFiltersOptimized(productsData.products);

    // üîó Cross-sell avec cache et fallback
    let crossProducts = [];
    try {
      const crossResponse = await apiClient.get(
        `/api/catalog/gammes/${gammeId}/cross-sell/${typeId}`,
        { timeout: 2000 }
      );
      crossProducts = crossResponse.data || [];
    } catch (error) {
      console.warn('Cross-sell non disponible:', error.message);
    }

    // üåê URL canonique optimis√©e
    const url = new URL(request.url);
    const canonical = buildCanonicalUrl(url.origin, gamme, vehicle);

    const loadTime = Date.now() - startTime;

    return json<LoaderData>({
      seo,
      vehicle,
      gamme,
      products: productsData.products,
      filters,
      crossProducts,
      minPrice: productsData.minPrice || 0,
      canonical,
      performance: {
        loadTime,
        cacheHit: productsData.fromCache || false,
        dataSource: 'enhanced-api'
      }
    });

  } catch (error) {
    console.error('üö® Loader error d√©taill√©:', {
      error: error.message,
      params: { gammeId, marqueId, modeleId, typeId },
      url: request.url,
      timestamp: new Date().toISOString()
    });
    
    // üîÑ R√©ponse d'erreur structur√©e
    if (error instanceof Response) {
      throw error;
    }
    
    throw new Response('Erreur serveur interne', { 
      status: 500,
      statusText: 'Internal Server Error'
    });
  }
}

// ========================================
// üõ†Ô∏è FONCTIONS UTILITAIRES AM√âLIOR√âES
// ========================================

function generateFallbackSeo(
  vehicle: VehicleData, 
  gamme: GammeData, 
  productsData: any
): EnhancedSeoData {
  const title = `${gamme.pg_name} ${vehicle.marque.marque_name} ${vehicle.modele.modele_name} ${vehicle.type_name} - Pi√®ces d√©tach√©es`;
  const description = `${gamme.pg_name} compatibles ${vehicle.marque.marque_name} ${vehicle.modele.modele_name} ${vehicle.type_name}. ${productsData.total || 0} pi√®ces disponibles √† prix comp√©titifs.`;
  
  return {
    title,
    description,
    h1: title,
    content: `D√©couvrez notre s√©lection de ${gamme.pg_name.toLowerCase()} pour ${vehicle.marque.marque_name} ${vehicle.modele.modele_name} ${vehicle.type_name}.`,
    keywords: `${gamme.pg_name}, ${vehicle.marque.marque_name}, ${vehicle.modele.modele_name}, pi√®ces d√©tach√©es`,
    generatedAt: new Date().toISOString()
  };
}

function extractFiltersOptimized(products: ProductData[]): FiltersData {
  const manufacturersMap = new Map();
  const qualitiesSet = new Set<string>();
  const sidesSet = new Set<string>();

  // Parcours unique optimis√©
  products.forEach(product => {
    // Manufacturers avec d√©doublonnage
    if (product.manufacturer) {
      manufacturersMap.set(product.manufacturer.id, {
        id: product.manufacturer.id,
        alias: product.manufacturer.alias,
        name: product.manufacturer.alias
      });
      
      // Qualities
      if (product.manufacturer.quality) {
        qualitiesSet.add(product.manufacturer.quality);
      }
    }
    
    // Sides
    if (product.side) {
      sidesSet.add(product.side);
    }
  });

  return {
    manufacturers: Array.from(manufacturersMap.values())
      .sort((a, b) => a.name.localeCompare(b.name)),
    qualities: Array.from(qualitiesSet).sort(),
    sides: Array.from(sidesSet).sort()
  };
}

function buildCanonicalUrl(
  origin: string, 
  gamme: GammeData, 
  vehicle: VehicleData
): string {
  return `${origin}/pieces/${gamme.pg_alias}-${gamme.pg_id}/${vehicle.marque.marque_alias}-${vehicle.marque.marque_id}/${vehicle.modele.modele_alias}-${vehicle.modele.modele_id}/${vehicle.type_alias}-${vehicle.type_id}.html`;
}

// ========================================
// üé® COMPOSANT REACT OPTIMIS√â
// ========================================

export default function GammeCarPage() {
  const data = useLoaderData<LoaderData>();
  const [searchParams, setSearchParams] = useSearchParams();
  const [filteredProducts, setFilteredProducts] = useState(data.products);
  const [showVehicleSelector, setShowVehicleSelector] = useState(false);
  const [showMobileFilters, setShowMobileFilters] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // üîç Gestion des filtres optimis√©e avec debounce
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      const filters = {
        manufacturer: searchParams.getAll('pm'),
        quality: searchParams.getAll('q'),
        stars: searchParams.getAll('s'),
        side: searchParams.getAll('side')
      };

      let filtered = [...data.products];

      // Application des filtres avec performances optimis√©es
      if (filters.manufacturer.length > 0) {
        const manufacturerSet = new Set(filters.manufacturer);
        filtered = filtered.filter(p => manufacturerSet.has(p.manufacturer.alias));
      }

      if (filters.quality.length > 0) {
        const qualitySet = new Set(filters.quality);
        filtered = filtered.filter(p => qualitySet.has(p.manufacturer.quality));
      }

      if (filters.stars.length > 0) {
        const starsSet = new Set(filters.stars);
        filtered = filtered.filter(p => 
          p.manufacturer.stars && starsSet.has(p.manufacturer.stars.toString())
        );
      }

      if (filters.side.length > 0) {
        const sideSet = new Set(filters.side);
        filtered = filtered.filter(p => p.side && sideSet.has(p.side));
      }

      setFilteredProducts(filtered);
      setIsLoading(false);
    }, 100);

    setIsLoading(true);
    return () => clearTimeout(timeoutId);
  }, [searchParams, data.products]);

  const handleFilterChange = (filterType: string, value: string, checked: boolean) => {
    setIsLoading(true);
    
    setSearchParams(prev => {
      const newParams = new URLSearchParams(prev);
      
      if (checked) {
        newParams.append(filterType, value);
      } else {
        const values = newParams.getAll(filterType);
        newParams.delete(filterType);
        values.filter(v => v !== value).forEach(v => newParams.append(filterType, v));
      }
      
      return newParams;
    }, { replace: true });
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* üè∑Ô∏è Header avec breadcrumb enrichi */}
      <div className="bg-white border-b shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <h1 className="text-2xl font-bold mb-2 text-gray-900">
            {data.seo.h1}
          </h1>
          <nav className="text-sm breadcrumb flex items-center space-x-2 text-gray-600">
            <a href="/" className="text-blue-600 hover:text-blue-800 transition-colors">
              Accueil
            </a>
            <span className="text-gray-400">/</span>
            <a 
              href={`/pieces/${data.gamme.pg_alias}-${data.gamme.pg_id}`}
              className="text-blue-600 hover:text-blue-800 transition-colors"
            >
              {data.gamme.pg_name}
            </a>
            <span className="text-gray-400">/</span>
            <span className="font-medium">
              {data.vehicle.marque.marque_name} {data.vehicle.modele.modele_name}
            </span>
          </nav>
          
          {/* üìä Performance indicator */}
          {data.performance.loadTime > 0 && (
            <div className="mt-2 text-xs text-gray-500">
              Charg√© en {data.performance.loadTime}ms 
              {data.performance.cacheHit && ' (cache)'}
            </div>
          )}
        </div>
      </div>

      {/* üì± Barre de filtres mobile am√©lior√©e */}
      <div className="lg:hidden sticky top-0 z-10 bg-white border-b shadow-sm">
        <div className="container mx-auto px-4 py-3 flex gap-3">
          <button
            onClick={() => setShowMobileFilters(true)}
            className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
            disabled={isLoading}
          >
            {isLoading ? 'Filtrage...' : `Filtres (${filteredProducts.length})`}
          </button>
          <button
            onClick={() => setShowVehicleSelector(true)}
            className="flex-1 border border-gray-300 px-4 py-2 rounded-md hover:bg-gray-50 transition-colors"
          >
            Changer v√©hicule
          </button>
        </div>
      </div>

      {/* üèóÔ∏è Contenu principal */}
      <div className="container mx-auto px-4 py-6">
        <div className="flex gap-6">
          {/* üìã Sidebar filtres (desktop) */}
          <aside className="hidden lg:block w-64 flex-shrink-0 space-y-6">
            <div className="bg-white rounded-lg shadow-sm border">
              <FilterSidebar
                filters={data.filters}
                selectedFilters={{
                  manufacturer: searchParams.getAll('pm'),
                  quality: searchParams.getAll('q'),
                  stars: searchParams.getAll('s'),
                  side: searchParams.getAll('side')
                }}
                onFilterChange={handleFilterChange}
                isLoading={isLoading}
              />
            </div>
            
            {/* üîó Cross-sell gammes */}
            {data.crossProducts.length > 0 && (
              <div className="bg-white rounded-lg shadow-sm border p-4">
                <h3 className="font-semibold mb-3 text-gray-900">
                  Autres {data.gamme.family_name || 'pi√®ces'}
                </h3>
                <ul className="space-y-2">
                  {data.crossProducts.slice(0, 8).map(cross => (
                    <li key={cross.pg_id}>
                      <a
                        href={buildCanonicalUrl('', cross, data.vehicle)}
                        className="text-blue-600 hover:text-blue-800 text-sm transition-colors block py-1"
                      >
                        {cross.pg_name}
                        {cross.products_count && (
                          <span className="text-gray-500 ml-1">
                            ({cross.products_count})
                          </span>
                        )}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </aside>

          {/* üì¶ Liste des produits */}
          <main className="flex-1">
            {/* üìä Header avec compteur */}
            <div className="hidden lg:flex justify-between items-center mb-6 bg-white rounded-lg shadow-sm border p-4">
              <div>
                <span className="font-semibold text-lg text-gray-900">
                  {isLoading ? 'Filtrage...' : `${filteredProducts.length} produits`}
                </span>
                {data.minPrice > 0 && (
                  <span className="text-gray-600 ml-2">
                    √† partir de {data.minPrice.toFixed(2)}‚Ç¨
                  </span>
                )}
              </div>
              <button
                onClick={() => setShowVehicleSelector(true)}
                className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
              >
                Modifier v√©hicule
              </button>
            </div>

            {/* üé® Grille de produits avec loading state */}
            <div className="relative">
              {isLoading && (
                <div className="absolute inset-0 bg-white bg-opacity-75 z-10 flex items-center justify-center">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                </div>
              )}
              
              <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                {filteredProducts.map(product => (
                  <ProductCard
                    key={product.id}
                    product={product}
                    vehicle={data.vehicle}
                    className="transform hover:scale-105 transition-transform duration-200"
                  />
                ))}
              </div>

              {/* üìÑ Message si aucun produit */}
              {!isLoading && filteredProducts.length === 0 && (
                <div className="text-center py-12">
                  <p className="text-gray-600 text-lg mb-4">
                    Aucun produit ne correspond √† vos crit√®res
                  </p>
                  <button
                    onClick={() => setSearchParams({})}
                    className="text-blue-600 hover:text-blue-800 underline"
                  >
                    Effacer tous les filtres
                  </button>
                </div>
              )}
            </div>

            {/* üìù Contenu SEO enrichi */}
            {data.seo.content && (
              <div className="mt-12 bg-white rounded-lg shadow-sm border p-6">
                <h2 className="text-xl font-bold mb-4 text-gray-900">
                  Informations sur les {data.gamme.pg_name.toLowerCase()} 
                  {' '}de la {data.vehicle.marque.marque_name} {data.vehicle.modele.modele_name} {data.vehicle.type_name}
                </h2>
                <div 
                  className="prose max-w-none prose-blue"
                  dangerouslySetInnerHTML={{ __html: data.seo.content }}
                />
                {data.seo.generatedAt && (
                  <div className="mt-4 text-xs text-gray-500">
                    Contenu g√©n√©r√© le {new Date(data.seo.generatedAt).toLocaleDateString('fr-FR')}
                  </div>
                )}
              </div>
            )}
          </main>
        </div>
      </div>

      {/* üîÑ Modals */}
      {showVehicleSelector && (
        <VehicleSelector
          currentVehicle={data.vehicle}
          gammeId={data.gamme.pg_id}
          onClose={() => setShowVehicleSelector(false)}
        />
      )}

      {showMobileFilters && (
        <div className="fixed inset-0 z-50 lg:hidden">
          <div 
            className="absolute inset-0 bg-black bg-opacity-50" 
            onClick={() => setShowMobileFilters(false)} 
          />
          <div className="absolute right-0 top-0 h-full w-80 bg-white overflow-y-auto shadow-xl">
            <div className="p-4">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg font-semibold">Filtres</h2>
                <button
                  onClick={() => setShowMobileFilters(false)}
                  className="text-gray-500 hover:text-gray-700 text-xl"
                >
                  ‚úï
                </button>
              </div>
              <FilterSidebar
                filters={data.filters}
                selectedFilters={{
                  manufacturer: searchParams.getAll('pm'),
                  quality: searchParams.getAll('q'),
                  stars: searchParams.getAll('s'),
                  side: searchParams.getAll('side')
                }}
                onFilterChange={handleFilterChange}
                isLoading={isLoading}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}