import { json, type LoaderFunctionArgs, type MetaFunction } from "@remix-run/node";
import { useLoaderData, Link, useSearchParams, useNavigation } from "@remix-run/react";
import React, { useState, useMemo } from 'react';

interface ConstructeurArticle {
  id: string;
  type: string;
  title: string;
  slug: string;
  excerpt: string;
  content: string;
  h1: string;
  h2: string;
  keywords: string[];
  tags: string[];
  publishedAt: string;
  updatedAt: string;
  viewsCount: number;
  readingTime: number;
  brand: string;
  modelsCount: number;
  sections: Array<{
    level: number;
    title: string;
    content: string;
    anchor: string;
  }>;
  legacy_id: number;
  legacy_table: string;
  seo_data: {
    meta_title: string;
    meta_description: string;
    keywords: string[];
  };
}

interface LoaderData {
  constructeurs: ConstructeurArticle[];
  total: number;
  page: number;
  totalPages: number;
  success: boolean;
  search: string;
  letter: string;
  brand: string;
  sortBy: string;
  letters: string[];
  featuredConstructeurs: ConstructeurArticle[];
  popularBrands: Array<{ name: string; count: number; totalViews: number }>;
  stats: {
    totalViews: number;
    avgViews: number;
    totalConstructeurs: number;
    totalModels: number;
  };
}

export async function loader({ request }: LoaderFunctionArgs) {
  const url = new URL(request.url);
  const page = Math.max(1, parseInt(url.searchParams.get('page') || '1', 10));
  const search = url.searchParams.get('search') || '';
  const letter = url.searchParams.get('letter') || '';
  const brand = url.searchParams.get('brand') || '';
  const sortBy = url.searchParams.get('sortBy') || 'name';
  const limit = 24; // 24 constructeurs par page pour une grille 4x6

  try {
    const baseUrl = "http://localhost:3000";
    const queryParams = new URLSearchParams({
      page: page.toString(),
      limit: limit.toString(),
      search,
      letter,
      brand,
      sortBy,
      withStats: 'true'
    });

    const apiUrl = `${baseUrl}/api/blog/constructeurs?${queryParams}`;
    console.log('[DEBUG] Constructeurs API URL:', apiUrl);

    const response = await fetch(apiUrl);
    
    if (!response.ok) {
      throw new Error(`API responded with ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    console.log('[DEBUG] Constructeurs API Response:', { 
      success: data.success, 
      total: data.data?.total || 0,
      constructeursLength: data.data?.constructeurs?.length || 0
    });

    if (!data.success || !data.data) {
      console.warn('[WARNING] API returned unsuccessful response:', data);
      return json({
        constructeurs: [],
        total: 0,
        page: 1,
        totalPages: 1,
        search: '',
        letter: '',
        brand: '',
        sortBy: 'name',
        letters: [],
        featuredConstructeurs: [],
        popularBrands: [],
        stats: { totalViews: 0, avgViews: 0, totalConstructeurs: 0, totalModels: 0 },
        success: false
      });
    }

    // Génération des lettres A-Z disponibles
    const letters = Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i));
    
    // Constructeurs en vedette (les 6 plus populaires)
    const featuredConstructeurs = data.data.constructeurs
      .sort((a: ConstructeurArticle, b: ConstructeurArticle) => b.viewsCount - a.viewsCount)
      .slice(0, 6);

    // Marques populaires (statistiques par marque)
    const brandStats = data.data.constructeurs.reduce((acc: any, constructeur: ConstructeurArticle) => {
      const brandName = constructeur.brand || 'Autre';
      if (!acc[brandName]) {
        acc[brandName] = { count: 0, totalViews: 0 };
      }
      acc[brandName].count++;
      acc[brandName].totalViews += constructeur.viewsCount;
      return acc;
    }, {});

    const popularBrands = Object.entries(brandStats)
      .map(([name, stats]: [string, any]) => ({
        name,
        count: stats.count,
        totalViews: stats.totalViews
      }))
      .sort((a, b) => b.totalViews - a.totalViews)
      .slice(0, 10);

    // Statistiques globales
    const stats = {
      totalViews: data.data.constructeurs.reduce((sum: number, c: ConstructeurArticle) => sum + c.viewsCount, 0),
      avgViews: data.data.constructeurs.length > 0 
        ? Math.round(data.data.constructeurs.reduce((sum: number, c: ConstructeurArticle) => sum + c.viewsCount, 0) / data.data.constructeurs.length)
        : 0,
      totalConstructeurs: data.data.total,
      totalModels: data.data.constructeurs.reduce((sum: number, c: ConstructeurArticle) => sum + (c.modelsCount || 0), 0)
    };

    return json({
      constructeurs: data.data.constructeurs,
      total: data.data.total,
      page: data.data.page,
      totalPages: data.data.totalPages,
      search,
      letter,
      brand,
      sortBy,
      letters,
      featuredConstructeurs,
      popularBrands,
      stats,
      success: true
    });

  } catch (error) {
    console.error('[ERROR] Constructeurs loader failed:', error);
    return json({
      constructeurs: [],
      total: 0,
      page: 1,
      totalPages: 1,
      search: '',
      letter: '',
      brand: '',
      sortBy: 'name',
      letters: [],
      featuredConstructeurs: [],
      popularBrands: [],
      stats: { totalViews: 0, avgViews: 0, totalConstructeurs: 0, totalModels: 0 },
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}

export const meta: MetaFunction<typeof loader> = ({ data }) => {
  const title = data?.search 
    ? `Constructeurs Automobiles - Recherche: ${data.search}`
    : data?.letter 
    ? `Constructeurs Automobiles - Lettre ${data.letter}`
    : "Constructeurs Automobiles - Marques et Histoire Auto";
    
  const description = data?.search
    ? `Découvrez les constructeurs automobiles correspondant à "${data.search}". Histoire, innovations et modèles emblématiques.`
    : data?.letter
    ? `Constructeurs automobiles commençant par ${data.letter}. Découvrez l'histoire et les modèles de ces marques légendaires.`
    : "Explorez l'univers des constructeurs automobiles. Histoire, innovations, modèles emblématiques des plus grandes marques mondiales.";

  return [
    { title },
    { name: "description", content: description },
    { name: "keywords", content: "constructeurs automobiles, marques auto, histoire automobile, modèles voiture, innovation auto" },
    { property: "og:title", content: title },
    { property: "og:description", content: description },
    { property: "og:type", content: "website" },
    { name: "twitter:card", content: "summary_large_image" },
    { name: "twitter:title", content: title },
    { name: "twitter:description", content: description },
    { name: "robots", content: "index, follow" },
    { name: "author", content: "AutoMecanik" }
  ];
};

// Icônes SVG personnalisées
const SearchIcon = () => (
  <svg className="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
  </svg>
);

const BrandIcon = () => (
  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
  </svg>
);

const TrendingIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
  </svg>
);

const ModelIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
  </svg>
);

const ViewIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
  </svg>
);

const CalendarIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
);

// Composant BrandGrid optimisé
const BrandGrid: React.FC<{ constructeurs: ConstructeurArticle[] }> = ({ constructeurs }) => {
  if (constructeurs.length === 0) {
    return (
      <div className="text-center py-12">
        <BrandIcon />
        <h3 className="mt-2 text-sm font-medium text-gray-900">Aucun constructeur trouvé</h3>
        <p className="mt-1 text-sm text-gray-500">Essayez de modifier vos critères de recherche.</p>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {constructeurs.map((constructeur) => (
        <Link
          key={constructeur.id}
          to={`/blog/constructeurs/${constructeur.slug}`}
          className="group bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden border border-gray-200 hover:border-blue-300"
        >
          <div className="aspect-w-16 aspect-h-9 bg-gradient-to-br from-gray-100 to-gray-200">
            <div className="flex items-center justify-center">
              <BrandIcon />
            </div>
          </div>
          <div className="p-4">
            <h3 className="font-semibold text-gray-900 group-hover:text-blue-600 transition-colors mb-1">
              {constructeur.title}
            </h3>
            <p className="text-sm text-gray-600 line-clamp-2 mb-3">
              {constructeur.excerpt}
            </p>
            <div className="flex items-center justify-between text-xs text-gray-500">
              <span className="flex items-center gap-1">
                <ModelIcon />
                {constructeur.modelsCount || 0} modèles
              </span>
              <span className="flex items-center gap-1">
                <ViewIcon />
                {constructeur.viewsCount.toLocaleString()}
              </span>
            </div>
          </div>
        </Link>
      ))}
    </div>
  );
};

// Composant ArticleCarousel optimisé
const ArticleCarousel: React.FC<{ constructeurs: ConstructeurArticle[] }> = ({ constructeurs }) => {
  if (constructeurs.length === 0) return null;

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {constructeurs.map((constructeur) => (
        <Link
          key={constructeur.id}
          to={`/blog/constructeurs/${constructeur.slug}`}
          className="group bg-white rounded-lg shadow-sm hover:shadow-lg transition-all duration-300 overflow-hidden"
        >
          <div className="aspect-w-16 aspect-h-9 bg-gradient-to-br from-blue-100 to-blue-200">
            <div className="flex items-center justify-center">
              <BrandIcon />
            </div>
          </div>
          <div className="p-6">
            <div className="flex items-center justify-between mb-2">
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                {constructeur.brand || 'Constructeur'}
              </span>
              <span className="flex items-center text-sm text-gray-500">
                <TrendingIcon />
                <span className="ml-1">{constructeur.viewsCount.toLocaleString()}</span>
              </span>
            </div>
            <h3 className="font-semibold text-lg text-gray-900 group-hover:text-blue-600 transition-colors mb-2">
              {constructeur.title}
            </h3>
            <p className="text-gray-600 text-sm line-clamp-3 mb-4">
              {constructeur.excerpt}
            </p>
            <div className="flex items-center justify-between text-sm text-gray-500">
              <span className="flex items-center gap-1">
                <CalendarIcon />
                {new Date(constructeur.updatedAt).toLocaleDateString('fr-FR')}
              </span>
              <span className="flex items-center gap-1">
                <ModelIcon />
                {constructeur.modelsCount || 0} modèles
              </span>
            </div>
          </div>
        </Link>
      ))}
    </div>
  );
};

export default function ConstructeursHomePage() {
  const { 
    constructeurs, 
    total, 
    page, 
    totalPages, 
    search, 
    letter, 
    brand, 
    sortBy, 
    letters,
    featuredConstructeurs, 
    popularBrands, 
    stats 
  } = useLoaderData<LoaderData>();
  
  const [searchParams, setSearchParams] = useSearchParams();
  const navigation = useNavigation();
  const isLoading = navigation.state === "loading";

  // État local pour les filtres
  const [localSearch, setLocalSearch] = useState(search);
  
  // Debounce pour la recherche
  React.useEffect(() => {
    const timeoutId = setTimeout(() => {
      if (localSearch !== search) {
        const newParams = new URLSearchParams(searchParams);
        if (localSearch) {
          newParams.set('search', localSearch);
        } else {
          newParams.delete('search');
        }
        newParams.delete('page'); // Reset page lors de nouvelle recherche
        setSearchParams(newParams);
      }
    }, 300);

    return () => clearTimeout(timeoutId);
  }, [localSearch, search, searchParams, setSearchParams]);

  // Fonction pour changer les filtres
  const handleFilterChange = (key: string, value: string) => {
    const newParams = new URLSearchParams(searchParams);
    if (value) {
      newParams.set(key, value);
    } else {
      newParams.delete(key);
    }
    newParams.delete('page'); // Reset page lors de changement de filtre
    setSearchParams(newParams);
  };

  // Pagination
  const handlePageChange = (newPage: number) => {
    const newParams = new URLSearchParams(searchParams);
    newParams.set('page', newPage.toString());
    setSearchParams(newParams);
  };

  const paginationItems = useMemo(() => {
    const items: number[] = [];
    const maxVisible = 5;
    const start = Math.max(1, page - Math.floor(maxVisible / 2));
    const end = Math.min(totalPages, start + maxVisible - 1);

    for (let i = start; i <= end; i++) {
      items.push(i);
    }
    return items;
  }, [page, totalPages]);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header avec gradient */}
      <div className="bg-gradient-to-r from-blue-900 to-blue-700 text-white">
        <div className="container mx-auto px-4 py-12">
          <h1 className="text-4xl font-bold mb-4">Constructeurs Automobiles</h1>
          <p className="text-xl text-blue-100 mb-6">
            Découvrez l'histoire, les innovations et les modèles emblématiques des plus grandes marques mondiales
          </p>
          
          {/* Statistiques rapides */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-8">
            <div className="bg-white/10 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold">{stats.totalConstructeurs}</div>
              <div className="text-sm text-blue-100">Constructeurs</div>
            </div>
            <div className="bg-white/10 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold">{stats.totalModels.toLocaleString()}</div>
              <div className="text-sm text-blue-100">Modèles</div>
            </div>
            <div className="bg-white/10 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold">{Math.round(stats.totalViews / 1000)}K</div>
              <div className="text-sm text-blue-100">Vues totales</div>
            </div>
            <div className="bg-white/10 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold">{stats.avgViews}</div>
              <div className="text-sm text-blue-100">Vues moyenne</div>
            </div>
          </div>
        </div>
      </div>

      {/* Articles en vedette */}
      {featuredConstructeurs.length > 0 && (
        <section className="container mx-auto px-4 py-12">
          <div className="flex items-center gap-2 mb-6">
            <TrendingIcon />
            <h2 className="text-2xl font-bold">Constructeurs en vedette</h2>
          </div>
          <ArticleCarousel constructeurs={featuredConstructeurs} />
        </section>
      )}

      <div className="container mx-auto px-4 py-8">
        {/* Barre de recherche et filtres */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-8">
          <div className="flex flex-col lg:flex-row gap-4">
            {/* Recherche */}
            <div className="flex-1">
              <div className="relative">
                <SearchIcon />
                <input
                  type="text"
                  placeholder="Rechercher un constructeur..."
                  value={localSearch}
                  onChange={(e) => setLocalSearch(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>

            {/* Filtre par lettre */}
            <div className="flex-shrink-0">
              <select
                value={letter}
                onChange={(e) => handleFilterChange('letter', e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Toutes les lettres</option>
                {letters.map((l) => (
                  <option key={l} value={l}>Lettre {l}</option>
                ))}
              </select>
            </div>

            {/* Filtre par marque */}
            <div className="flex-shrink-0">
              <select
                value={brand}
                onChange={(e) => handleFilterChange('brand', e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Toutes les marques</option>
                {popularBrands.slice(0, 10).map((b) => (
                  <option key={b.name} value={b.name}>{b.name} ({b.count})</option>
                ))}
              </select>
            </div>

            {/* Tri */}
            <div className="flex-shrink-0">
              <select
                value={sortBy}
                onChange={(e) => handleFilterChange('sortBy', e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="name">Nom A-Z</option>
                <option value="views">Popularité</option>
                <option value="date">Dernière mise à jour</option>
                <option value="models">Nombre de modèles</option>
              </select>
            </div>
          </div>

          {/* Filtres alphabétiques rapides */}
          <div className="flex flex-wrap gap-2 mt-4">
            <button
              onClick={() => handleFilterChange('letter', '')}
              className={`px-3 py-1 rounded-full text-sm transition-colors ${
                !letter 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              Tous
            </button>
            {letters.slice(0, 13).map((l) => (
              <button
                key={l}
                onClick={() => handleFilterChange('letter', l)}
                className={`px-3 py-1 rounded-full text-sm transition-colors ${
                  letter === l 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                {l}
              </button>
            ))}
          </div>
        </div>

        {/* Résultats */}
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold">
            {search ? `Résultats pour "${search}"` : 
             letter ? `Constructeurs - Lettre ${letter}` : 
             'Tous les constructeurs'}
          </h2>
          <p className="text-gray-600">
            {total.toLocaleString()} constructeur{total !== 1 ? 's' : ''}
            {isLoading && <span className="ml-2 text-blue-500">Chargement...</span>}
          </p>
        </div>

        {/* Grille des constructeurs */}
        <div className={`transition-opacity duration-200 ${isLoading ? 'opacity-50' : ''}`}>
          <BrandGrid constructeurs={constructeurs} />
        </div>

        {/* Pagination */}
        {totalPages > 1 && (
          <nav className="flex items-center justify-center mt-12 space-x-2">
            <button
              onClick={() => handlePageChange(Math.max(1, page - 1))}
              disabled={page <= 1}
              className="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Précédent
            </button>
            
            {paginationItems.map((pageNum) => (
              <button
                key={pageNum}
                onClick={() => handlePageChange(pageNum)}
                className={`px-3 py-2 text-sm font-medium rounded-md ${
                  pageNum === page
                    ? 'bg-blue-500 text-white'
                    : 'text-gray-700 bg-white border border-gray-300 hover:bg-gray-50'
                }`}
              >
                {pageNum}
              </button>
            ))}
            
            <button
              onClick={() => handlePageChange(Math.min(totalPages, page + 1))}
              disabled={page >= totalPages}
              className="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Suivant
            </button>
          </nav>
        )}
      </div>

      {/* Section concepts et prototypes */}
      <section className="bg-white py-12 mt-12">
        <div className="container mx-auto px-4">
          <h2 className="text-2xl font-bold mb-8 text-center">Univers Automobile</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Link
              to="/blog/constructeurs/concepts/electriques"
              className="group relative overflow-hidden rounded-lg shadow-md hover:shadow-xl transition-all duration-300"
            >
              <div className="aspect-w-16 aspect-h-9 bg-gradient-to-br from-green-400 to-green-600">
                <div className="flex items-center justify-center">
                  <svg className="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                </div>
              </div>
              <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex items-end">
                <div className="p-6 text-white">
                  <h3 className="font-semibold text-lg mb-1">Véhicules Électriques</h3>
                  <p className="text-sm opacity-90">Le futur de l'automobile durable</p>
                </div>
              </div>
            </Link>

            <Link
              to="/blog/constructeurs/concepts/autonomes"
              className="group relative overflow-hidden rounded-lg shadow-md hover:shadow-xl transition-all duration-300"
            >
              <div className="aspect-w-16 aspect-h-9 bg-gradient-to-br from-purple-400 to-purple-600">
                <div className="flex items-center justify-center">
                  <svg className="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                </div>
              </div>
              <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex items-end">
                <div className="p-6 text-white">
                  <h3 className="font-semibold text-lg mb-1">Conduite Autonome</h3>
                  <p className="text-sm opacity-90">L'innovation technologique</p>
                </div>
              </div>
            </Link>

            <Link
              to="/blog/constructeurs/concepts/sportives"
              className="group relative overflow-hidden rounded-lg shadow-md hover:shadow-xl transition-all duration-300"
            >
              <div className="aspect-w-16 aspect-h-9 bg-gradient-to-br from-red-400 to-red-600">
                <div className="flex items-center justify-center">
                  <svg className="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                  </svg>
                </div>
              </div>
              <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex items-end">
                <div className="p-6 text-white">
                  <h3 className="font-semibold text-lg mb-1">Supercars</h3>
                  <p className="text-sm opacity-90">Performance et élégance extrême</p>
                </div>
              </div>
            </Link>
          </div>
        </div>
      </section>

      {/* Section marques populaires */}
      {popularBrands.length > 0 && (
        <section className="container mx-auto px-4 py-12">
          <h2 className="text-2xl font-bold mb-6">Marques les plus consultées</h2>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            {popularBrands.slice(0, 10).map((brand) => (
              <button
                key={brand.name}
                onClick={() => handleFilterChange('brand', brand.name)}
                className="p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200 text-center border border-gray-200 hover:border-blue-300"
              >
                <div className="font-semibold text-gray-900">{brand.name}</div>
                <div className="text-sm text-gray-600">{brand.count} articles</div>
                <div className="text-xs text-gray-500">{brand.totalViews.toLocaleString()} vues</div>
              </button>
            ))}
          </div>
        </section>
      )}
    </div>
  );
}
