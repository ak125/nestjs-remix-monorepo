import { json, LoaderFunctionArgs } from "@remix-run/node";
import { useLoaderData } from "@remix-run/react";
import { useState, useMemo } from 'react';
import { Package, Users, TrendingUp, Filter, Search, Download, Menu } from 'lucide-react';

// Loader Remix - ex√©cut√© c√¥t√© serveur
export async function loader({ context }: LoaderFunctionArgs) {
  try {
    // Utilisation directe du service NestJS via le contexte
    if (context.remixService?.integration) {
      console.log('‚úÖ Utilisation du service d\'int√©gration direct');
      const result = await context.remixService.integration.getOrdersForRemix({
        page: 1,
        limit: 50
      });
      
      if (result.success) {
        return json({
          success: true,
          orders: result.orders,
          total: result.total
        });
      }
    }
    
    // Fallback : appel HTTP √† notre propre API
    console.log('‚ö†Ô∏è Fallback vers API HTTP');
    const response = await fetch('http://localhost:3000/api/orders');
    const data = await response.json();
    
    return json({
      success: true,
      orders: data.orders || [],
      total: data.total || 0
    });
    
  } catch (error) {
    console.error('‚ùå Erreur loader:', error);
    return json({
      success: false,
      orders: [],
      total: 0,
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
}

export default function AdminOrdersPage() {
  const data = useLoaderData<typeof loader>();
  const orders = data.orders || [];
  
  console.log('üéØ Remix Loader Data:', {
    success: data.success,
    ordersLength: orders.length,
    total: data.total,
    firstOrder: orders[0]
  });

  // Calculer les statistiques
  const stats = useMemo(() => {
    const totalOrders = orders.length;
    const uniqueCustomers = new Set(orders.map(o => o.customer?.cst_id)).size;
    const totalRevenue = orders.reduce((sum, order) => {
      return sum + (parseFloat(order.ord_total_ttc?.toString() || '0'));
    }, 0);
    const paidOrders = orders.filter(o => o.ord_is_pay === '1' || o.ord_is_pay === 1).length;

    return {
      totalOrders,
      uniqueCustomers,
      totalRevenue,
      paidOrders
    };
  }, [orders]);

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        
        {/* Header */}
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">‚úÖ Interface Remix Loader - Gestion des Commandes</h1>
            <p className="text-gray-600">Donn√©es charg√©es c√¥t√© serveur via Remix Loader</p>
          </div>
        </div>

        {/* Debug info */}
        {!data.success && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            <strong>Erreur:</strong> {(data as any).error}
          </div>
        )}

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="rounded-lg border bg-white shadow-sm p-6">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium">Total Commandes</h3>
              <Package className="h-4 w-4 text-gray-400" />
            </div>
            <div className="mt-2">
              <div className="text-2xl font-bold">{stats.totalOrders}</div>
              <p className="text-xs text-gray-500">commandes charg√©es</p>
            </div>
          </div>

          <div className="rounded-lg border bg-white shadow-sm p-6">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium">Clients Uniques</h3>
              <Users className="h-4 w-4 text-gray-400" />
            </div>
            <div className="mt-2">
              <div className="text-2xl font-bold">{stats.uniqueCustomers}</div>
              <p className="text-xs text-gray-500">clients diff√©rents</p>
            </div>
          </div>

          <div className="rounded-lg border bg-white shadow-sm p-6">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium">Chiffre d'affaires</h3>
              <TrendingUp className="h-4 w-4 text-gray-400" />
            </div>
            <div className="mt-2">
              <div className="text-2xl font-bold">{stats.totalRevenue.toFixed(2)}‚Ç¨</div>
              <p className="text-xs text-gray-500">total TTC</p>
            </div>
          </div>

          <div className="rounded-lg border bg-white shadow-sm p-6">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium">Commandes Pay√©es</h3>
              <Package className="h-4 w-4 text-gray-400" />
            </div>
            <div className="mt-2">
              <div className="text-2xl font-bold">{stats.paidOrders}</div>
              <p className="text-xs text-gray-500">sur {stats.totalOrders}</p>
            </div>
          </div>
        </div>

        {/* Orders List */}
        <div className="rounded-lg border bg-white shadow-sm">
          <div className="p-6">
            <h3 className="text-lg font-semibold">Premi√®res Commandes ({orders.length} sur {data.total})</h3>
          </div>
          <div className="border-t">
            {orders.slice(0, 10).map((order, index) => (
              <div key={order.ord_id} className="p-4 border-b last:border-b-0 hover:bg-gray-50">
                <div className="flex justify-between items-start">
                  <div>
                    <div className="font-medium">Commande #{order.ord_id}</div>
                    <div className="text-sm text-gray-600">
                      {order.customer?.cst_name} {order.customer?.cst_fname}
                    </div>
                    <div className="text-xs text-gray-500">{order.customer?.cst_mail}</div>
                  </div>
                  <div className="text-right">
                    <div className="font-medium">{order.ord_total_ttc}‚Ç¨</div>
                    <div className={`text-xs px-2 py-1 rounded ${
                      order.ord_is_pay === '1' || order.ord_is_pay === 1 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {order.ord_is_pay === '1' || order.ord_is_pay === 1 ? 'Pay√©' : 'En attente'}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

      </div>
    </div>
  );
}
