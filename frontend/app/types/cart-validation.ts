/**
 * üõ°Ô∏è SCH√âMAS DE VALIDATION ZOD POUR LE PANIER
 * 
 * Validation robuste des donn√©es panier avec Zod
 * 
 * @author GitHub Copilot
 * @version 2.0.0
 */

import { z } from 'zod';

// üì¶ SCH√âMAS DE BASE

/**
 * Sch√©ma Zod pour un identifiant de produit
 */
export const ProductIdSchema = z.string()
  .min(1, "L'ID du produit ne peut pas √™tre vide")
  .max(100, "L'ID du produit ne peut pas d√©passer 100 caract√®res")
  .regex(/^[a-zA-Z0-9_-]+$/, "L'ID du produit ne peut contenir que des lettres, chiffres, tirets et underscores");

/**
 * Sch√©ma Zod pour une quantit√©
 */
export const QuantitySchema = z.number()
  .int("La quantit√© doit √™tre un nombre entier")
  .min(1, "La quantit√© doit √™tre au moins 1")
  .max(999, "La quantit√© ne peut pas d√©passer 999");

/**
 * Sch√©ma Zod pour un prix
 */
export const PriceSchema = z.number()
  .min(0, "Le prix ne peut pas √™tre n√©gatif")
  .max(999999.99, "Le prix ne peut pas d√©passer 999,999.99")
  .multipleOf(0.01, "Le prix doit avoir au maximum 2 d√©cimales");

/**
 * Sch√©ma Zod pour un nom de produit
 */
export const ProductNameSchema = z.string()
  .min(1, "Le nom du produit ne peut pas √™tre vide")
  .max(200, "Le nom du produit ne peut pas d√©passer 200 caract√®res")
  .trim();

// üõí SCH√âMAS POUR LES ARTICLES DU PANIER

/**
 * Sch√©ma Zod pour ajouter un article au panier
 */
export const AddToCartRequestSchema = z.object({
  product_id: ProductIdSchema,
  quantity: QuantitySchema,
  price: PriceSchema,
  name: ProductNameSchema,
  description: z.string().max(500, "La description ne peut pas d√©passer 500 caract√®res").optional(),
  image_url: z.string().url("L'URL de l'image doit √™tre valide").optional(),
  category: z.string().max(100, "La cat√©gorie ne peut pas d√©passer 100 caract√®res").optional(),
});

/**
 * Sch√©ma Zod pour un article dans le panier
 */
export const CartItemSchema = z.object({
  id: z.string().min(1, "L'ID de l'article ne peut pas √™tre vide"),
  product_id: ProductIdSchema,
  quantity: QuantitySchema,
  price: PriceSchema,
  name: ProductNameSchema,
  description: z.string().optional(),
  image_url: z.string().url().optional(),
  category: z.string().optional(),
  addedAt: z.string().datetime("La date d'ajout doit √™tre au format ISO"),
});

/**
 * Sch√©ma Zod pour les m√©tadonn√©es du panier
 */
export const CartMetadataSchema = z.object({
  subtotal: PriceSchema,
  tax: PriceSchema.optional(),
  shipping: PriceSchema.optional(),
  total: PriceSchema.optional(),
  promo_code: z.string().max(50).nullable(),
  discount: PriceSchema.optional(),
  shipping_address: z.object({
    street: z.string().min(1).max(200),
    city: z.string().min(1).max(100),
    postal_code: z.string().min(1).max(20),
    country: z.string().min(1).max(100),
  }).optional().nullable(),
});

/**
 * Sch√©ma Zod pour un panier complet
 */
export const CartSchema = z.object({
  id: z.string().min(1, "L'ID du panier ne peut pas √™tre vide"),
  sessionId: z.string().min(1, "L'ID de session ne peut pas √™tre vide"),
  userId: z.string().uuid("L'ID utilisateur doit √™tre un UUID valide").optional().nullable(),
  items: z.array(CartItemSchema),
  metadata: CartMetadataSchema,
  createdAt: z.string().datetime("La date de cr√©ation doit √™tre au format ISO"),
  updatedAt: z.string().datetime("La date de mise √† jour doit √™tre au format ISO"),
});

// üîÑ SCH√âMAS POUR LES MISES √Ä JOUR

/**
 * Sch√©ma Zod pour mettre √† jour la quantit√© d'un article
 */
export const UpdateCartItemQuantitySchema = z.object({
  quantity: QuantitySchema,
});

/**
 * Sch√©ma Zod pour supprimer un article du panier
 */
export const RemoveCartItemSchema = z.object({
  product_id: ProductIdSchema,
});

/**
 * Sch√©ma Zod pour appliquer un code promo
 */
export const ApplyPromoCodeSchema = z.object({
  promo_code: z.string()
    .min(1, "Le code promo ne peut pas √™tre vide")
    .max(50, "Le code promo ne peut pas d√©passer 50 caract√®res")
    .regex(/^[A-Z0-9_-]+$/, "Le code promo ne peut contenir que des majuscules, chiffres, tirets et underscores"),
});

// üìä SCH√âMAS POUR LES R√âPONSES API

/**
 * Sch√©ma Zod pour les r√©ponses d'erreur
 */
export const CartErrorResponseSchema = z.object({
  error: z.string(),
  message: z.string(),
  statusCode: z.number(),
  timestamp: z.string().datetime(),
});

/**
 * Sch√©ma Zod pour les r√©ponses de succ√®s
 */
export const CartSuccessResponseSchema = z.object({
  success: z.boolean(),
  message: z.string().optional(),
  data: CartSchema,
});

// üè∑Ô∏è TYPES TYPESCRIPT INF√âR√âS

export type AddToCartRequest = z.infer<typeof AddToCartRequestSchema>;
export type CartItem = z.infer<typeof CartItemSchema>;
export type CartMetadata = z.infer<typeof CartMetadataSchema>;
export type Cart = z.infer<typeof CartSchema>;
export type UpdateCartItemQuantity = z.infer<typeof UpdateCartItemQuantitySchema>;
export type RemoveCartItem = z.infer<typeof RemoveCartItemSchema>;
export type ApplyPromoCode = z.infer<typeof ApplyPromoCodeSchema>;
export type CartErrorResponse = z.infer<typeof CartErrorResponseSchema>;
export type CartSuccessResponse = z.infer<typeof CartSuccessResponseSchema>;

// üõ†Ô∏è UTILITAIRES DE VALIDATION

/**
 * Valide et parse une requ√™te d'ajout au panier
 */
export const validateAddToCartRequest = (data: unknown): AddToCartRequest => {
  return AddToCartRequestSchema.parse(data);
};

/**
 * Valide et parse un panier complet
 */
export const validateCart = (data: unknown): Cart => {
  return CartSchema.parse(data);
};

/**
 * Validation s√©curis√©e qui retourne un r√©sultat avec erreurs
 */
export const safeValidateAddToCartRequest = (data: unknown) => {
  return AddToCartRequestSchema.safeParse(data);
};

/**
 * Validation s√©curis√©e pour un panier
 */
export const safeValidateCart = (data: unknown) => {
  return CartSchema.safeParse(data);
};

// üéØ SCH√âMAS PARTIELS POUR LES MISES √Ä JOUR

/**
 * Sch√©ma pour une mise √† jour partielle d'article
 */
export const PartialCartItemSchema = CartItemSchema.partial().extend({
  id: z.string().min(1), // L'ID est toujours requis
});

/**
 * Sch√©ma pour une mise √† jour partielle de panier
 */
export const PartialCartSchema = CartSchema.partial().extend({
  id: z.string().min(1), // L'ID est toujours requis
});

export type PartialCartItem = z.infer<typeof PartialCartItemSchema>;
export type PartialCart = z.infer<typeof PartialCartSchema>;