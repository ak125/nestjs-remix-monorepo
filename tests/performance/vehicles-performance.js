/**
 * üöó TESTS DE PERFORMANCE - MODULE V√âHICULES
 * Test des APIs automobiles avec donn√©es r√©elles
 */

const API_BASE = 'http://localhost:3001';
const ENDPOINTS = {
  stats: '/api/catalog/vehicles/stats',
  brands: '/api/catalog/vehicles/brands',
  modelsById: '/api/catalog/vehicles/brands/{brandId}/models',
  typesById: '/api/catalog/vehicles/models/{modelId}/types',
  search: '/api/catalog/vehicles/search',
  compatibility: '/api/catalog/vehicles/compatibility/{pieceId}',
  partsByVehicle: '/api/catalog/vehicles/parts/by-vehicle',
  partsSearch: '/api/catalog/vehicles/parts/search',
  quickSearch: '/api/catalog/vehicles/parts/quick-search'
};

let testResults = [];
let startTime = Date.now();

console.log('üöó D√âMARRAGE DES TESTS DE PERFORMANCE - MODULE V√âHICULES');
console.log('===============================================================');
console.log(`üåê API Base: ${API_BASE}`);
console.log(`‚è∞ D√©but des tests: ${new Date().toISOString()}\n`);

/**
 * Fonction utilitaire pour tester un endpoint
 */
async function testEndpoint(name, url, expectedStatus = 200, description = '') {
  const startTime = Date.now();
  
  try {
    console.log(`üß™ Test: ${name}...`);
    
    const response = await fetch(url);
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    const result = {
      name,
      description,
      url,
      status: response.status,
      duration: `${duration}ms`,
      success: response.status === expectedStatus,
      timestamp: new Date().toISOString()
    };

    if (response.ok) {
      const data = await response.json();
      result.dataSize = JSON.stringify(data).length;
      result.hasData = data?.success !== false;
      
      // Log sp√©cifique par type de donn√©es
      if (data.data) {
        if (Array.isArray(data.data)) {
          result.itemsCount = data.data.length;
        } else if (typeof data.data === 'object') {
          result.dataFields = Object.keys(data.data);
        }
      }
    }

    testResults.push(result);
    
    const statusIcon = result.success ? '‚úÖ' : '‚ùå';
    console.log(`   ${statusIcon} ${name}: ${result.duration} (${result.status})`);
    
    if (result.itemsCount) {
      console.log(`      üìä √âl√©ments: ${result.itemsCount}`);
    }
    if (result.dataFields) {
      console.log(`      üîë Champs: ${result.dataFields.join(', ')}`);
    }
    
    return result;
    
  } catch (error) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    const result = {
      name,
      description,
      url,
      status: 'ERROR',
      duration: `${duration}ms`,
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
    
    testResults.push(result);
    console.log(`   ‚ùå ${name}: ERREUR - ${error.message}`);
    
    return result;
  }
}

/**
 * Tests principaux
 */
async function runPerformanceTests() {
  console.log('üìä TESTS DES STATISTIQUES V√âHICULES');
  console.log('------------------------------------');
  
  await testEndpoint(
    'Stats v√©hicules',
    `${API_BASE}${ENDPOINTS.stats}`,
    200,
    'Statistiques g√©n√©rales des v√©hicules'
  );
  
  console.log('\nüè≠ TESTS DES MARQUES AUTOMOBILES');
  console.log('--------------------------------');
  
  await testEndpoint(
    'Liste marques',
    `${API_BASE}${ENDPOINTS.brands}`,
    200,
    'Toutes les marques automobiles actives'
  );
  
  console.log('\nüöô TESTS DES MOD√àLES ET TYPES');
  console.log('-----------------------------');
  
  // Test avec une marque connue (par exemple Peugeot = ID 1)
  await testEndpoint(
    'Mod√®les Peugeot',
    `${API_BASE}${ENDPOINTS.modelsById.replace('{brandId}', '1')}`,
    200,
    'Mod√®les de la marque Peugeot'
  );
  
  // Test avec un mod√®le connu (par exemple 206 = ID 1)
  await testEndpoint(
    'Types 206',
    `${API_BASE}${ENDPOINTS.typesById.replace('{modelId}', '1')}`,
    200,
    'Types/motorisations Peugeot 206'
  );
  
  console.log('\nüîç TESTS DE RECHERCHE V√âHICULES');
  console.log('-------------------------------');
  
  await testEndpoint(
    'Recherche simple',
    `${API_BASE}${ENDPOINTS.search}?limit=20`,
    200,
    'Recherche v√©hicules sans filtre'
  );
  
  await testEndpoint(
    'Recherche par marque',
    `${API_BASE}${ENDPOINTS.search}?brandId=1&limit=20`,
    200,
    'Recherche v√©hicules Peugeot'
  );
  
  await testEndpoint(
    'Recherche par carburant',
    `${API_BASE}${ENDPOINTS.search}?fuelType=diesel&limit=20`,
    200,
    'Recherche v√©hicules diesel'
  );
  
  console.log('\nüîß TESTS DE COMPATIBILIT√â PI√àCES');
  console.log('--------------------------------');
  
  // Test avec une pi√®ce connue
  await testEndpoint(
    'Compatibilit√© pi√®ce',
    `${API_BASE}${ENDPOINTS.compatibility.replace('{pieceId}', '1')}`,
    200,
    'V√©hicules compatibles avec pi√®ce ID 1'
  );
  
  await testEndpoint(
    'Pi√®ces par v√©hicule',
    `${API_BASE}${ENDPOINTS.partsByVehicle}?brandId=1&modelId=1`,
    200,
    'Pi√®ces pour Peugeot 206'
  );
  
  console.log('\nüîé TESTS DE RECHERCHE PI√àCES');
  console.log('----------------------------');
  
  await testEndpoint(
    'Recherche pi√®ces simple',
    `${API_BASE}${ENDPOINTS.partsSearch}?limit=20`,
    200,
    'Recherche pi√®ces sans filtre'
  );
  
  await testEndpoint(
    'Recherche pi√®ces gamme',
    `${API_BASE}${ENDPOINTS.partsSearch}?gamme=freinage&limit=20`,
    200,
    'Recherche pi√®ces freinage'
  );
  
  await testEndpoint(
    'Recherche rapide',
    `${API_BASE}${ENDPOINTS.quickSearch}?q=plaquette&limit=10`,
    200,
    'Recherche rapide "plaquette"'
  );
}

/**
 * Analyse des r√©sultats
 */
function analyzeResults() {
  console.log('\nüìä ANALYSE DES PERFORMANCES');
  console.log('===========================');
  
  const totalTests = testResults.length;
  const successfulTests = testResults.filter(r => r.success).length;
  const failedTests = totalTests - successfulTests;
  
  const durations = testResults
    .filter(r => r.success)
    .map(r => parseInt(r.duration.replace('ms', '')));
  
  const avgDuration = durations.length > 0 
    ? Math.round(durations.reduce((a, b) => a + b, 0) / durations.length)
    : 0;
  
  const maxDuration = Math.max(...durations);
  const minDuration = Math.min(...durations);
  
  console.log(`‚úÖ Tests r√©ussis: ${successfulTests}/${totalTests}`);
  console.log(`‚ùå Tests √©chou√©s: ${failedTests}`);
  console.log(`‚è±Ô∏è  Temps moyen: ${avgDuration}ms`);
  console.log(`‚ö° Plus rapide: ${minDuration}ms`);
  console.log(`üêå Plus lent: ${maxDuration}ms`);
  
  // Classement par performance
  console.log('\nüèÜ CLASSEMENT PAR PERFORMANCE:');
  testResults
    .filter(r => r.success)
    .sort((a, b) => parseInt(a.duration) - parseInt(b.duration))
    .slice(0, 5)
    .forEach((result, index) => {
      console.log(`   ${index + 1}. ${result.name}: ${result.duration}`);
    });
  
  // Tests les plus lents
  console.log('\nüêå TESTS LES PLUS LENTS:');
  testResults
    .filter(r => r.success)
    .sort((a, b) => parseInt(b.duration) - parseInt(a.duration))
    .slice(0, 3)
    .forEach((result, index) => {
      console.log(`   ${index + 1}. ${result.name}: ${result.duration}`);
    });
  
  // Erreurs
  if (failedTests > 0) {
    console.log('\n‚ùå TESTS EN ERREUR:');
    testResults
      .filter(r => !r.success)
      .forEach(result => {
        console.log(`   ‚Ä¢ ${result.name}: ${result.error || result.status}`);
      });
  }
}

/**
 * Rapport d√©taill√©
 */
function generateDetailedReport() {
  const totalTime = Date.now() - startTime;
  
  console.log('\nüìã RAPPORT D√âTAILL√â');
  console.log('==================');
  
  testResults.forEach((result, index) => {
    const icon = result.success ? '‚úÖ' : '‚ùå';
    console.log(`\n${index + 1}. ${icon} ${result.name}`);
    console.log(`   URL: ${result.url}`);
    console.log(`   Status: ${result.status}`);
    console.log(`   Dur√©e: ${result.duration}`);
    
    if (result.description) {
      console.log(`   Description: ${result.description}`);
    }
    
    if (result.itemsCount) {
      console.log(`   √âl√©ments retourn√©s: ${result.itemsCount}`);
    }
    
    if (result.dataSize) {
      console.log(`   Taille donn√©es: ${result.dataSize} bytes`);
    }
    
    if (result.error) {
      console.log(`   Erreur: ${result.error}`);
    }
  });
  
  console.log(`\n‚è∞ Temps total d'ex√©cution: ${totalTime}ms`);
  console.log(`üèÅ Tests termin√©s: ${new Date().toISOString()}`);
}

/**
 * Ex√©cution principale
 */
async function main() {
  try {
    await runPerformanceTests();
    analyzeResults();
    generateDetailedReport();
    
    console.log('\nüéØ TESTS DE PERFORMANCE TERMIN√âS !');
    console.log('==================================');
    
    const successRate = (testResults.filter(r => r.success).length / testResults.length) * 100;
    console.log(`üìä Taux de r√©ussite: ${successRate.toFixed(1)}%`);
    
    if (successRate >= 90) {
      console.log('üéâ EXCELLENT ! Le module v√©hicules est tr√®s performant !');
    } else if (successRate >= 70) {
      console.log('üëç BON ! Quelques optimisations possibles.');
    } else {
      console.log('‚ö†Ô∏è  ATTENTION ! Plusieurs APIs n√©cessitent des corrections.');
    }
    
  } catch (error) {
    console.error('üí• ERREUR CRITIQUE:', error);
    process.exit(1);
  }
}

// Lancement des tests
main().catch(console.error);
