#!/bin/bash

# üß™ SCRIPT DE TEST - VEHICLE SELECTOR MODERNIS√â
# 
# Test automatis√© pour valider le VehicleSelector avec les donn√©es r√©elles
# 
# @version 1.0.0
# @since 2025-09-13

echo "üöó ==============================================="
echo "   TEST VEHICLE SELECTOR MODERNIS√â"  
echo "==============================================="
echo ""

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
FRONTEND_URL="http://localhost:3001"
BACKEND_URL="http://localhost:3000"
TEST_PAGE="/test-vehicle-selector"

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# 1. V√©rification du backend NestJS
echo "üìä Test 1: V√©rification Backend NestJS"
echo "----------------------------------------"

# Test de l'API Brands
print_info "Test API /api/vehicles/brands..."
BRANDS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${BACKEND_URL}/api/vehicles/brands" 2>/dev/null)
if [ "$BRANDS_STATUS" = "200" ]; then
    print_result 0 "API Brands op√©rationnelle (Status: $BRANDS_STATUS)"
else
    print_result 1 "API Brands non disponible (Status: $BRANDS_STATUS)"
fi

# Test de l'API Models
print_info "Test API /api/vehicles/models..."
MODELS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${BACKEND_URL}/api/vehicles/models?brandId=48&year=1997" 2>/dev/null)
if [ "$MODELS_STATUS" = "200" ]; then
    print_result 0 "API Models op√©rationnelle (Status: $MODELS_STATUS)"
else
    print_result 1 "API Models non disponible (Status: $MODELS_STATUS)"
fi

# Test de l'API Types
print_info "Test API /api/vehicles/types..."
TYPES_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${BACKEND_URL}/api/vehicles/types?modelId=48022" 2>/dev/null)
if [ "$TYPES_STATUS" = "200" ]; then
    print_result 0 "API Types op√©rationnelle (Status: $TYPES_STATUS)"
else
    print_result 1 "API Types non disponible (Status: $TYPES_STATUS)"
fi

echo ""

# 2. Test des donn√©es sp√©cifiques DAEWOO LANOS
echo "üîç Test 2: Validation Donn√©es DAEWOO LANOS"
echo "-------------------------------------------"

# R√©cup√©ration des donn√©es de test
print_info "R√©cup√©ration des donn√©es DAEWOO LANOS..."
DAEWOO_DATA=$(curl -s "${BACKEND_URL}/api/vehicles/brands" 2>/dev/null | grep -i "daewoo" | head -1)
if [ ! -z "$DAEWOO_DATA" ]; then
    print_result 0 "Donn√©es DAEWOO trouv√©es dans l'API"
else
    print_result 1 "Donn√©es DAEWOO non trouv√©es"
fi

# Test des mod√®les LANOS
print_info "Test mod√®les LANOS pour DAEWOO (ID: 48)..."
LANOS_DATA=$(curl -s "${BACKEND_URL}/api/vehicles/models?brandId=48" 2>/dev/null | grep -i "lanos")
if [ ! -z "$LANOS_DATA" ]; then
    print_result 0 "Mod√®le LANOS trouv√© pour DAEWOO"
else
    print_result 1 "Mod√®le LANOS non trouv√©"
fi

echo ""

# 3. Test du frontend Remix
echo "üé® Test 3: Frontend Remix et Page de Test"
echo "------------------------------------------"

# V√©rification que le frontend est actif
print_info "V√©rification du frontend Remix..."
FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${FRONTEND_URL}" 2>/dev/null)
if [ "$FRONTEND_STATUS" = "200" ]; then
    print_result 0 "Frontend Remix op√©rationnel (Status: $FRONTEND_STATUS)"
else
    print_result 1 "Frontend Remix non disponible (Status: $FRONTEND_STATUS)"
    print_warning "Assurez-vous que 'npm run dev' est lanc√© dans /frontend"
fi

# Test de la page de test du VehicleSelector
print_info "Test de la page de test VehicleSelector..."
TEST_PAGE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${FRONTEND_URL}${TEST_PAGE}" 2>/dev/null)
if [ "$TEST_PAGE_STATUS" = "200" ]; then
    print_result 0 "Page de test VehicleSelector accessible (Status: $TEST_PAGE_STATUS)"
else
    print_result 1 "Page de test VehicleSelector non accessible (Status: $TEST_PAGE_STATUS)"
fi

echo ""

# 4. Test des composants React
echo "‚öõÔ∏è Test 4: Composants React VehicleSelector"
echo "--------------------------------------------"

# V√©rification de l'existence des fichiers
VEHICLE_SELECTOR_FILE="frontend/app/components/vehicle/VehicleSelector.tsx"
if [ -f "$VEHICLE_SELECTOR_FILE" ]; then
    print_result 0 "Fichier VehicleSelector.tsx pr√©sent"
    
    # V√©rification du contenu du composant
    if grep -q "interface VehicleBrand" "$VEHICLE_SELECTOR_FILE"; then
        print_result 0 "Interfaces TypeScript d√©finies"
    else
        print_result 1 "Interfaces TypeScript manquantes"
    fi
    
    if grep -q "const BrandSchema = z.object" "$VEHICLE_SELECTOR_FILE"; then
        print_result 0 "Validation Zod impl√©ment√©e"
    else
        print_result 1 "Validation Zod manquante"
    fi
    
    if grep -q "fetchWithRetry" "$VEHICLE_SELECTOR_FILE"; then
        print_result 0 "Retry logic impl√©ment√©e"
    else
        print_result 1 "Retry logic manquante"
    fi
    
    if grep -q "gtag" "$VEHICLE_SELECTOR_FILE"; then
        print_result 0 "Analytics Google int√©gr√©es"
    else
        print_result 1 "Analytics Google manquantes"
    fi
    
else
    print_result 1 "Fichier VehicleSelector.tsx manquant"
fi

echo ""

# 5. Instructions pour les tests manuels
echo "üß™ Test 5: Instructions Tests Manuels"
echo "--------------------------------------"

print_info "Pour tester manuellement le VehicleSelector modernis√©:"
echo ""
echo "1. üåê Ouvrez votre navigateur sur: ${FRONTEND_URL}${TEST_PAGE}"
echo ""
echo "2. üîç Testez la s√©lection progressive:"
echo "   ‚Ä¢ S√©lectionnez 'DAEWOO' dans le premier select"
echo "   ‚Ä¢ Choisissez '1997' dans le select ann√©e"
echo "   ‚Ä¢ S√©lectionnez 'LANOS' dans le select mod√®le"
echo "   ‚Ä¢ Choisissez '1.3 Essence' dans le select motorisation"
echo ""
echo "3. üéØ V√©rifiez les fonctionnalit√©s:"
echo "   ‚Ä¢ ‚úÖ Loading spinners pendant les appels API"
echo "   ‚Ä¢ ‚úÖ Messages d'erreur en cas de probl√®me r√©seau"
echo "   ‚Ä¢ ‚úÖ Navigation clavier (Tab, Enter, √âchap)"
echo "   ‚Ä¢ ‚úÖ Responsive design sur mobile/desktop"
echo "   ‚Ä¢ ‚úÖ Analytics dans la console d√©veloppeur"
echo ""
echo "4. üöÄ Testez le bouton 'Pr√©charger DAEWOO LANOS':"
echo "   ‚Ä¢ Le s√©lecteur doit se remplir automatiquement"
echo "   ‚Ä¢ Les logs d'activit√© doivent s'afficher"
echo ""

echo ""

# 6. R√©sum√© final
echo "üìã R√âSUM√â DES TESTS"
echo "==================="

if [ "$BRANDS_STATUS" = "200" ] && [ "$MODELS_STATUS" = "200" ] && [ "$TYPES_STATUS" = "200" ]; then
    print_result 0 "APIs Backend: Toutes op√©rationnelles"
else
    print_result 1 "APIs Backend: Certaines non disponibles"
fi

if [ "$FRONTEND_STATUS" = "200" ] && [ "$TEST_PAGE_STATUS" = "200" ]; then
    print_result 0 "Frontend: Op√©rationnel avec page de test"
else
    print_result 1 "Frontend: Probl√®me d'accessibilit√©"
fi

if [ -f "$VEHICLE_SELECTOR_FILE" ]; then
    print_result 0 "VehicleSelector: Composant modernis√© pr√©sent"
else
    print_result 1 "VehicleSelector: Composant manquant"
fi

echo ""
print_info "üéâ Test termin√©! VehicleSelector modernis√© pr√™t pour validation manuelle."
print_info "üìä Consultez le rapport d√©taill√©: RAPPORT_VEHICLESELECTOR_MODERNISATION.md"

echo ""
echo "üîó Liens utiles:"
echo "   ‚Ä¢ Page de test: ${FRONTEND_URL}${TEST_PAGE}"
echo "   ‚Ä¢ API Brands: ${BACKEND_URL}/api/vehicles/brands"
echo "   ‚Ä¢ Documentation: /RAPPORT_VEHICLESELECTOR_MODERNISATION.md"

echo ""
echo "==============================================="