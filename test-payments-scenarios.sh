#!/bin/bash

# ========================================
# TESTS CURL SC√âNARIOS M√âTIER - PAIEMENTS
# ========================================
# Tests de sc√©narios complets et cas d'usage r√©els

API_BASE="http://localhost:3000"
API_PAYMENTS="${API_BASE}/api/payments"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
NC='\033[0m'

log_scenario() {
    echo -e "${MAGENTA}üé¨ $1${NC}"
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Variables pour stocker les IDs cr√©√©s pendant les tests
CREATED_ORDERS=()

# Fonction pour tester un sc√©nario complet
test_scenario() {
    local scenario_name="$1"
    local expected_status="$2"
    local response="$3"
    
    echo "========================================="
    log_scenario "SC√âNARIO: $scenario_name"
    echo "========================================="
    
    status_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | head -n -1)
    
    echo "Status Code: $status_code"
    echo "Response:"
    echo "$body" | jq '.' 2>/dev/null || echo "$body"
    
    if [ "$status_code" -eq "$expected_status" ]; then
        log_success "Sc√©nario r√©ussi ‚úì"
    else
        log_error "Sc√©nario √©chou√© - Attendu $expected_status, re√ßu $status_code"
    fi
    
    echo ""
    return $status_code
}

# Fonction pour extraire l'ID d'une commande cr√©√©e
extract_order_id() {
    local response="$1"
    local body=$(echo "$response" | head -n -1)
    echo "$body" | jq -r '.ord_id // empty' 2>/dev/null
}

echo "========================================"
echo "üé¨ TESTS SC√âNARIOS M√âTIER - PAIEMENTS"
echo "========================================"
echo "Tests de cas d'usage r√©els et workflows complets"
echo "Tables: ___xtr_order, ic_postback"
echo "========================================"

# ========================================
# SC√âNARIO 1: PAIEMENT CARTE BANCAIRE R√âUSSI
# ========================================
log_scenario "SC√âNARIO 1: Paiement par carte bancaire complet"

# √âtape 1: Cr√©ation de la commande
log_info "√âtape 1/4: Cr√©ation de la commande"
response=$(curl -s -w "\n%{http_code}" \
    -X POST \
    -H "Content-Type: application/json" \
    -d '{
        "ord_cst_id": "81500",
        "ord_total_ttc": "149.99",
        "ord_currency": "EUR",
        "payment_gateway": "CYBERPLUS",
        "return_url": "https://boutique.example.com/payment/success",
        "cancel_url": "https://boutique.example.com/payment/cancel",
        "callback_url": "https://boutique.example.com/api/payment/callback",
        "payment_metadata": {
            "product_name": "Formation JavaScript Avanc√©",
            "customer_email": "client@example.com",
            "campaign": "summer_2025"
        }
    }' \
    "$API_PAYMENTS")

test_scenario "Cr√©ation commande formation en ligne" 201 "$response"
ORDER_ID=$(extract_order_id "$response")
if [ -n "$ORDER_ID" ]; then
    CREATED_ORDERS+=("$ORDER_ID")
    log_success "Commande cr√©√©e avec ID: $ORDER_ID"
fi

# √âtape 2: Initiation du paiement
if [ -n "$ORDER_ID" ]; then
    log_info "√âtape 2/4: Initiation du paiement"
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d '{
            "payment_gateway": "CYBERPLUS",
            "return_url": "https://boutique.example.com/payment/success",
            "cancel_url": "https://boutique.example.com/payment/cancel",
            "callback_url": "https://boutique.example.com/api/payment/callback"
        }' \
        "$API_PAYMENTS/${ORDER_ID}/initiate")
    
    test_scenario "Initiation paiement CYBERPLUS" 200 "$response"
fi

# √âtape 3: V√©rification du statut (en cours)
if [ -n "$ORDER_ID" ]; then
    log_info "√âtape 3/4: V√©rification du statut avant paiement"
    response=$(curl -s -w "\n%{http_code}" \
        -H "Content-Type: application/json" \
        "$API_PAYMENTS/${ORDER_ID}/status")
    
    test_scenario "Statut avant paiement (EN_ATTENTE)" 200 "$response"
fi

# √âtape 4: Simulation callback de succ√®s
if [ -n "$ORDER_ID" ]; then
    log_info "√âtape 4/4: Callback de succ√®s de la banque"
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d '{
            "transactionId": "CYBERPLUS_'$(date +%s)'",
            "orderId": "'$ORDER_ID'",
            "amount": "149.99",
            "currency": "EUR",
            "status": "SUCCESS",
            "gateway_response": {
                "response_code": "00",
                "auth_code": "654321",
                "card_type": "VISA",
                "card_last4": "1234"
            }
        }' \
        "$API_PAYMENTS/callback/cyberplus")
    
    test_scenario "Callback succ√®s CYBERPLUS" 200 "$response"
    
    # V√©rification finale du statut
    sleep 1
    log_info "V√©rification finale: Statut apr√®s paiement"
    response=$(curl -s -w "\n%{http_code}" \
        -H "Content-Type: application/json" \
        "$API_PAYMENTS/${ORDER_ID}/status")
    
    test_scenario "Statut apr√®s paiement (PAY√â)" 200 "$response"
fi

# ========================================
# SC√âNARIO 2: PAIEMENT STRIPE √âCHOU√â
# ========================================
log_scenario "SC√âNARIO 2: Paiement Stripe avec √©chec"

# Cr√©ation commande pour test d'√©chec
log_info "√âtape 1/3: Cr√©ation commande e-commerce"
response=$(curl -s -w "\n%{http_code}" \
    -X POST \
    -H "Content-Type: application/json" \
    -d '{
        "ord_cst_id": "81525",
        "ord_total_ttc": "89.50",
        "ord_currency": "EUR",
        "payment_gateway": "STRIPE",
        "return_url": "https://shop.example.com/success",
        "cancel_url": "https://shop.example.com/cancel",
        "payment_metadata": {
            "product_type": "ebook",
            "product_id": "ebook_nodejs_2025",
            "discount_applied": "WELCOME10"
        }
    }' \
    "$API_PAYMENTS")

test_scenario "Cr√©ation commande e-book" 201 "$response"
ORDER_ID_2=$(extract_order_id "$response")
if [ -n "$ORDER_ID_2" ]; then
    CREATED_ORDERS+=("$ORDER_ID_2")
fi

# Simulation callback d'√©chec
if [ -n "$ORDER_ID_2" ]; then
    log_info "√âtape 2/3: Callback d'√©chec Stripe"
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d '{
            "transactionId": "pi_failed_'$(date +%s)'",
            "orderId": "'$ORDER_ID_2'",
            "amount": "89.50",
            "currency": "EUR",
            "status": "FAILED",
            "gateway_response": {
                "error_code": "card_declined",
                "error_message": "Your card was declined.",
                "decline_code": "insufficient_funds"
            }
        }' \
        "$API_PAYMENTS/callback/stripe")
    
    test_scenario "Callback √©chec Stripe" 200 "$response"
    
    # V√©rification du statut apr√®s √©chec
    log_info "√âtape 3/3: V√©rification statut apr√®s √©chec"
    response=$(curl -s -w "\n%{http_code}" \
        -H "Content-Type: application/json" \
        "$API_PAYMENTS/${ORDER_ID_2}/status")
    
    test_scenario "Statut apr√®s √©chec (toujours EN_ATTENTE)" 200 "$response"
fi

# ========================================
# SC√âNARIO 3: PAIEMENT PAYPAL AVEC REMBOURSEMENT
# ========================================
log_scenario "SC√âNARIO 3: Workflow PayPal avec remboursement"

# Cr√©ation commande
log_info "√âtape 1/5: Cr√©ation commande service"
response=$(curl -s -w "\n%{http_code}" \
    -X POST \
    -H "Content-Type: application/json" \
    -d '{
        "ord_cst_id": "81522",
        "ord_total_ttc": "299.00",
        "ord_currency": "EUR",
        "payment_gateway": "PAYPAL",
        "return_url": "https://services.example.com/payment/return",
        "cancel_url": "https://services.example.com/payment/cancel",
        "payment_metadata": {
            "service_type": "consultation",
            "duration_hours": "3",
            "consultant_id": "consultant_123"
        }
    }' \
    "$API_PAYMENTS")

test_scenario "Cr√©ation commande consultation" 201 "$response"
ORDER_ID_3=$(extract_order_id "$response")
if [ -n "$ORDER_ID_3" ]; then
    CREATED_ORDERS+=("$ORDER_ID_3")
fi

# Initiation PayPal
if [ -n "$ORDER_ID_3" ]; then
    log_info "√âtape 2/5: Initiation PayPal"
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d '{
            "payment_gateway": "PAYPAL",
            "return_url": "https://services.example.com/payment/return",
            "cancel_url": "https://services.example.com/payment/cancel"
        }' \
        "$API_PAYMENTS/${ORDER_ID_3}/initiate")
    
    test_scenario "Initiation PayPal" 200 "$response"
fi

# Callback de succ√®s PayPal
if [ -n "$ORDER_ID_3" ]; then
    log_info "√âtape 3/5: Callback succ√®s PayPal"
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d '{
            "transactionId": "PAYPAL_'$(date +%s)'",
            "orderId": "'$ORDER_ID_3'",
            "amount": "299.00",
            "currency": "EUR",
            "status": "SUCCESS",
            "gateway_response": {
                "payment_id": "PAYID-'$(date +%s)'",
                "payer_email": "customer@example.com",
                "payer_status": "VERIFIED"
            }
        }' \
        "$API_PAYMENTS/callback/paypal")
    
    test_scenario "Callback succ√®s PayPal" 200 "$response"
fi

# Simulation d'un remboursement
if [ -n "$ORDER_ID_3" ]; then
    log_info "√âtape 4/5: Simulation remboursement"
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d '{
            "transactionId": "REFUND_'$(date +%s)'",
            "orderId": "'$ORDER_ID_3'",
            "amount": "299.00",
            "currency": "EUR",
            "status": "REFUNDED",
            "gateway_response": {
                "refund_id": "REFUND_'$(date +%s)'",
                "reason": "customer_request",
                "refund_amount": "299.00"
            }
        }' \
        "$API_PAYMENTS/callback/paypal")
    
    test_scenario "Callback remboursement PayPal" 200 "$response"
    
    # V√©rification historique des callbacks
    log_info "√âtape 5/5: V√©rification historique callbacks"
    response=$(curl -s -w "\n%{http_code}" \
        -H "Content-Type: application/json" \
        "$API_PAYMENTS/${ORDER_ID_3}/callbacks")
    
    test_scenario "Historique callbacks (2 entr√©es attendues)" 200 "$response"
fi

# ========================================
# SC√âNARIO 4: VIREMENT BANCAIRE MANUEL
# ========================================
log_scenario "SC√âNARIO 4: Paiement par virement bancaire"

# Cr√©ation commande pour gros montant
log_info "√âtape 1/2: Cr√©ation commande gros montant"
response=$(curl -s -w "\n%{http_code}" \
    -X POST \
    -H "Content-Type: application/json" \
    -d '{
        "ord_cst_id": "81558",
        "ord_total_ttc": "2499.00",
        "ord_currency": "EUR",
        "payment_gateway": "BANK_TRANSFER",
        "payment_metadata": {
            "product_type": "formation_entreprise",
            "participants": "15",
            "company": "TechCorp SARL",
            "invoice_required": true
        }
    }' \
    "$API_PAYMENTS")

test_scenario "Cr√©ation commande formation entreprise" 201 "$response"
ORDER_ID_4=$(extract_order_id "$response")
if [ -n "$ORDER_ID_4" ]; then
    CREATED_ORDERS+=("$ORDER_ID_4")
    
    # Simulation validation manuelle
    log_info "√âtape 2/2: Simulation validation manuelle virement"
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        -H "Content-Type: application/json" \
        -d '{
            "transactionId": "TRANSFER_'$(date +%s)'",
            "orderId": "'$ORDER_ID_4'",
            "amount": "2499.00",
            "currency": "EUR",
            "status": "SUCCESS",
            "gateway_response": {
                "bank_reference": "REF'$(date +%s)'",
                "validated_by": "admin_user",
                "validation_date": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }
        }' \
        "$API_PAYMENTS/callback/bank_transfer")
    
    test_scenario "Validation manuelle virement" 200 "$response"
fi

# ========================================
# SC√âNARIO 5: TESTS DE R√âCONCILIATION
# ========================================
log_scenario "SC√âNARIO 5: R√©conciliation et rapports"

# Test des statistiques apr√®s tous les paiements
log_info "R√©cup√©ration des statistiques finales"
response=$(curl -s -w "\n%{http_code}" \
    -H "Content-Type: application/json" \
    "$API_PAYMENTS/stats")

test_scenario "Statistiques apr√®s sc√©narios m√©tier" 200 "$response"

# Affichage du r√©sum√© des statistiques
if [ $? -eq 0 ]; then
    stats_body=$(echo "$response" | head -n -1)
    if echo "$stats_body" | jq . >/dev/null 2>&1; then
        echo "üìä STATISTIQUES APR√àS TESTS:"
        echo "$stats_body" | jq '{
            total_orders: .total_orders,
            paid_orders: .paid_orders,
            pending_orders: .pending_orders,
            total_amount: .total_amount,
            currency: .currency
        }'
    fi
fi

# ========================================
# SC√âNARIO 6: TESTS DE COH√âRENCE DES DONN√âES
# ========================================
log_scenario "SC√âNARIO 6: V√©rification coh√©rence des donn√©es"

# V√©rification de chaque commande cr√©√©e
log_info "V√©rification des commandes cr√©√©es pendant les tests"
for order_id in "${CREATED_ORDERS[@]}"; do
    if [ -n "$order_id" ]; then
        response=$(curl -s -w "\n%{http_code}" \
            -H "Content-Type: application/json" \
            "$API_PAYMENTS/${order_id}/status")
        
        status_code=$(echo "$response" | tail -n1)
        if [ "$status_code" -eq 200 ]; then
            log_success "Commande $order_id: Accessible ‚úì"
        else
            log_error "Commande $order_id: Probl√®me d'acc√®s"
        fi
    fi
done

# ========================================
# RAPPORT FINAL DES SC√âNARIOS
# ========================================
echo ""
echo "========================================"
log_success "SC√âNARIOS M√âTIER TERMIN√âS !"
echo "========================================"

log_scenario "üìã R√âSUM√â DES SC√âNARIOS TEST√âS:"
log_info "‚úì Paiement carte bancaire complet (CYBERPLUS)"
log_info "‚úì Paiement Stripe avec √©chec"
log_info "‚úì Workflow PayPal avec remboursement"
log_info "‚úì Virement bancaire manuel"
log_info "‚úì R√©conciliation et rapports"
log_info "‚úì V√©rification coh√©rence des donn√©es"

echo ""
log_info "üí≥ GATEWAYS TEST√âES:"
log_success "‚Ä¢ CYBERPLUS (succ√®s)"
log_success "‚Ä¢ STRIPE (√©chec)"
log_success "‚Ä¢ PAYPAL (succ√®s + remboursement)"
log_success "‚Ä¢ BANK_TRANSFER (validation manuelle)"

echo ""
log_info "üìà COMMANDES CR√â√âES PENDANT LES TESTS:"
for order_id in "${CREATED_ORDERS[@]}"; do
    if [ -n "$order_id" ]; then
        log_info "‚Ä¢ Commande #$order_id"
    fi
done

echo ""
log_scenario "üéØ Tous les sc√©narios m√©tier ont √©t√© ex√©cut√©s avec succ√®s !"
log_info "Les donn√©es sont persist√©es dans les tables legacy PostgreSQL"
echo "========================================"
